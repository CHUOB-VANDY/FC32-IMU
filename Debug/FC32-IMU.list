
FC32-IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08008b28  08008b28  00018b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f8  080090f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009100  08009100  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000001ac  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001128f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c8  00000000  00000000  000314a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00033870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e90  00000000  00000000  000347e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cea  00000000  00000000  00035670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f7b  00000000  00000000  0005635a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c47f0  00000000  00000000  000692d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012dac5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000547c  00000000  00000000  0012db18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b0c 	.word	0x08008b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008b0c 	.word	0x08008b0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_pc13_Pin|led4_Pin|led5_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f242 0130 	movw	r1, #8240	; 0x2030
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_GPIO_Init+0xbc>)
 8000fda:	f001 fa7d 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = led_pc13_Pin|led4_Pin|led5_Pin;
 8000fde:	f242 0330 	movw	r3, #8240	; 0x2030
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_GPIO_Init+0xbc>)
 8000ff8:	f001 f8d2 	bl	80021a0 <HAL_GPIO_Init>

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40020800 	.word	0x40020800

0800100c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C1_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_I2C1_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C1_Init+0x50>)
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_I2C1_Init+0x58>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_I2C1_Init+0x50>)
 800102a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_I2C1_Init+0x50>)
 800104a:	f001 fa79 	bl	8002540 <HAL_I2C_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001054:	f000 fc8e 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000200 	.word	0x20000200
 8001060:	40005400 	.word	0x40005400
 8001064:	000186a0 	.word	0x000186a0

08001068 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_I2C_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12c      	bne.n	80010e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ac:	2312      	movs	r3, #18
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b8:	2304      	movs	r3, #4
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_I2C_MspInit+0x8c>)
 80010c4:	f001 f86c 	bl	80021a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <MPU9250_Init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void MPU9250_Init(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af04      	add	r7, sp, #16
	 if (HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR,WHO_AM_I_REG,1, &MPU9250_Check, 1, 1000) == HAL_OK ){
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MPU9250_Init+0xc8>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	2275      	movs	r2, #117	; 0x75
 8001110:	21d0      	movs	r1, #208	; 0xd0
 8001112:	482c      	ldr	r0, [pc, #176]	; (80011c4 <MPU9250_Init+0xcc>)
 8001114:	f001 fc52 	bl	80029bc <HAL_I2C_Mem_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d14d      	bne.n	80011ba <MPU9250_Init+0xc2>
		 if ( MPU9250_Check == MPU9250_RESPONSE_OK ){
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MPU9250_Init+0xc8>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MPU9250_Init+0xd0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d147      	bne.n	80011ba <MPU9250_Init+0xc2>

			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1, 1, &PWR_CONIG, 1, 100);				// Auto select best available clock source
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MPU9250_Init+0xd4>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	226b      	movs	r2, #107	; 0x6b
 800113a:	21d0      	movs	r1, #208	; 0xd0
 800113c:	4821      	ldr	r0, [pc, #132]	; (80011c4 <MPU9250_Init+0xcc>)
 800113e:	f001 fb43 	bl	80027c8 <HAL_I2C_Mem_Write>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV, 1, &SMPLRT_CONFIG, 1, 100);			// 1Khz sample rate
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MPU9250_Init+0xd8>)
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2219      	movs	r2, #25
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <MPU9250_Init+0xcc>)
 8001156:	f001 fb37 	bl	80027c8 <HAL_I2C_Mem_Write>

			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, MPU9250_CONFIG, 1, &GYRO_DLPF_CFG, 1, 100);		// Set digital low-pass filter 0x02 to get bandwidth 92Hz
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2301      	movs	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MPU9250_Init+0xdc>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	221a      	movs	r2, #26
 800116a:	21d0      	movs	r1, #208	; 0xd0
 800116c:	4815      	ldr	r0, [pc, #84]	; (80011c4 <MPU9250_Init+0xcc>)
 800116e:	f001 fb2b 	bl	80027c8 <HAL_I2C_Mem_Write>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_2, 1, &ACCEL_DLPF_CFG, 1, 100);		// Set digital low-pass filter 0x02 to get bandwidth 99Hz
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MPU9250_Init+0xe0>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	221d      	movs	r2, #29
 8001182:	21d0      	movs	r1, #208	; 0xd0
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <MPU9250_Init+0xcc>)
 8001186:	f001 fb1f 	bl	80027c8 <HAL_I2C_Mem_Write>

			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG, 1, &GYRO_FS, 1, 100);					// Set GYRO to full scale +250DPS
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MPU9250_Init+0xe4>)
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	221b      	movs	r2, #27
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MPU9250_Init+0xcc>)
 800119e:	f001 fb13 	bl	80027c8 <HAL_I2C_Mem_Write>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG, 1, &ACCEL_FS, 1, 100);				// Set ACCEL to full scale +-2G
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MPU9250_Init+0xe8>)
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	221b      	movs	r2, #27
 80011b2:	21d0      	movs	r1, #208	; 0xd0
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MPU9250_Init+0xcc>)
 80011b6:	f001 fb07 	bl	80027c8 <HAL_I2C_Mem_Write>


		 }

	 }
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000029c 	.word	0x2000029c
 80011c4:	20000200 	.word	0x20000200
 80011c8:	20000005 	.word	0x20000005
 80011cc:	20000254 	.word	0x20000254
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000001 	.word	0x20000001
 80011dc:	20000002 	.word	0x20000002
 80011e0:	20000003 	.word	0x20000003

080011e4 <MPU9250_Read_Data>:

void MPU9250_Read_Data	( void ){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af04      	add	r7, sp, #16

	uint8_t Accel_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, Accel_Val_Raw, 6, 1000);
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2306      	movs	r3, #6
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	223b      	movs	r2, #59	; 0x3b
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	4827      	ldr	r0, [pc, #156]	; (80012a0 <MPU9250_Read_Data+0xbc>)
 8001202:	f001 fbdb 	bl	80029bc <HAL_I2C_Mem_Read>

	acc_x = (int16_t) (Accel_Val_Raw[0] << 8 | Accel_Val_Raw [1]);
 8001206:	7a3b      	ldrb	r3, [r7, #8]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	7a7b      	ldrb	r3, [r7, #9]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MPU9250_Read_Data+0xc0>)
 8001218:	601a      	str	r2, [r3, #0]
	acc_y = (int16_t) (Accel_Val_Raw[2] << 8 | Accel_Val_Raw [3]);
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MPU9250_Read_Data+0xc4>)
 800122c:	601a      	str	r2, [r3, #0]
	acc_z = (int16_t) (Accel_Val_Raw[4] << 8 | Accel_Val_Raw [5]);
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21b      	sxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MPU9250_Read_Data+0xc8>)
 8001240:	601a      	str	r2, [r3, #0]

	uint8_t Gyro_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, GYRO_XOUT_H, 1, Gyro_Val_Raw, 6, 1000);
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2306      	movs	r3, #6
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	463b      	mov	r3, r7
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2243      	movs	r2, #67	; 0x43
 8001254:	21d0      	movs	r1, #208	; 0xd0
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <MPU9250_Read_Data+0xbc>)
 8001258:	f001 fbb0 	bl	80029bc <HAL_I2C_Mem_Read>

	gyro_x = (int16_t) (Gyro_Val_Raw[0] << 8 | Gyro_Val_Raw [1]);
 800125c:	783b      	ldrb	r3, [r7, #0]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MPU9250_Read_Data+0xcc>)
 800126e:	601a      	str	r2, [r3, #0]
	gyro_y = (int16_t) (Gyro_Val_Raw[2] << 8 | Gyro_Val_Raw [3]);
 8001270:	78bb      	ldrb	r3, [r7, #2]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21b      	sxth	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MPU9250_Read_Data+0xd0>)
 8001282:	601a      	str	r2, [r3, #0]
	gyro_z = (int16_t) (Gyro_Val_Raw[4] << 8 | Gyro_Val_Raw [5]);
 8001284:	793b      	ldrb	r3, [r7, #4]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21b      	sxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MPU9250_Read_Data+0xd4>)
 8001296:	601a      	str	r2, [r3, #0]


}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000200 	.word	0x20000200
 80012a4:	20000264 	.word	0x20000264
 80012a8:	20000268 	.word	0x20000268
 80012ac:	2000026c 	.word	0x2000026c
 80012b0:	20000258 	.word	0x20000258
 80012b4:	2000025c 	.word	0x2000025c
 80012b8:	20000260 	.word	0x20000260

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 fdc5 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f879 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f7ff fe3f 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ce:	f7ff fe9d 	bl	800100c <MX_I2C1_Init>
  MX_TIM10_Init();
 80012d2:	f000 fc93 	bl	8001bfc <MX_TIM10_Init>
  MX_TIM11_Init();
 80012d6:	f000 fcb5 	bl	8001c44 <MX_TIM11_Init>
  MX_UART4_Init();
 80012da:	f000 fd1d 	bl	8001d18 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Init();
 80012de:	f7ff ff0b 	bl	80010f8 <MPU9250_Init>
  for ( uint16_t i =0 ; i < 2000 ; i++ ){
 80012e2:	2300      	movs	r3, #0
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	e01c      	b.n	8001322 <main+0x66>


		  MPU9250_Read_Data();
 80012e8:	f7ff ff7c 	bl	80011e4 <MPU9250_Read_Data>
		  gyro_x_cal += gyro_x;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0xd4>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <main+0xd8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <main+0xd4>)
 80012f8:	6013      	str	r3, [r2, #0]
		  gyro_y_cal += gyro_y;
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <main+0xdc>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <main+0xe0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a24      	ldr	r2, [pc, #144]	; (8001398 <main+0xdc>)
 8001306:	6013      	str	r3, [r2, #0]
		  gyro_z_cal += gyro_z;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <main+0xe4>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <main+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <main+0xe4>)
 8001314:	6013      	str	r3, [r2, #0]
		  HAL_Delay(3);
 8001316:	2003      	movs	r0, #3
 8001318:	f000 fe0c 	bl	8001f34 <HAL_Delay>
  for ( uint16_t i =0 ; i < 2000 ; i++ ){
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	3301      	adds	r3, #1
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001328:	d3de      	bcc.n	80012e8 <main+0x2c>

  }
  gyro_x_cal /= 2000;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <main+0xd4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <main+0xec>)
 8001330:	fb82 1203 	smull	r1, r2, r2, r3
 8001334:	11d2      	asrs	r2, r2, #7
 8001336:	17db      	asrs	r3, r3, #31
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <main+0xd4>)
 800133c:	6013      	str	r3, [r2, #0]
  gyro_y_cal /= 2000;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <main+0xdc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <main+0xec>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	11d2      	asrs	r2, r2, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <main+0xdc>)
 8001350:	6013      	str	r3, [r2, #0]
  gyro_z_cal /= 2000;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <main+0xe4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <main+0xec>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	11d2      	asrs	r2, r2, #7
 800135e:	17db      	asrs	r3, r3, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <main+0xe4>)
 8001364:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start(&htim10);
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <main+0xf0>)
 8001368:	f002 fd90 	bl	8003e8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim11);
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <main+0xf4>)
 800136e:	f002 fdf5 	bl	8003f5c <HAL_TIM_Base_Start_IT>
  Current_Time = __HAL_TIM_GET_COUNTER(&htim10);
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <main+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <main+0xf8>)
 800137a:	6013      	str	r3, [r2, #0]
  {



//	  debug(Angle_Pitch_Output);
	  HAL_GPIO_TogglePin(led_pc13_GPIO_Port, led_pc13_Pin);
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <main+0xfc>)
 8001382:	f001 f8c2 	bl	800250a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f000 fdd4 	bl	8001f34 <HAL_Delay>
	  HAL_GPIO_TogglePin(led_pc13_GPIO_Port, led_pc13_Pin);
 800138c:	e7f6      	b.n	800137c <main+0xc0>
 800138e:	bf00      	nop
 8001390:	20000274 	.word	0x20000274
 8001394:	20000258 	.word	0x20000258
 8001398:	20000278 	.word	0x20000278
 800139c:	2000025c 	.word	0x2000025c
 80013a0:	2000027c 	.word	0x2000027c
 80013a4:	20000260 	.word	0x20000260
 80013a8:	10624dd3 	.word	0x10624dd3
 80013ac:	200002a8 	.word	0x200002a8
 80013b0:	200002f0 	.word	0x200002f0
 80013b4:	200002a0 	.word	0x200002a0
 80013b8:	40020800 	.word	0x40020800

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fb06 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <SystemClock_Config+0xcc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <SystemClock_Config+0xcc>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <SystemClock_Config+0xcc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <SystemClock_Config+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <SystemClock_Config+0xd0>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <SystemClock_Config+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800142c:	2308      	movs	r3, #8
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001430:	23a8      	movs	r3, #168	; 0xa8
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f83d 	bl	80034c0 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800144c:	f000 fa92 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2105      	movs	r1, #5
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fa9e 	bl	80039b0 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800147a:	f000 fa7b 	bl	8001974 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	; 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]

	if ( htim == &htim11 ){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4ac2      	ldr	r2, [pc, #776]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	f040 8245 	bne.w	800192e <HAL_TIM_PeriodElapsedCallback+0x49e>


		  MPU9250_Read_Data();
 80014a4:	f7ff fe9e 	bl	80011e4 <MPU9250_Read_Data>

		  gyro_x -= gyro_x_cal;
 80014a8:	4bc0      	ldr	r3, [pc, #768]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4bc0      	ldr	r3, [pc, #768]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4abe      	ldr	r2, [pc, #760]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80014b4:	6013      	str	r3, [r2, #0]
		  gyro_y -= gyro_y_cal;
 80014b6:	4bbf      	ldr	r3, [pc, #764]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4bbf      	ldr	r3, [pc, #764]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4abc      	ldr	r2, [pc, #752]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014c2:	6013      	str	r3, [r2, #0]
		  gyro_z -= gyro_z_cal;
 80014c4:	4bbd      	ldr	r3, [pc, #756]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4bbd      	ldr	r3, [pc, #756]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4abb      	ldr	r2, [pc, #748]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80014d0:	6013      	str	r3, [r2, #0]

		  angle_pitch += gyro_x * 0.0000611;                                   //Calculate the traveled pitch angle and add this to the angle_pitch variable
 80014d2:	4bbc      	ldr	r3, [pc, #752]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4bb2      	ldr	r3, [pc, #712]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f81d 	bl	8000524 <__aeabi_i2d>
 80014ea:	a3a5      	add	r3, pc, #660	; (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f882 	bl	80005f8 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fec6 	bl	800028c <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb4e 	bl	8000ba8 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	4aad      	ldr	r2, [pc, #692]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001510:	6013      	str	r3, [r2, #0]
		  angle_roll += gyro_y * 0.0000611;                                    //Calculate the traveled roll angle and add this to the angle_roll variable
 8001512:	4bad      	ldr	r3, [pc, #692]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f816 	bl	8000548 <__aeabi_f2d>
 800151c:	4604      	mov	r4, r0
 800151e:	460d      	mov	r5, r1
 8001520:	4ba4      	ldr	r3, [pc, #656]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fffd 	bl	8000524 <__aeabi_i2d>
 800152a:	a395      	add	r3, pc, #596	; (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f862 	bl	80005f8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fea6 	bl	800028c <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb2e 	bl	8000ba8 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	4a9e      	ldr	r2, [pc, #632]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001550:	6013      	str	r3, [r2, #0]
		  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
		  angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
 8001552:	4b9c      	ldr	r3, [pc, #624]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fff6 	bl	8000548 <__aeabi_f2d>
 800155c:	4604      	mov	r4, r0
 800155e:	460d      	mov	r5, r1
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffef 	bl	8000548 <__aeabi_f2d>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
 800156e:	4b93      	ldr	r3, [pc, #588]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	a383      	add	r3, pc, #524	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b17 	vmov	d7, r2, r3
 800158a:	eeb0 0a47 	vmov.f32	s0, s14
 800158e:	eef0 0a67 	vmov.f32	s1, s15
 8001592:	f005 ff41 	bl	8007418 <sin>
 8001596:	ec53 2b10 	vmov	r2, r3, d0
 800159a:	4640      	mov	r0, r8
 800159c:	4649      	mov	r1, r9
 800159e:	f7ff f82b 	bl	80005f8 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7fe fe6f 	bl	800028c <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff faf7 	bl	8000ba8 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a81      	ldr	r2, [pc, #516]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80015be:	6013      	str	r3, [r2, #0]
		  angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4680      	mov	r8, r0
 80015da:	4689      	mov	r9, r1
 80015dc:	4b77      	ldr	r3, [pc, #476]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	a368      	add	r3, pc, #416	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f804 	bl	80005f8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	ec43 2b17 	vmov	d7, r2, r3
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	eef0 0a67 	vmov.f32	s1, s15
 8001600:	f005 ff0a 	bl	8007418 <sin>
 8001604:	ec53 2b10 	vmov	r2, r3, d0
 8001608:	4640      	mov	r0, r8
 800160a:	4649      	mov	r1, r9
 800160c:	f7fe fff4 	bl	80005f8 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fe36 	bl	8000288 <__aeabi_dsub>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fac0 	bl	8000ba8 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a67      	ldr	r2, [pc, #412]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800162c:	6013      	str	r3, [r2, #0]

		  //Accelerometer angle calculations
		  acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));  //Calculate the total accelerometer vector
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a66      	ldr	r2, [pc, #408]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4964      	ldr	r1, [pc, #400]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001640:	6809      	ldr	r1, [r1, #0]
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	441a      	add	r2, r3
 8001648:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4961      	ldr	r1, [pc, #388]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800164e:	6809      	ldr	r1, [r1, #0]
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff64 	bl	8000524 <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	ec43 2b10 	vmov	d0, r2, r3
 8001664:	f005 ff64 	bl	8007530 <sqrt>
 8001668:	ec53 2b10 	vmov	r2, r3, d0
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fa72 	bl	8000b58 <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001678:	6013      	str	r3, [r2, #0]
		  //57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
		  angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
 800167a:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001686:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001692:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001696:	ee16 0a90 	vmov	r0, s13
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ec43 2b10 	vmov	d0, r2, r3
 80016a6:	f005 ff0f 	bl	80074c8 <asin>
 80016aa:	ec51 0b10 	vmov	r0, r1, d0
 80016ae:	a338      	add	r3, pc, #224	; (adr r3, 8001790 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffa0 	bl	80005f8 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa72 	bl	8000ba8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80016c8:	6013      	str	r3, [r2, #0]
		  angle_roll_acc = asin((float)acc_x/acc_total_vector)* 57.296;       //Calculate the roll angle
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	ee16 0a90 	vmov	r0, s13
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	f005 fee7 	bl	80074c8 <asin>
 80016fa:	ec51 0b10 	vmov	r0, r1, d0
 80016fe:	a324      	add	r3, pc, #144	; (adr r3, 8001790 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff78 	bl	80005f8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa4a 	bl	8000ba8 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001718:	6013      	str	r3, [r2, #0]

		  //Place the MPU-6050 spirit level and note the values in the following two lines for calibration
		  angle_pitch_acc -= 2.1;                                               //Accelerometer calibration value for pitch
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_f2d>
 8001724:	a31c      	add	r3, pc, #112	; (adr r3, 8001798 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fdad 	bl	8000288 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa37 	bl	8000ba8 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800173e:	6013      	str	r3, [r2, #0]
		  angle_roll_acc -= 4.1;                                               //Accelerometer calibration value for roll
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feff 	bl	8000548 <__aeabi_f2d>
 800174a:	a315      	add	r3, pc, #84	; (adr r3, 80017a0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fd9a 	bl	8000288 <__aeabi_dsub>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa24 	bl	8000ba8 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001764:	6013      	str	r3, [r2, #0]

		  if(set_gyro_angles){                                                 //If the IMU is already started
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8086 	beq.w	800187c <HAL_TIM_PeriodElapsedCallback+0x3ec>
		    angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	e035      	b.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0x358>
 800177c:	f3af 8000 	nop.w
 8001780:	01d41596 	.word	0x01d41596
 8001784:	3f10045a 	.word	0x3f10045a
 8001788:	652c6e62 	.word	0x652c6e62
 800178c:	3eb1e26f 	.word	0x3eb1e26f
 8001790:	53f7ced9 	.word	0x53f7ced9
 8001794:	404ca5e3 	.word	0x404ca5e3
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	4000cccc 	.word	0x4000cccc
 80017a0:	66666666 	.word	0x66666666
 80017a4:	40106666 	.word	0x40106666
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	20000258 	.word	0x20000258
 80017b0:	20000274 	.word	0x20000274
 80017b4:	2000025c 	.word	0x2000025c
 80017b8:	20000278 	.word	0x20000278
 80017bc:	20000260 	.word	0x20000260
 80017c0:	2000027c 	.word	0x2000027c
 80017c4:	20000280 	.word	0x20000280
 80017c8:	20000284 	.word	0x20000284
 80017cc:	20000264 	.word	0x20000264
 80017d0:	20000268 	.word	0x20000268
 80017d4:	2000026c 	.word	0x2000026c
 80017d8:	20000270 	.word	0x20000270
 80017dc:	20000290 	.word	0x20000290
 80017e0:	2000028c 	.word	0x2000028c
 80017e4:	20000288 	.word	0x20000288
 80017e8:	a355      	add	r3, pc, #340	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fea2 	bl	8000548 <__aeabi_f2d>
 8001804:	a34c      	add	r3, pc, #304	; (adr r3, 8001938 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fef5 	bl	80005f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fd39 	bl	800028c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9c1 	bl	8000ba8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800182a:	6013      	str	r3, [r2, #0]
		    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_f2d>
 8001836:	a342      	add	r3, pc, #264	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fedc 	bl	80005f8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	a339      	add	r3, pc, #228	; (adr r3, 8001938 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fece 	bl	80005f8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd12 	bl	800028c <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f99a 	bl	8000ba8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a3a      	ldr	r2, [pc, #232]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00a      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x402>
		  }
		  else{                                                                //At first start
		    angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001882:	6013      	str	r3, [r2, #0]
		    angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a35      	ldr	r2, [pc, #212]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800188a:	6013      	str	r3, [r2, #0]
		    set_gyro_angles = true;                                            //Set the IMU started flag
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
		  }

		  //To dampen the pitch and roll angles a complementary filter is used
		  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;   //Take 90% of the output pitch value and add 10% of the raw pitch value
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	a32a      	add	r3, pc, #168	; (adr r3, 8001948 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	a325      	add	r3, pc, #148	; (adr r3, 8001950 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fe9b 	bl	80005f8 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe fcdf 	bl	800028c <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f967 	bl	8000ba8 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80018de:	6013      	str	r3, [r2, #0]
		  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;      //Take 90% of the output roll value and add 10% of the raw roll value
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	a317      	add	r3, pc, #92	; (adr r3, 8001948 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe21 	bl	8000548 <__aeabi_f2d>
 8001906:	a312      	add	r3, pc, #72	; (adr r3, 8001950 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe74 	bl	80005f8 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fcb8 	bl	800028c <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f940 	bl	8000ba8 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800192c:	6013      	str	r3, [r2, #0]



	}

}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001938:	eb1c432d 	.word	0xeb1c432d
 800193c:	3f3a36e2 	.word	0x3f3a36e2
 8001940:	23a29c78 	.word	0x23a29c78
 8001944:	3feffcb9 	.word	0x3feffcb9
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	3feccccc 	.word	0x3feccccc
 8001950:	9999999a 	.word	0x9999999a
 8001954:	3fb99999 	.word	0x3fb99999
 8001958:	20000290 	.word	0x20000290
 800195c:	20000280 	.word	0x20000280
 8001960:	20000284 	.word	0x20000284
 8001964:	2000028c 	.word	0x2000028c
 8001968:	20000288 	.word	0x20000288
 800196c:	20000294 	.word	0x20000294
 8001970:	20000298 	.word	0x20000298

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	e7fe      	b.n	800197c <Error_Handler+0x8>
	...

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_MspInit+0x4c>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_MspInit+0x4c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 fa6a 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a2a:	f002 fb07 	bl	800403c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002a8 	.word	0x200002a8

08001a38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a3e:	f002 fafd 	bl	800403c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200002f0 	.word	0x200002f0

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a66:	f002 ff8f 	bl	8004988 <__errno>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2216      	movs	r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_exit>:

void _exit (int status)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a8e:	e7fe      	b.n	8001a8e <_exit+0x12>

08001a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
	}

return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e009      	b.n	8001af0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf1      	blt.n	8001adc <_write+0x12>
	}
	return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_close>:

int _close(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_isatty>:

int _isatty(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f002 fef4 	bl	8004988 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20020000 	.word	0x20020000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	200002a4 	.word	0x200002a4
 8001bd4:	20000390 	.word	0x20000390

08001bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <SystemInit+0x20>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <SystemInit+0x20>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <MX_TIM10_Init+0x44>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c08:	2253      	movs	r2, #83	; 0x53
 8001c0a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c18:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_TIM10_Init+0x40>)
 8001c28:	f002 f8e0 	bl	8003dec <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c32:	f7ff fe9f 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002a8 	.word	0x200002a8
 8001c40:	40014400 	.word	0x40014400

08001c44 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <MX_TIM11_Init+0x44>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c50:	2253      	movs	r2, #83	; 0x53
 8001c52:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c60:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_TIM11_Init+0x40>)
 8001c70:	f002 f8bc 	bl	8003dec <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c7a:	f7ff fe7b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002f0 	.word	0x200002f0
 8001c88:	40014800 	.word	0x40014800

08001c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_TIM_Base_MspInit+0x80>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d116      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2019      	movs	r0, #25
 8001cc0:	f000 fa37 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cc4:	2019      	movs	r0, #25
 8001cc6:	f000 fa50 	bl	800216a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001cca:	e01a      	b.n	8001d02 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <HAL_TIM_Base_MspInit+0x88>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d115      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0x84>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201a      	movs	r0, #26
 8001cf8:	f000 fa1b 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cfc:	201a      	movs	r0, #26
 8001cfe:	f000 fa34 	bl	800216a <HAL_NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40014400 	.word	0x40014400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40014800 	.word	0x40014800

08001d18 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_UART4_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_UART4_Init+0x4c>)
 8001d50:	f002 fb58 	bl	8004404 <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f7ff fe0b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000338 	.word	0x20000338
 8001d68:	40004c00 	.word	0x40004c00

08001d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0x84>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12c      	bne.n	8001de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_UART_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_UART_MspInit+0x8c>)
 8001de4:	f000 f9dc 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40004c00 	.word	0x40004c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020800 	.word	0x40020800

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e18:	4c0b      	ldr	r4, [pc, #44]	; (8001e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e26:	f7ff fed7 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f002 fdb3 	bl	8004994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7ff fa45 	bl	80012bc <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e40:	08009108 	.word	0x08009108
  ldr r2, =_sbss
 8001e44:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e48:	20000390 	.word	0x20000390

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_Init+0x40>)
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_Init+0x40>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_Init+0x40>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f94f 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fd7c 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f967 	bl	8002186 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f92f 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000010 	.word	0x20000010
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000010 	.word	0x20000010
 8001f18:	2000037c 	.word	0x2000037c

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000037c 	.word	0x2000037c

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000010 	.word	0x20000010

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_GPIO_Init+0x30c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5b      	ldr	r2, [pc, #364]	; (80024b0 <HAL_GPIO_Init+0x310>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_GPIO_Init+0x314>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_GPIO_Init+0x318>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x31c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <HAL_GPIO_Init+0x320>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4d      	ldr	r2, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x328>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <HAL_GPIO_Init+0x310>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_GPIO_Init+0x334>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x334>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_GPIO_Init+0x334>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40021400 	.word	0x40021400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40021c00 	.word	0x40021c00
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	041a      	lsls	r2, r3, #16
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43d9      	mvns	r1, r3
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	400b      	ands	r3, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e12b      	b.n	80027aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fd7e 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a4:	f001 fbfa 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 80025a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a81      	ldr	r2, [pc, #516]	; (80027b4 <HAL_I2C_Init+0x274>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d807      	bhi.n	80025c4 <HAL_I2C_Init+0x84>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a80      	ldr	r2, [pc, #512]	; (80027b8 <HAL_I2C_Init+0x278>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	bf94      	ite	ls
 80025bc:	2301      	movls	r3, #1
 80025be:	2300      	movhi	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e006      	b.n	80025d2 <HAL_I2C_Init+0x92>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a7d      	ldr	r2, [pc, #500]	; (80027bc <HAL_I2C_Init+0x27c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bf94      	ite	ls
 80025cc:	2301      	movls	r3, #1
 80025ce:	2300      	movhi	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0e7      	b.n	80027aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a78      	ldr	r2, [pc, #480]	; (80027c0 <HAL_I2C_Init+0x280>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9b      	lsrs	r3, r3, #18
 80025e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <HAL_I2C_Init+0x274>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d802      	bhi.n	8002614 <HAL_I2C_Init+0xd4>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3301      	adds	r3, #1
 8002612:	e009      	b.n	8002628 <HAL_I2C_Init+0xe8>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a69      	ldr	r2, [pc, #420]	; (80027c4 <HAL_I2C_Init+0x284>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	3301      	adds	r3, #1
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800263a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	495c      	ldr	r1, [pc, #368]	; (80027b4 <HAL_I2C_Init+0x274>)
 8002644:	428b      	cmp	r3, r1
 8002646:	d819      	bhi.n	800267c <HAL_I2C_Init+0x13c>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e59      	subs	r1, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fbb1 f3f3 	udiv	r3, r1, r3
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800265c:	400b      	ands	r3, r1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_I2C_Init+0x138>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e59      	subs	r1, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002670:	3301      	adds	r3, #1
 8002672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002676:	e051      	b.n	800271c <HAL_I2C_Init+0x1dc>
 8002678:	2304      	movs	r3, #4
 800267a:	e04f      	b.n	800271c <HAL_I2C_Init+0x1dc>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d111      	bne.n	80026a8 <HAL_I2C_Init+0x168>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e012      	b.n	80026ce <HAL_I2C_Init+0x18e>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	0099      	lsls	r1, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Init+0x196>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e022      	b.n	800271c <HAL_I2C_Init+0x1dc>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10e      	bne.n	80026fc <HAL_I2C_Init+0x1bc>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e58      	subs	r0, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	440b      	add	r3, r1
 80026ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fa:	e00f      	b.n	800271c <HAL_I2C_Init+0x1dc>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	0099      	lsls	r1, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	6809      	ldr	r1, [r1, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800274a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6911      	ldr	r1, [r2, #16]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	000186a0 	.word	0x000186a0
 80027b8:	001e847f 	.word	0x001e847f
 80027bc:	003d08ff 	.word	0x003d08ff
 80027c0:	431bde83 	.word	0x431bde83
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	817b      	strh	r3, [r7, #10]
 80027da:	460b      	mov	r3, r1
 80027dc:	813b      	strh	r3, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e2:	f7ff fb9b 	bl	8001f1c <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	f040 80d9 	bne.w	80029a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2319      	movs	r3, #25
 80027fc:	2201      	movs	r2, #1
 80027fe:	496d      	ldr	r1, [pc, #436]	; (80029b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fc7f 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
 800280e:	e0cc      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_I2C_Mem_Write+0x56>
 800281a:	2302      	movs	r3, #2
 800281c:	e0c5      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d007      	beq.n	8002844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2221      	movs	r2, #33	; 0x21
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a4d      	ldr	r2, [pc, #308]	; (80029b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002886:	88f8      	ldrh	r0, [r7, #6]
 8002888:	893a      	ldrh	r2, [r7, #8]
 800288a:	8979      	ldrh	r1, [r7, #10]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fab6 	bl	8002e08 <I2C_RequestMemoryWrite>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d052      	beq.n	8002948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e081      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fd00 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06b      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11b      	bne.n	8002948 <HAL_I2C_Mem_Write+0x180>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d017      	beq.n	8002948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1aa      	bne.n	80028a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fcec 	bl	8003332 <I2C_WaitOnBTFFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00d      	beq.n	800297c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	2b04      	cmp	r3, #4
 8002966:	d107      	bne.n	8002978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e016      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	00100002 	.word	0x00100002
 80029b8:	ffff0000 	.word	0xffff0000

080029bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	; 0x30
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	817b      	strh	r3, [r7, #10]
 80029ce:	460b      	mov	r3, r1
 80029d0:	813b      	strh	r3, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d6:	f7ff faa1 	bl	8001f1c <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	f040 8208 	bne.w	8002dfa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2319      	movs	r3, #25
 80029f0:	2201      	movs	r2, #1
 80029f2:	497b      	ldr	r1, [pc, #492]	; (8002be0 <HAL_I2C_Mem_Read+0x224>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb85 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
 8002a02:	e1fb      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Mem_Read+0x56>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e1f4      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d007      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2222      	movs	r2, #34	; 0x22
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <HAL_I2C_Mem_Read+0x228>)
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7a:	88f8      	ldrh	r0, [r7, #6]
 8002a7c:	893a      	ldrh	r2, [r7, #8]
 8002a7e:	8979      	ldrh	r1, [r7, #10]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa52 	bl	8002f34 <I2C_RequestMemoryRead>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1b0      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d113      	bne.n	8002aca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e184      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d11b      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e164      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d11b      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	e144      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b60:	e138      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f200 80f1 	bhi.w	8002d4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d123      	bne.n	8002bbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fc1b 	bl	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e139      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bba:	e10b      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d14e      	bne.n	8002c62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4906      	ldr	r1, [pc, #24]	; (8002be8 <HAL_I2C_Mem_Read+0x22c>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa98 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e10e      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
 8002bde:	bf00      	nop
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000
 8002be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c60:	e0b8      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4966      	ldr	r1, [pc, #408]	; (8002e04 <HAL_I2C_Mem_Read+0x448>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa49 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0bf      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	494f      	ldr	r1, [pc, #316]	; (8002e04 <HAL_I2C_Mem_Read+0x448>)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fa1b 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e091      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d4c:	e042      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fb2e 	bl	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e04c      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d118      	bne.n	8002dd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f47f aec2 	bne.w	8002b62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	00010004 	.word	0x00010004

08002e08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	813b      	strh	r3, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f960 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e58:	d103      	bne.n	8002e62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e05f      	b.n	8002f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	492d      	ldr	r1, [pc, #180]	; (8002f30 <I2C_RequestMemoryWrite+0x128>)
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f998 	bl	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e04c      	b.n	8002f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	6a39      	ldr	r1, [r7, #32]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fa02 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d107      	bne.n	8002eca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02b      	b.n	8002f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed4:	893b      	ldrh	r3, [r7, #8]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e021      	b.n	8002f24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9dc 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e005      	b.n	8002f26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1a:	893b      	ldrh	r3, [r7, #8]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	00010002 	.word	0x00010002

08002f34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	460b      	mov	r3, r1
 8002f48:	813b      	strh	r3, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f8c2 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d103      	bne.n	8002f9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0aa      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	4952      	ldr	r1, [pc, #328]	; (8003100 <I2C_RequestMemoryRead+0x1cc>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f8fa 	bl	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e097      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f964 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d107      	bne.n	8003006 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e076      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003010:	893b      	ldrh	r3, [r7, #8]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	e021      	b.n	8003060 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b29b      	uxth	r3, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f93e 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b04      	cmp	r3, #4
 8003040:	d107      	bne.n	8003052 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e050      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003056:	893b      	ldrh	r3, [r7, #8]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003062:	6a39      	ldr	r1, [r7, #32]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f923 	bl	80032b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e035      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f82b 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d103      	bne.n	80030cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e013      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	4906      	ldr	r1, [pc, #24]	; (8003100 <I2C_RequestMemoryRead+0x1cc>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f863 	bl	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	00010002 	.word	0x00010002

08003104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003114:	e025      	b.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d021      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fefd 	bl	8001f1c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e023      	b.n	80031aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10d      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x84>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	e00c      	b.n	80031a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d0b6      	beq.n	8003116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c0:	e051      	b.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d123      	bne.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e046      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d021      	beq.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe fe7b 	bl	8001f1c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e020      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10c      	bne.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e00b      	b.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d18d      	bne.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032bc:	e02d      	b.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8ce 	bl	8003460 <I2C_IsAcknowledgeFailed>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e02d      	b.n	800332a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d021      	beq.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe fe21 	bl	8001f1c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e007      	b.n	800332a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d1ca      	bne.n	80032be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333e:	e02d      	b.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f88d 	bl	8003460 <I2C_IsAcknowledgeFailed>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e02d      	b.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d021      	beq.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003358:	f7fe fde0 	bl	8001f1c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d302      	bcc.n	800336e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e007      	b.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d1ca      	bne.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033c0:	e042      	b.n	8003448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d119      	bne.n	8003404 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0210 	mvn.w	r2, #16
 80033d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e029      	b.n	8003458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fe fd8a 	bl	8001f1c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d1b5      	bne.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d11b      	bne.n	80034b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fcd0 	bl	8001f1c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe fccc 	bl	8001f1c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fcbc 	bl	8001f1c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fcb8 	bl	8001f1c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fc71 	bl	8001f1c <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe fc6d 	bl	8001f1c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fc50 	bl	8001f1c <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe fc4c 	bl	8001f1c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fc30 	bl	8001f1c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe fc2c 	bl	8001f1c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fc19 	bl	8001f1c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fe fc15 	bl	8001f1c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe fbd5 	bl	8001f1c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fbd1 	bl	8001f1c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe fb96 	bl	8001f1c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe fb92 	bl	8001f1c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fe fb80 	bl	8001f1c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fb7c 	bl	8001f1c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fb50 	bl	8001f1c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe fb4c 	bl	8001f1c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fb25 	bl	8001f1c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fb21 	bl	8001f1c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb0e 	bl	8001f1c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fb0a 	bl	8001f1c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fa3c 	bl	8001f1c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe fa38 	bl	8001f1c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe f99c 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08008b28 	.word	0x08008b28
 8003b74:	20000008 	.word	0x20000008
 8003b78:	2000000c 	.word	0x2000000c

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b094      	sub	sp, #80	; 0x50
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	647b      	str	r3, [r7, #68]	; 0x44
 8003b88:	2300      	movs	r3, #0
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80e1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e0db      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bb4:	e0db      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b72      	ldr	r3, [pc, #456]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bba:	e0d8      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bee:	4622      	mov	r2, r4
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	0159      	lsls	r1, r3, #5
 8003bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c00:	0150      	lsls	r0, r2, #5
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4621      	mov	r1, r4
 8003c08:	1a51      	subs	r1, r2, r1
 8003c0a:	6139      	str	r1, [r7, #16]
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c20:	4659      	mov	r1, fp
 8003c22:	018b      	lsls	r3, r1, #6
 8003c24:	4651      	mov	r1, sl
 8003c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	018a      	lsls	r2, r1, #6
 8003c2e:	4651      	mov	r1, sl
 8003c30:	ebb2 0801 	subs.w	r8, r2, r1
 8003c34:	4659      	mov	r1, fp
 8003c36:	eb63 0901 	sbc.w	r9, r3, r1
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c4e:	4690      	mov	r8, r2
 8003c50:	4699      	mov	r9, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	eb18 0303 	adds.w	r3, r8, r3
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	eb49 0303 	adc.w	r3, r9, r3
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	028b      	lsls	r3, r1, #10
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c78:	4621      	mov	r1, r4
 8003c7a:	028a      	lsls	r2, r1, #10
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	2200      	movs	r2, #0
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8c:	f7fc ffdc 	bl	8000c48 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c98:	e058      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b38      	ldr	r3, [pc, #224]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	2300      	movs	r3, #0
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	f04f 0000 	mov.w	r0, #0
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	0159      	lsls	r1, r3, #5
 8003cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc6:	0150      	lsls	r0, r2, #5
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cec:	ebb2 040a 	subs.w	r4, r2, sl
 8003cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	00eb      	lsls	r3, r5, #3
 8003cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d02:	00e2      	lsls	r2, r4, #3
 8003d04:	4614      	mov	r4, r2
 8003d06:	461d      	mov	r5, r3
 8003d08:	4643      	mov	r3, r8
 8003d0a:	18e3      	adds	r3, r4, r3
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	eb45 0303 	adc.w	r3, r5, r3
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d22:	4629      	mov	r1, r5
 8003d24:	028b      	lsls	r3, r1, #10
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	028a      	lsls	r2, r1, #10
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	61fa      	str	r2, [r7, #28]
 8003d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d40:	f7fc ff82 	bl	8000c48 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3750      	adds	r7, #80	; 0x50
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	00f42400 	.word	0x00f42400

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000008 	.word	0x20000008

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4903      	ldr	r1, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	08008b38 	.word	0x08008b38

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	f7ff ffdc 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	08008b38 	.word	0x08008b38

08003dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e041      	b.n	8003e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd ff3a 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fa36 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e046      	b.n	8003f32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_TIM_Base_Start+0xb4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_TIM_Base_Start+0xb8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_Start+0xbc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIM_Base_Start+0xc0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_Base_Start+0xc4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_TIM_Base_Start+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIM_Base_Start+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e04e      	b.n	8004012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d01d      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d010      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e007      	b.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40001800 	.word	0x40001800

0800403c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0202 	mvn.w	r2, #2
 8004068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8ee 	bl	8004260 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8e0 	bl	800424c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8f1 	bl	8004274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0204 	mvn.w	r2, #4
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8c4 	bl	8004260 <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8b6 	bl	800424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8c7 	bl	8004274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0208 	mvn.w	r2, #8
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2204      	movs	r2, #4
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f89a 	bl	8004260 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f88c 	bl	800424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f89d 	bl	8004274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b10      	cmp	r3, #16
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0210 	mvn.w	r2, #16
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2208      	movs	r2, #8
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f870 	bl	8004260 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f862 	bl	800424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f873 	bl	8004274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0201 	mvn.w	r2, #1
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd f968 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f902 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f838 	bl	8004288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0220 	mvn.w	r2, #32
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8cc 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a40      	ldr	r2, [pc, #256]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d00f      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3d      	ldr	r2, [pc, #244]	; (80043b4 <TIM_Base_SetConfig+0x118>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00b      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3c      	ldr	r2, [pc, #240]	; (80043b8 <TIM_Base_SetConfig+0x11c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <TIM_Base_SetConfig+0x120>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3a      	ldr	r2, [pc, #232]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d027      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <TIM_Base_SetConfig+0x118>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d023      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <TIM_Base_SetConfig+0x11c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01f      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <TIM_Base_SetConfig+0x120>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d017      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <TIM_Base_SetConfig+0x128>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <TIM_Base_SetConfig+0x12c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <TIM_Base_SetConfig+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <TIM_Base_SetConfig+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <TIM_Base_SetConfig+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <TIM_Base_SetConfig+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_Base_SetConfig+0xf8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	615a      	str	r2, [r3, #20]
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40010400 	.word	0x40010400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	40001800 	.word	0x40001800
 80043d4:	40001c00 	.word	0x40001c00
 80043d8:	40002000 	.word	0x40002000

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e03f      	b.n	8004496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fc9e 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f829 	bl	80044a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800447c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b0c0      	sub	sp, #256	; 0x100
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f8:	f021 010c 	bic.w	r1, r1, #12
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004506:	430b      	orrs	r3, r1
 8004508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	6999      	ldr	r1, [r3, #24]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	ea40 0301 	orr.w	r3, r0, r1
 8004526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8f      	ldr	r3, [pc, #572]	; (800476c <UART_SetConfig+0x2cc>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <UART_SetConfig+0xa0>
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <UART_SetConfig+0x2d0>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7ff fc40 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8004544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004548:	e003      	b.n	8004552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7ff fc27 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800454e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 810c 	bne.w	8004778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800456e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	1891      	adds	r1, r2, r2
 8004578:	65b9      	str	r1, [r7, #88]	; 0x58
 800457a:	415b      	adcs	r3, r3
 800457c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800457e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004582:	4621      	mov	r1, r4
 8004584:	eb12 0801 	adds.w	r8, r2, r1
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0901 	adc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b0:	462b      	mov	r3, r5
 80045b2:	eb49 0303 	adc.w	r3, r9, r3
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ce:	460b      	mov	r3, r1
 80045d0:	18db      	adds	r3, r3, r3
 80045d2:	653b      	str	r3, [r7, #80]	; 0x50
 80045d4:	4613      	mov	r3, r2
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	657b      	str	r3, [r7, #84]	; 0x54
 80045dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045e4:	f7fc fb30 	bl	8000c48 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004610:	415b      	adcs	r3, r3
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004618:	4641      	mov	r1, r8
 800461a:	eb12 0a01 	adds.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0b01 	adc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004638:	4692      	mov	sl, r2
 800463a:	469b      	mov	fp, r3
 800463c:	4643      	mov	r3, r8
 800463e:	eb1a 0303 	adds.w	r3, sl, r3
 8004642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004646:	464b      	mov	r3, r9
 8004648:	eb4b 0303 	adc.w	r3, fp, r3
 800464c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800465c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
 8004672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800467a:	f7fc fae5 	bl	8000c48 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4611      	mov	r1, r2
 8004684:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <UART_SetConfig+0x2d4>)
 8004686:	fba3 2301 	umull	r2, r3, r3, r1
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2264      	movs	r2, #100	; 0x64
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <UART_SetConfig+0x2d4>)
 800469c:	fba3 2302 	umull	r2, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a8:	441c      	add	r4, r3
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c4:	415b      	adcs	r3, r3
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6339      	str	r1, [r7, #48]	; 0x30
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800471c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004736:	f7fc fa87 	bl	8000c48 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x2d4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	; 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x2d4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004768:	e105      	b.n	8004976 <UART_SetConfig+0x4d6>
 800476a:	bf00      	nop
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800478a:	4642      	mov	r2, r8
 800478c:	464b      	mov	r3, r9
 800478e:	1891      	adds	r1, r2, r2
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	415b      	adcs	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	4641      	mov	r1, r8
 800479c:	1854      	adds	r4, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0501 	adc.w	r5, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4643      	mov	r3, r8
 80047ba:	18e3      	adds	r3, r4, r3
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c0:	464b      	mov	r3, r9
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047e6:	4629      	mov	r1, r5
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f0:	4621      	mov	r1, r4
 80047f2:	008a      	lsls	r2, r1, #2
 80047f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047f8:	f7fc fa26 	bl	8000c48 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b60      	ldr	r3, [pc, #384]	; (8004984 <UART_SetConfig+0x4e4>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011c      	lsls	r4, r3, #4
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	61b9      	str	r1, [r7, #24]
 8004824:	415b      	adcs	r3, r3
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6139      	str	r1, [r7, #16]
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	67bb      	str	r3, [r7, #120]	; 0x78
 8004876:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004884:	4649      	mov	r1, r9
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488e:	4641      	mov	r1, r8
 8004890:	008a      	lsls	r2, r1, #2
 8004892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004896:	f7fc f9d7 	bl	8000c48 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <UART_SetConfig+0x4e4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <UART_SetConfig+0x4e4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048be:	441c      	add	r4, r3
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	673b      	str	r3, [r7, #112]	; 0x70
 80048c8:	677a      	str	r2, [r7, #116]	; 0x74
 80048ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048de:	4641      	mov	r1, r8
 80048e0:	1851      	adds	r1, r2, r1
 80048e2:	6039      	str	r1, [r7, #0]
 80048e4:	4649      	mov	r1, r9
 80048e6:	414b      	adcs	r3, r1
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f6:	4659      	mov	r1, fp
 80048f8:	00cb      	lsls	r3, r1, #3
 80048fa:	4651      	mov	r1, sl
 80048fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004900:	4651      	mov	r1, sl
 8004902:	00ca      	lsls	r2, r1, #3
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	4603      	mov	r3, r0
 800490a:	4642      	mov	r2, r8
 800490c:	189b      	adds	r3, r3, r2
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004910:	464b      	mov	r3, r9
 8004912:	460a      	mov	r2, r1
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	663b      	str	r3, [r7, #96]	; 0x60
 8004924:	667a      	str	r2, [r7, #100]	; 0x64
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004932:	4649      	mov	r1, r9
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	4641      	mov	r1, r8
 8004938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493c:	4641      	mov	r1, r8
 800493e:	008a      	lsls	r2, r1, #2
 8004940:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004944:	f7fc f980 	bl	8000c48 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <UART_SetConfig+0x4e4>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <UART_SetConfig+0x4e4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4422      	add	r2, r4
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	bf00      	nop
 8004978:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	51eb851f 	.word	0x51eb851f

08004988 <__errno>:
 8004988:	4b01      	ldr	r3, [pc, #4]	; (8004990 <__errno+0x8>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000014 	.word	0x20000014

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4d0d      	ldr	r5, [pc, #52]	; (80049cc <__libc_init_array+0x38>)
 8004998:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <__libc_init_array+0x3c>)
 800499a:	1b64      	subs	r4, r4, r5
 800499c:	10a4      	asrs	r4, r4, #2
 800499e:	2600      	movs	r6, #0
 80049a0:	42a6      	cmp	r6, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	4d0b      	ldr	r5, [pc, #44]	; (80049d4 <__libc_init_array+0x40>)
 80049a6:	4c0c      	ldr	r4, [pc, #48]	; (80049d8 <__libc_init_array+0x44>)
 80049a8:	f004 f8b0 	bl	8008b0c <_init>
 80049ac:	1b64      	subs	r4, r4, r5
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	2600      	movs	r6, #0
 80049b2:	42a6      	cmp	r6, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049bc:	4798      	blx	r3
 80049be:	3601      	adds	r6, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c6:	4798      	blx	r3
 80049c8:	3601      	adds	r6, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	08009100 	.word	0x08009100
 80049d0:	08009100 	.word	0x08009100
 80049d4:	08009100 	.word	0x08009100
 80049d8:	08009104 	.word	0x08009104

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <__cvt>:
 80049ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	ec55 4b10 	vmov	r4, r5, d0
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	460e      	mov	r6, r1
 80049f8:	4619      	mov	r1, r3
 80049fa:	462b      	mov	r3, r5
 80049fc:	bfbb      	ittet	lt
 80049fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a02:	461d      	movlt	r5, r3
 8004a04:	2300      	movge	r3, #0
 8004a06:	232d      	movlt	r3, #45	; 0x2d
 8004a08:	700b      	strb	r3, [r1, #0]
 8004a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a10:	4691      	mov	r9, r2
 8004a12:	f023 0820 	bic.w	r8, r3, #32
 8004a16:	bfbc      	itt	lt
 8004a18:	4622      	movlt	r2, r4
 8004a1a:	4614      	movlt	r4, r2
 8004a1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a20:	d005      	beq.n	8004a2e <__cvt+0x42>
 8004a22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a26:	d100      	bne.n	8004a2a <__cvt+0x3e>
 8004a28:	3601      	adds	r6, #1
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	e000      	b.n	8004a30 <__cvt+0x44>
 8004a2e:	2103      	movs	r1, #3
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	ab02      	add	r3, sp, #8
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	ec45 4b10 	vmov	d0, r4, r5
 8004a3c:	4653      	mov	r3, sl
 8004a3e:	4632      	mov	r2, r6
 8004a40:	f000 fcca 	bl	80053d8 <_dtoa_r>
 8004a44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a48:	4607      	mov	r7, r0
 8004a4a:	d102      	bne.n	8004a52 <__cvt+0x66>
 8004a4c:	f019 0f01 	tst.w	r9, #1
 8004a50:	d022      	beq.n	8004a98 <__cvt+0xac>
 8004a52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a56:	eb07 0906 	add.w	r9, r7, r6
 8004a5a:	d110      	bne.n	8004a7e <__cvt+0x92>
 8004a5c:	783b      	ldrb	r3, [r7, #0]
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d10a      	bne.n	8004a78 <__cvt+0x8c>
 8004a62:	2200      	movs	r2, #0
 8004a64:	2300      	movs	r3, #0
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fc f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a6e:	b918      	cbnz	r0, 8004a78 <__cvt+0x8c>
 8004a70:	f1c6 0601 	rsb	r6, r6, #1
 8004a74:	f8ca 6000 	str.w	r6, [sl]
 8004a78:	f8da 3000 	ldr.w	r3, [sl]
 8004a7c:	4499      	add	r9, r3
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4620      	mov	r0, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	f7fc f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a8a:	b108      	cbz	r0, 8004a90 <__cvt+0xa4>
 8004a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a90:	2230      	movs	r2, #48	; 0x30
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	454b      	cmp	r3, r9
 8004a96:	d307      	bcc.n	8004aa8 <__cvt+0xbc>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a9c:	1bdb      	subs	r3, r3, r7
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	b004      	add	sp, #16
 8004aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	9103      	str	r1, [sp, #12]
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e7f0      	b.n	8004a92 <__cvt+0xa6>

08004ab0 <__exponent>:
 8004ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	4249      	neglt	r1, r1
 8004aba:	f803 2b02 	strb.w	r2, [r3], #2
 8004abe:	bfb4      	ite	lt
 8004ac0:	222d      	movlt	r2, #45	; 0x2d
 8004ac2:	222b      	movge	r2, #43	; 0x2b
 8004ac4:	2909      	cmp	r1, #9
 8004ac6:	7042      	strb	r2, [r0, #1]
 8004ac8:	dd2a      	ble.n	8004b20 <__exponent+0x70>
 8004aca:	f10d 0407 	add.w	r4, sp, #7
 8004ace:	46a4      	mov	ip, r4
 8004ad0:	270a      	movs	r7, #10
 8004ad2:	46a6      	mov	lr, r4
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ada:	fb07 1516 	mls	r5, r7, r6, r1
 8004ade:	3530      	adds	r5, #48	; 0x30
 8004ae0:	2a63      	cmp	r2, #99	; 0x63
 8004ae2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ae6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004aea:	4631      	mov	r1, r6
 8004aec:	dcf1      	bgt.n	8004ad2 <__exponent+0x22>
 8004aee:	3130      	adds	r1, #48	; 0x30
 8004af0:	f1ae 0502 	sub.w	r5, lr, #2
 8004af4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004af8:	1c44      	adds	r4, r0, #1
 8004afa:	4629      	mov	r1, r5
 8004afc:	4561      	cmp	r1, ip
 8004afe:	d30a      	bcc.n	8004b16 <__exponent+0x66>
 8004b00:	f10d 0209 	add.w	r2, sp, #9
 8004b04:	eba2 020e 	sub.w	r2, r2, lr
 8004b08:	4565      	cmp	r5, ip
 8004b0a:	bf88      	it	hi
 8004b0c:	2200      	movhi	r2, #0
 8004b0e:	4413      	add	r3, r2
 8004b10:	1a18      	subs	r0, r3, r0
 8004b12:	b003      	add	sp, #12
 8004b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b1e:	e7ed      	b.n	8004afc <__exponent+0x4c>
 8004b20:	2330      	movs	r3, #48	; 0x30
 8004b22:	3130      	adds	r1, #48	; 0x30
 8004b24:	7083      	strb	r3, [r0, #2]
 8004b26:	70c1      	strb	r1, [r0, #3]
 8004b28:	1d03      	adds	r3, r0, #4
 8004b2a:	e7f1      	b.n	8004b10 <__exponent+0x60>

08004b2c <_printf_float>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	ed2d 8b02 	vpush	{d8}
 8004b34:	b08d      	sub	sp, #52	; 0x34
 8004b36:	460c      	mov	r4, r1
 8004b38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	461f      	mov	r7, r3
 8004b40:	4605      	mov	r5, r0
 8004b42:	f001 fa37 	bl	8005fb4 <_localeconv_r>
 8004b46:	f8d0 a000 	ldr.w	sl, [r0]
 8004b4a:	4650      	mov	r0, sl
 8004b4c:	f7fb fb40 	bl	80001d0 <strlen>
 8004b50:	2300      	movs	r3, #0
 8004b52:	930a      	str	r3, [sp, #40]	; 0x28
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b60:	3307      	adds	r3, #7
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	f8c8 2000 	str.w	r2, [r8]
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b7e:	9307      	str	r3, [sp, #28]
 8004b80:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b84:	ee08 0a10 	vmov	s16, r0
 8004b88:	4b9f      	ldr	r3, [pc, #636]	; (8004e08 <_printf_float+0x2dc>)
 8004b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	f7fb ffcb 	bl	8000b2c <__aeabi_dcmpun>
 8004b96:	bb88      	cbnz	r0, 8004bfc <_printf_float+0xd0>
 8004b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b9c:	4b9a      	ldr	r3, [pc, #616]	; (8004e08 <_printf_float+0x2dc>)
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	f7fb ffa5 	bl	8000af0 <__aeabi_dcmple>
 8004ba6:	bb48      	cbnz	r0, 8004bfc <_printf_float+0xd0>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2300      	movs	r3, #0
 8004bac:	4640      	mov	r0, r8
 8004bae:	4649      	mov	r1, r9
 8004bb0:	f7fb ff94 	bl	8000adc <__aeabi_dcmplt>
 8004bb4:	b110      	cbz	r0, 8004bbc <_printf_float+0x90>
 8004bb6:	232d      	movs	r3, #45	; 0x2d
 8004bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbc:	4b93      	ldr	r3, [pc, #588]	; (8004e0c <_printf_float+0x2e0>)
 8004bbe:	4894      	ldr	r0, [pc, #592]	; (8004e10 <_printf_float+0x2e4>)
 8004bc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004bc4:	bf94      	ite	ls
 8004bc6:	4698      	movls	r8, r3
 8004bc8:	4680      	movhi	r8, r0
 8004bca:	2303      	movs	r3, #3
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	9b05      	ldr	r3, [sp, #20]
 8004bd0:	f023 0204 	bic.w	r2, r3, #4
 8004bd4:	6022      	str	r2, [r4, #0]
 8004bd6:	f04f 0900 	mov.w	r9, #0
 8004bda:	9700      	str	r7, [sp, #0]
 8004bdc:	4633      	mov	r3, r6
 8004bde:	aa0b      	add	r2, sp, #44	; 0x2c
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 f9d8 	bl	8004f98 <_printf_common>
 8004be8:	3001      	adds	r0, #1
 8004bea:	f040 8090 	bne.w	8004d0e <_printf_float+0x1e2>
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf2:	b00d      	add	sp, #52	; 0x34
 8004bf4:	ecbd 8b02 	vpop	{d8}
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	4640      	mov	r0, r8
 8004c02:	4649      	mov	r1, r9
 8004c04:	f7fb ff92 	bl	8000b2c <__aeabi_dcmpun>
 8004c08:	b140      	cbz	r0, 8004c1c <_printf_float+0xf0>
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bfbc      	itt	lt
 8004c10:	232d      	movlt	r3, #45	; 0x2d
 8004c12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c16:	487f      	ldr	r0, [pc, #508]	; (8004e14 <_printf_float+0x2e8>)
 8004c18:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <_printf_float+0x2ec>)
 8004c1a:	e7d1      	b.n	8004bc0 <_printf_float+0x94>
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c22:	9206      	str	r2, [sp, #24]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	d13f      	bne.n	8004ca8 <_printf_float+0x17c>
 8004c28:	2306      	movs	r3, #6
 8004c2a:	6063      	str	r3, [r4, #4]
 8004c2c:	9b05      	ldr	r3, [sp, #20]
 8004c2e:	6861      	ldr	r1, [r4, #4]
 8004c30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c34:	2300      	movs	r3, #0
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	ab0a      	add	r3, sp, #40	; 0x28
 8004c3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c3e:	ab09      	add	r3, sp, #36	; 0x24
 8004c40:	ec49 8b10 	vmov	d0, r8, r9
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6022      	str	r2, [r4, #0]
 8004c48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f7ff fecd 	bl	80049ec <__cvt>
 8004c52:	9b06      	ldr	r3, [sp, #24]
 8004c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c56:	2b47      	cmp	r3, #71	; 0x47
 8004c58:	4680      	mov	r8, r0
 8004c5a:	d108      	bne.n	8004c6e <_printf_float+0x142>
 8004c5c:	1cc8      	adds	r0, r1, #3
 8004c5e:	db02      	blt.n	8004c66 <_printf_float+0x13a>
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	4299      	cmp	r1, r3
 8004c64:	dd41      	ble.n	8004cea <_printf_float+0x1be>
 8004c66:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c6a:	fa5f fb8b 	uxtb.w	fp, fp
 8004c6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c72:	d820      	bhi.n	8004cb6 <_printf_float+0x18a>
 8004c74:	3901      	subs	r1, #1
 8004c76:	465a      	mov	r2, fp
 8004c78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c7c:	9109      	str	r1, [sp, #36]	; 0x24
 8004c7e:	f7ff ff17 	bl	8004ab0 <__exponent>
 8004c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c84:	1813      	adds	r3, r2, r0
 8004c86:	2a01      	cmp	r2, #1
 8004c88:	4681      	mov	r9, r0
 8004c8a:	6123      	str	r3, [r4, #16]
 8004c8c:	dc02      	bgt.n	8004c94 <_printf_float+0x168>
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	07d2      	lsls	r2, r2, #31
 8004c92:	d501      	bpl.n	8004c98 <_printf_float+0x16c>
 8004c94:	3301      	adds	r3, #1
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d09c      	beq.n	8004bda <_printf_float+0xae>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca6:	e798      	b.n	8004bda <_printf_float+0xae>
 8004ca8:	9a06      	ldr	r2, [sp, #24]
 8004caa:	2a47      	cmp	r2, #71	; 0x47
 8004cac:	d1be      	bne.n	8004c2c <_printf_float+0x100>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1bc      	bne.n	8004c2c <_printf_float+0x100>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7b9      	b.n	8004c2a <_printf_float+0xfe>
 8004cb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004cba:	d118      	bne.n	8004cee <_printf_float+0x1c2>
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	dd0b      	ble.n	8004cda <_printf_float+0x1ae>
 8004cc2:	6121      	str	r1, [r4, #16]
 8004cc4:	b913      	cbnz	r3, 8004ccc <_printf_float+0x1a0>
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	07d0      	lsls	r0, r2, #31
 8004cca:	d502      	bpl.n	8004cd2 <_printf_float+0x1a6>
 8004ccc:	3301      	adds	r3, #1
 8004cce:	440b      	add	r3, r1
 8004cd0:	6123      	str	r3, [r4, #16]
 8004cd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cd4:	f04f 0900 	mov.w	r9, #0
 8004cd8:	e7de      	b.n	8004c98 <_printf_float+0x16c>
 8004cda:	b913      	cbnz	r3, 8004ce2 <_printf_float+0x1b6>
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	07d2      	lsls	r2, r2, #31
 8004ce0:	d501      	bpl.n	8004ce6 <_printf_float+0x1ba>
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	e7f4      	b.n	8004cd0 <_printf_float+0x1a4>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e7f2      	b.n	8004cd0 <_printf_float+0x1a4>
 8004cea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	db05      	blt.n	8004d00 <_printf_float+0x1d4>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	6121      	str	r1, [r4, #16]
 8004cf8:	07d8      	lsls	r0, r3, #31
 8004cfa:	d5ea      	bpl.n	8004cd2 <_printf_float+0x1a6>
 8004cfc:	1c4b      	adds	r3, r1, #1
 8004cfe:	e7e7      	b.n	8004cd0 <_printf_float+0x1a4>
 8004d00:	2900      	cmp	r1, #0
 8004d02:	bfd4      	ite	le
 8004d04:	f1c1 0202 	rsble	r2, r1, #2
 8004d08:	2201      	movgt	r2, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	e7e0      	b.n	8004cd0 <_printf_float+0x1a4>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	055a      	lsls	r2, r3, #21
 8004d12:	d407      	bmi.n	8004d24 <_printf_float+0x1f8>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	4642      	mov	r2, r8
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d12c      	bne.n	8004d7c <_printf_float+0x250>
 8004d22:	e764      	b.n	8004bee <_printf_float+0xc2>
 8004d24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d28:	f240 80e0 	bls.w	8004eec <_printf_float+0x3c0>
 8004d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	f7fb fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d034      	beq.n	8004da6 <_printf_float+0x27a>
 8004d3c:	4a37      	ldr	r2, [pc, #220]	; (8004e1c <_printf_float+0x2f0>)
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af51 	beq.w	8004bee <_printf_float+0xc2>
 8004d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d50:	429a      	cmp	r2, r3
 8004d52:	db02      	blt.n	8004d5a <_printf_float+0x22e>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07d8      	lsls	r0, r3, #31
 8004d58:	d510      	bpl.n	8004d7c <_printf_float+0x250>
 8004d5a:	ee18 3a10 	vmov	r3, s16
 8004d5e:	4652      	mov	r2, sl
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af41 	beq.w	8004bee <_printf_float+0xc2>
 8004d6c:	f04f 0800 	mov.w	r8, #0
 8004d70:	f104 091a 	add.w	r9, r4, #26
 8004d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	4543      	cmp	r3, r8
 8004d7a:	dc09      	bgt.n	8004d90 <_printf_float+0x264>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	079b      	lsls	r3, r3, #30
 8004d80:	f100 8105 	bmi.w	8004f8e <_printf_float+0x462>
 8004d84:	68e0      	ldr	r0, [r4, #12]
 8004d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d88:	4298      	cmp	r0, r3
 8004d8a:	bfb8      	it	lt
 8004d8c:	4618      	movlt	r0, r3
 8004d8e:	e730      	b.n	8004bf2 <_printf_float+0xc6>
 8004d90:	2301      	movs	r3, #1
 8004d92:	464a      	mov	r2, r9
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f af27 	beq.w	8004bee <_printf_float+0xc2>
 8004da0:	f108 0801 	add.w	r8, r8, #1
 8004da4:	e7e6      	b.n	8004d74 <_printf_float+0x248>
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	dc39      	bgt.n	8004e20 <_printf_float+0x2f4>
 8004dac:	4a1b      	ldr	r2, [pc, #108]	; (8004e1c <_printf_float+0x2f0>)
 8004dae:	2301      	movs	r3, #1
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f af19 	beq.w	8004bee <_printf_float+0xc2>
 8004dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d102      	bne.n	8004dca <_printf_float+0x29e>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07d9      	lsls	r1, r3, #31
 8004dc8:	d5d8      	bpl.n	8004d7c <_printf_float+0x250>
 8004dca:	ee18 3a10 	vmov	r3, s16
 8004dce:	4652      	mov	r2, sl
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f af09 	beq.w	8004bee <_printf_float+0xc2>
 8004ddc:	f04f 0900 	mov.w	r9, #0
 8004de0:	f104 0a1a 	add.w	sl, r4, #26
 8004de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de6:	425b      	negs	r3, r3
 8004de8:	454b      	cmp	r3, r9
 8004dea:	dc01      	bgt.n	8004df0 <_printf_float+0x2c4>
 8004dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dee:	e792      	b.n	8004d16 <_printf_float+0x1ea>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4652      	mov	r2, sl
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f aef7 	beq.w	8004bee <_printf_float+0xc2>
 8004e00:	f109 0901 	add.w	r9, r9, #1
 8004e04:	e7ee      	b.n	8004de4 <_printf_float+0x2b8>
 8004e06:	bf00      	nop
 8004e08:	7fefffff 	.word	0x7fefffff
 8004e0c:	08008b44 	.word	0x08008b44
 8004e10:	08008b48 	.word	0x08008b48
 8004e14:	08008b50 	.word	0x08008b50
 8004e18:	08008b4c 	.word	0x08008b4c
 8004e1c:	08008b54 	.word	0x08008b54
 8004e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e24:	429a      	cmp	r2, r3
 8004e26:	bfa8      	it	ge
 8004e28:	461a      	movge	r2, r3
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	4691      	mov	r9, r2
 8004e2e:	dc37      	bgt.n	8004ea0 <_printf_float+0x374>
 8004e30:	f04f 0b00 	mov.w	fp, #0
 8004e34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e38:	f104 021a 	add.w	r2, r4, #26
 8004e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e3e:	9305      	str	r3, [sp, #20]
 8004e40:	eba3 0309 	sub.w	r3, r3, r9
 8004e44:	455b      	cmp	r3, fp
 8004e46:	dc33      	bgt.n	8004eb0 <_printf_float+0x384>
 8004e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	db3b      	blt.n	8004ec8 <_printf_float+0x39c>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	d438      	bmi.n	8004ec8 <_printf_float+0x39c>
 8004e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e58:	9a05      	ldr	r2, [sp, #20]
 8004e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e5c:	1a9a      	subs	r2, r3, r2
 8004e5e:	eba3 0901 	sub.w	r9, r3, r1
 8004e62:	4591      	cmp	r9, r2
 8004e64:	bfa8      	it	ge
 8004e66:	4691      	movge	r9, r2
 8004e68:	f1b9 0f00 	cmp.w	r9, #0
 8004e6c:	dc35      	bgt.n	8004eda <_printf_float+0x3ae>
 8004e6e:	f04f 0800 	mov.w	r8, #0
 8004e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e76:	f104 0a1a 	add.w	sl, r4, #26
 8004e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	eba3 0309 	sub.w	r3, r3, r9
 8004e84:	4543      	cmp	r3, r8
 8004e86:	f77f af79 	ble.w	8004d7c <_printf_float+0x250>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f aeaa 	beq.w	8004bee <_printf_float+0xc2>
 8004e9a:	f108 0801 	add.w	r8, r8, #1
 8004e9e:	e7ec      	b.n	8004e7a <_printf_float+0x34e>
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d1c0      	bne.n	8004e30 <_printf_float+0x304>
 8004eae:	e69e      	b.n	8004bee <_printf_float+0xc2>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	9205      	str	r2, [sp, #20]
 8004eb8:	47b8      	blx	r7
 8004eba:	3001      	adds	r0, #1
 8004ebc:	f43f ae97 	beq.w	8004bee <_printf_float+0xc2>
 8004ec0:	9a05      	ldr	r2, [sp, #20]
 8004ec2:	f10b 0b01 	add.w	fp, fp, #1
 8004ec6:	e7b9      	b.n	8004e3c <_printf_float+0x310>
 8004ec8:	ee18 3a10 	vmov	r3, s16
 8004ecc:	4652      	mov	r2, sl
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1be      	bne.n	8004e56 <_printf_float+0x32a>
 8004ed8:	e689      	b.n	8004bee <_printf_float+0xc2>
 8004eda:	9a05      	ldr	r2, [sp, #20]
 8004edc:	464b      	mov	r3, r9
 8004ede:	4442      	add	r2, r8
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d1c1      	bne.n	8004e6e <_printf_float+0x342>
 8004eea:	e680      	b.n	8004bee <_printf_float+0xc2>
 8004eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eee:	2a01      	cmp	r2, #1
 8004ef0:	dc01      	bgt.n	8004ef6 <_printf_float+0x3ca>
 8004ef2:	07db      	lsls	r3, r3, #31
 8004ef4:	d538      	bpl.n	8004f68 <_printf_float+0x43c>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4642      	mov	r2, r8
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	f43f ae74 	beq.w	8004bee <_printf_float+0xc2>
 8004f06:	ee18 3a10 	vmov	r3, s16
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f ae6b 	beq.w	8004bee <_printf_float+0xc2>
 8004f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f7fb fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f24:	b9d8      	cbnz	r0, 8004f5e <_printf_float+0x432>
 8004f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f28:	f108 0201 	add.w	r2, r8, #1
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	d10e      	bne.n	8004f56 <_printf_float+0x42a>
 8004f38:	e659      	b.n	8004bee <_printf_float+0xc2>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae52 	beq.w	8004bee <_printf_float+0xc2>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4543      	cmp	r3, r8
 8004f54:	dcf1      	bgt.n	8004f3a <_printf_float+0x40e>
 8004f56:	464b      	mov	r3, r9
 8004f58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f5c:	e6dc      	b.n	8004d18 <_printf_float+0x1ec>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	f104 0a1a 	add.w	sl, r4, #26
 8004f66:	e7f2      	b.n	8004f4e <_printf_float+0x422>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	e7df      	b.n	8004f2e <_printf_float+0x402>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	464a      	mov	r2, r9
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae38 	beq.w	8004bee <_printf_float+0xc2>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	4543      	cmp	r3, r8
 8004f8a:	dcf0      	bgt.n	8004f6e <_printf_float+0x442>
 8004f8c:	e6fa      	b.n	8004d84 <_printf_float+0x258>
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	f104 0919 	add.w	r9, r4, #25
 8004f96:	e7f4      	b.n	8004f82 <_printf_float+0x456>

08004f98 <_printf_common>:
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	4699      	mov	r9, r3
 8004fa0:	688a      	ldr	r2, [r1, #8]
 8004fa2:	690b      	ldr	r3, [r1, #16]
 8004fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bfb8      	it	lt
 8004fac:	4613      	movlt	r3, r2
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	b10a      	cbz	r2, 8004fbe <_printf_common+0x26>
 8004fba:	3301      	adds	r3, #1
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	0699      	lsls	r1, r3, #26
 8004fc2:	bf42      	ittt	mi
 8004fc4:	6833      	ldrmi	r3, [r6, #0]
 8004fc6:	3302      	addmi	r3, #2
 8004fc8:	6033      	strmi	r3, [r6, #0]
 8004fca:	6825      	ldr	r5, [r4, #0]
 8004fcc:	f015 0506 	ands.w	r5, r5, #6
 8004fd0:	d106      	bne.n	8004fe0 <_printf_common+0x48>
 8004fd2:	f104 0a19 	add.w	sl, r4, #25
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	6832      	ldr	r2, [r6, #0]
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dc26      	bgt.n	800502e <_printf_common+0x96>
 8004fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fe4:	1e13      	subs	r3, r2, #0
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	0692      	lsls	r2, r2, #26
 8004fee:	d42b      	bmi.n	8005048 <_printf_common+0xb0>
 8004ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c0      	blx	r8
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d01e      	beq.n	800503c <_printf_common+0xa4>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	68e5      	ldr	r5, [r4, #12]
 8005002:	6832      	ldr	r2, [r6, #0]
 8005004:	f003 0306 	and.w	r3, r3, #6
 8005008:	2b04      	cmp	r3, #4
 800500a:	bf08      	it	eq
 800500c:	1aad      	subeq	r5, r5, r2
 800500e:	68a3      	ldr	r3, [r4, #8]
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	bf0c      	ite	eq
 8005014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005018:	2500      	movne	r5, #0
 800501a:	4293      	cmp	r3, r2
 800501c:	bfc4      	itt	gt
 800501e:	1a9b      	subgt	r3, r3, r2
 8005020:	18ed      	addgt	r5, r5, r3
 8005022:	2600      	movs	r6, #0
 8005024:	341a      	adds	r4, #26
 8005026:	42b5      	cmp	r5, r6
 8005028:	d11a      	bne.n	8005060 <_printf_common+0xc8>
 800502a:	2000      	movs	r0, #0
 800502c:	e008      	b.n	8005040 <_printf_common+0xa8>
 800502e:	2301      	movs	r3, #1
 8005030:	4652      	mov	r2, sl
 8005032:	4649      	mov	r1, r9
 8005034:	4638      	mov	r0, r7
 8005036:	47c0      	blx	r8
 8005038:	3001      	adds	r0, #1
 800503a:	d103      	bne.n	8005044 <_printf_common+0xac>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	3501      	adds	r5, #1
 8005046:	e7c6      	b.n	8004fd6 <_printf_common+0x3e>
 8005048:	18e1      	adds	r1, r4, r3
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	2030      	movs	r0, #48	; 0x30
 800504e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005052:	4422      	add	r2, r4
 8005054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800505c:	3302      	adds	r3, #2
 800505e:	e7c7      	b.n	8004ff0 <_printf_common+0x58>
 8005060:	2301      	movs	r3, #1
 8005062:	4622      	mov	r2, r4
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d0e6      	beq.n	800503c <_printf_common+0xa4>
 800506e:	3601      	adds	r6, #1
 8005070:	e7d9      	b.n	8005026 <_printf_common+0x8e>
	...

08005074 <_printf_i>:
 8005074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	7e0f      	ldrb	r7, [r1, #24]
 800507a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800507c:	2f78      	cmp	r7, #120	; 0x78
 800507e:	4691      	mov	r9, r2
 8005080:	4680      	mov	r8, r0
 8005082:	460c      	mov	r4, r1
 8005084:	469a      	mov	sl, r3
 8005086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800508a:	d807      	bhi.n	800509c <_printf_i+0x28>
 800508c:	2f62      	cmp	r7, #98	; 0x62
 800508e:	d80a      	bhi.n	80050a6 <_printf_i+0x32>
 8005090:	2f00      	cmp	r7, #0
 8005092:	f000 80d8 	beq.w	8005246 <_printf_i+0x1d2>
 8005096:	2f58      	cmp	r7, #88	; 0x58
 8005098:	f000 80a3 	beq.w	80051e2 <_printf_i+0x16e>
 800509c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050a4:	e03a      	b.n	800511c <_printf_i+0xa8>
 80050a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050aa:	2b15      	cmp	r3, #21
 80050ac:	d8f6      	bhi.n	800509c <_printf_i+0x28>
 80050ae:	a101      	add	r1, pc, #4	; (adr r1, 80050b4 <_printf_i+0x40>)
 80050b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b4:	0800510d 	.word	0x0800510d
 80050b8:	08005121 	.word	0x08005121
 80050bc:	0800509d 	.word	0x0800509d
 80050c0:	0800509d 	.word	0x0800509d
 80050c4:	0800509d 	.word	0x0800509d
 80050c8:	0800509d 	.word	0x0800509d
 80050cc:	08005121 	.word	0x08005121
 80050d0:	0800509d 	.word	0x0800509d
 80050d4:	0800509d 	.word	0x0800509d
 80050d8:	0800509d 	.word	0x0800509d
 80050dc:	0800509d 	.word	0x0800509d
 80050e0:	0800522d 	.word	0x0800522d
 80050e4:	08005151 	.word	0x08005151
 80050e8:	0800520f 	.word	0x0800520f
 80050ec:	0800509d 	.word	0x0800509d
 80050f0:	0800509d 	.word	0x0800509d
 80050f4:	0800524f 	.word	0x0800524f
 80050f8:	0800509d 	.word	0x0800509d
 80050fc:	08005151 	.word	0x08005151
 8005100:	0800509d 	.word	0x0800509d
 8005104:	0800509d 	.word	0x0800509d
 8005108:	08005217 	.word	0x08005217
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	602a      	str	r2, [r5, #0]
 8005114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800511c:	2301      	movs	r3, #1
 800511e:	e0a3      	b.n	8005268 <_printf_i+0x1f4>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	6829      	ldr	r1, [r5, #0]
 8005124:	0606      	lsls	r6, r0, #24
 8005126:	f101 0304 	add.w	r3, r1, #4
 800512a:	d50a      	bpl.n	8005142 <_printf_i+0xce>
 800512c:	680e      	ldr	r6, [r1, #0]
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	2e00      	cmp	r6, #0
 8005132:	da03      	bge.n	800513c <_printf_i+0xc8>
 8005134:	232d      	movs	r3, #45	; 0x2d
 8005136:	4276      	negs	r6, r6
 8005138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513c:	485e      	ldr	r0, [pc, #376]	; (80052b8 <_printf_i+0x244>)
 800513e:	230a      	movs	r3, #10
 8005140:	e019      	b.n	8005176 <_printf_i+0x102>
 8005142:	680e      	ldr	r6, [r1, #0]
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800514a:	bf18      	it	ne
 800514c:	b236      	sxthne	r6, r6
 800514e:	e7ef      	b.n	8005130 <_printf_i+0xbc>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	6029      	str	r1, [r5, #0]
 8005158:	0601      	lsls	r1, r0, #24
 800515a:	d501      	bpl.n	8005160 <_printf_i+0xec>
 800515c:	681e      	ldr	r6, [r3, #0]
 800515e:	e002      	b.n	8005166 <_printf_i+0xf2>
 8005160:	0646      	lsls	r6, r0, #25
 8005162:	d5fb      	bpl.n	800515c <_printf_i+0xe8>
 8005164:	881e      	ldrh	r6, [r3, #0]
 8005166:	4854      	ldr	r0, [pc, #336]	; (80052b8 <_printf_i+0x244>)
 8005168:	2f6f      	cmp	r7, #111	; 0x6f
 800516a:	bf0c      	ite	eq
 800516c:	2308      	moveq	r3, #8
 800516e:	230a      	movne	r3, #10
 8005170:	2100      	movs	r1, #0
 8005172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005176:	6865      	ldr	r5, [r4, #4]
 8005178:	60a5      	str	r5, [r4, #8]
 800517a:	2d00      	cmp	r5, #0
 800517c:	bfa2      	ittt	ge
 800517e:	6821      	ldrge	r1, [r4, #0]
 8005180:	f021 0104 	bicge.w	r1, r1, #4
 8005184:	6021      	strge	r1, [r4, #0]
 8005186:	b90e      	cbnz	r6, 800518c <_printf_i+0x118>
 8005188:	2d00      	cmp	r5, #0
 800518a:	d04d      	beq.n	8005228 <_printf_i+0x1b4>
 800518c:	4615      	mov	r5, r2
 800518e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005192:	fb03 6711 	mls	r7, r3, r1, r6
 8005196:	5dc7      	ldrb	r7, [r0, r7]
 8005198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800519c:	4637      	mov	r7, r6
 800519e:	42bb      	cmp	r3, r7
 80051a0:	460e      	mov	r6, r1
 80051a2:	d9f4      	bls.n	800518e <_printf_i+0x11a>
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d10b      	bne.n	80051c0 <_printf_i+0x14c>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	07de      	lsls	r6, r3, #31
 80051ac:	d508      	bpl.n	80051c0 <_printf_i+0x14c>
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	6861      	ldr	r1, [r4, #4]
 80051b2:	4299      	cmp	r1, r3
 80051b4:	bfde      	ittt	le
 80051b6:	2330      	movle	r3, #48	; 0x30
 80051b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051c0:	1b52      	subs	r2, r2, r5
 80051c2:	6122      	str	r2, [r4, #16]
 80051c4:	f8cd a000 	str.w	sl, [sp]
 80051c8:	464b      	mov	r3, r9
 80051ca:	aa03      	add	r2, sp, #12
 80051cc:	4621      	mov	r1, r4
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff fee2 	bl	8004f98 <_printf_common>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d14c      	bne.n	8005272 <_printf_i+0x1fe>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	b004      	add	sp, #16
 80051de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e2:	4835      	ldr	r0, [pc, #212]	; (80052b8 <_printf_i+0x244>)
 80051e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051e8:	6829      	ldr	r1, [r5, #0]
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80051f0:	6029      	str	r1, [r5, #0]
 80051f2:	061d      	lsls	r5, r3, #24
 80051f4:	d514      	bpl.n	8005220 <_printf_i+0x1ac>
 80051f6:	07df      	lsls	r7, r3, #31
 80051f8:	bf44      	itt	mi
 80051fa:	f043 0320 	orrmi.w	r3, r3, #32
 80051fe:	6023      	strmi	r3, [r4, #0]
 8005200:	b91e      	cbnz	r6, 800520a <_printf_i+0x196>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f023 0320 	bic.w	r3, r3, #32
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	2310      	movs	r3, #16
 800520c:	e7b0      	b.n	8005170 <_printf_i+0xfc>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f043 0320 	orr.w	r3, r3, #32
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	2378      	movs	r3, #120	; 0x78
 8005218:	4828      	ldr	r0, [pc, #160]	; (80052bc <_printf_i+0x248>)
 800521a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800521e:	e7e3      	b.n	80051e8 <_printf_i+0x174>
 8005220:	0659      	lsls	r1, r3, #25
 8005222:	bf48      	it	mi
 8005224:	b2b6      	uxthmi	r6, r6
 8005226:	e7e6      	b.n	80051f6 <_printf_i+0x182>
 8005228:	4615      	mov	r5, r2
 800522a:	e7bb      	b.n	80051a4 <_printf_i+0x130>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	6826      	ldr	r6, [r4, #0]
 8005230:	6961      	ldr	r1, [r4, #20]
 8005232:	1d18      	adds	r0, r3, #4
 8005234:	6028      	str	r0, [r5, #0]
 8005236:	0635      	lsls	r5, r6, #24
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	d501      	bpl.n	8005240 <_printf_i+0x1cc>
 800523c:	6019      	str	r1, [r3, #0]
 800523e:	e002      	b.n	8005246 <_printf_i+0x1d2>
 8005240:	0670      	lsls	r0, r6, #25
 8005242:	d5fb      	bpl.n	800523c <_printf_i+0x1c8>
 8005244:	8019      	strh	r1, [r3, #0]
 8005246:	2300      	movs	r3, #0
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	4615      	mov	r5, r2
 800524c:	e7ba      	b.n	80051c4 <_printf_i+0x150>
 800524e:	682b      	ldr	r3, [r5, #0]
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	602a      	str	r2, [r5, #0]
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	2100      	movs	r1, #0
 800525a:	4628      	mov	r0, r5
 800525c:	f7fa ffc0 	bl	80001e0 <memchr>
 8005260:	b108      	cbz	r0, 8005266 <_printf_i+0x1f2>
 8005262:	1b40      	subs	r0, r0, r5
 8005264:	6060      	str	r0, [r4, #4]
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	6123      	str	r3, [r4, #16]
 800526a:	2300      	movs	r3, #0
 800526c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005270:	e7a8      	b.n	80051c4 <_printf_i+0x150>
 8005272:	6923      	ldr	r3, [r4, #16]
 8005274:	462a      	mov	r2, r5
 8005276:	4649      	mov	r1, r9
 8005278:	4640      	mov	r0, r8
 800527a:	47d0      	blx	sl
 800527c:	3001      	adds	r0, #1
 800527e:	d0ab      	beq.n	80051d8 <_printf_i+0x164>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	079b      	lsls	r3, r3, #30
 8005284:	d413      	bmi.n	80052ae <_printf_i+0x23a>
 8005286:	68e0      	ldr	r0, [r4, #12]
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	4298      	cmp	r0, r3
 800528c:	bfb8      	it	lt
 800528e:	4618      	movlt	r0, r3
 8005290:	e7a4      	b.n	80051dc <_printf_i+0x168>
 8005292:	2301      	movs	r3, #1
 8005294:	4632      	mov	r2, r6
 8005296:	4649      	mov	r1, r9
 8005298:	4640      	mov	r0, r8
 800529a:	47d0      	blx	sl
 800529c:	3001      	adds	r0, #1
 800529e:	d09b      	beq.n	80051d8 <_printf_i+0x164>
 80052a0:	3501      	adds	r5, #1
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	9903      	ldr	r1, [sp, #12]
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	dcf2      	bgt.n	8005292 <_printf_i+0x21e>
 80052ac:	e7eb      	b.n	8005286 <_printf_i+0x212>
 80052ae:	2500      	movs	r5, #0
 80052b0:	f104 0619 	add.w	r6, r4, #25
 80052b4:	e7f5      	b.n	80052a2 <_printf_i+0x22e>
 80052b6:	bf00      	nop
 80052b8:	08008b56 	.word	0x08008b56
 80052bc:	08008b67 	.word	0x08008b67

080052c0 <quorem>:
 80052c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	6903      	ldr	r3, [r0, #16]
 80052c6:	690c      	ldr	r4, [r1, #16]
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	4607      	mov	r7, r0
 80052cc:	f2c0 8081 	blt.w	80053d2 <quorem+0x112>
 80052d0:	3c01      	subs	r4, #1
 80052d2:	f101 0814 	add.w	r8, r1, #20
 80052d6:	f100 0514 	add.w	r5, r0, #20
 80052da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052e8:	3301      	adds	r3, #1
 80052ea:	429a      	cmp	r2, r3
 80052ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052f8:	d331      	bcc.n	800535e <quorem+0x9e>
 80052fa:	f04f 0e00 	mov.w	lr, #0
 80052fe:	4640      	mov	r0, r8
 8005300:	46ac      	mov	ip, r5
 8005302:	46f2      	mov	sl, lr
 8005304:	f850 2b04 	ldr.w	r2, [r0], #4
 8005308:	b293      	uxth	r3, r2
 800530a:	fb06 e303 	mla	r3, r6, r3, lr
 800530e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005312:	b29b      	uxth	r3, r3
 8005314:	ebaa 0303 	sub.w	r3, sl, r3
 8005318:	f8dc a000 	ldr.w	sl, [ip]
 800531c:	0c12      	lsrs	r2, r2, #16
 800531e:	fa13 f38a 	uxtah	r3, r3, sl
 8005322:	fb06 e202 	mla	r2, r6, r2, lr
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	9b00      	ldr	r3, [sp, #0]
 800532a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800532e:	b292      	uxth	r2, r2
 8005330:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005338:	f8bd 3000 	ldrh.w	r3, [sp]
 800533c:	4581      	cmp	r9, r0
 800533e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005342:	f84c 3b04 	str.w	r3, [ip], #4
 8005346:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800534a:	d2db      	bcs.n	8005304 <quorem+0x44>
 800534c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005350:	b92b      	cbnz	r3, 800535e <quorem+0x9e>
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	3b04      	subs	r3, #4
 8005356:	429d      	cmp	r5, r3
 8005358:	461a      	mov	r2, r3
 800535a:	d32e      	bcc.n	80053ba <quorem+0xfa>
 800535c:	613c      	str	r4, [r7, #16]
 800535e:	4638      	mov	r0, r7
 8005360:	f001 f8c4 	bl	80064ec <__mcmp>
 8005364:	2800      	cmp	r0, #0
 8005366:	db24      	blt.n	80053b2 <quorem+0xf2>
 8005368:	3601      	adds	r6, #1
 800536a:	4628      	mov	r0, r5
 800536c:	f04f 0c00 	mov.w	ip, #0
 8005370:	f858 2b04 	ldr.w	r2, [r8], #4
 8005374:	f8d0 e000 	ldr.w	lr, [r0]
 8005378:	b293      	uxth	r3, r2
 800537a:	ebac 0303 	sub.w	r3, ip, r3
 800537e:	0c12      	lsrs	r2, r2, #16
 8005380:	fa13 f38e 	uxtah	r3, r3, lr
 8005384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800538c:	b29b      	uxth	r3, r3
 800538e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005392:	45c1      	cmp	r9, r8
 8005394:	f840 3b04 	str.w	r3, [r0], #4
 8005398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800539c:	d2e8      	bcs.n	8005370 <quorem+0xb0>
 800539e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053a6:	b922      	cbnz	r2, 80053b2 <quorem+0xf2>
 80053a8:	3b04      	subs	r3, #4
 80053aa:	429d      	cmp	r5, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	d30a      	bcc.n	80053c6 <quorem+0x106>
 80053b0:	613c      	str	r4, [r7, #16]
 80053b2:	4630      	mov	r0, r6
 80053b4:	b003      	add	sp, #12
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	3b04      	subs	r3, #4
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d1cc      	bne.n	800535c <quorem+0x9c>
 80053c2:	3c01      	subs	r4, #1
 80053c4:	e7c7      	b.n	8005356 <quorem+0x96>
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	3b04      	subs	r3, #4
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d1f0      	bne.n	80053b0 <quorem+0xf0>
 80053ce:	3c01      	subs	r4, #1
 80053d0:	e7eb      	b.n	80053aa <quorem+0xea>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e7ee      	b.n	80053b4 <quorem+0xf4>
	...

080053d8 <_dtoa_r>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	ed2d 8b04 	vpush	{d8-d9}
 80053e0:	ec57 6b10 	vmov	r6, r7, d0
 80053e4:	b093      	sub	sp, #76	; 0x4c
 80053e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053ec:	9106      	str	r1, [sp, #24]
 80053ee:	ee10 aa10 	vmov	sl, s0
 80053f2:	4604      	mov	r4, r0
 80053f4:	9209      	str	r2, [sp, #36]	; 0x24
 80053f6:	930c      	str	r3, [sp, #48]	; 0x30
 80053f8:	46bb      	mov	fp, r7
 80053fa:	b975      	cbnz	r5, 800541a <_dtoa_r+0x42>
 80053fc:	2010      	movs	r0, #16
 80053fe:	f000 fddd 	bl	8005fbc <malloc>
 8005402:	4602      	mov	r2, r0
 8005404:	6260      	str	r0, [r4, #36]	; 0x24
 8005406:	b920      	cbnz	r0, 8005412 <_dtoa_r+0x3a>
 8005408:	4ba7      	ldr	r3, [pc, #668]	; (80056a8 <_dtoa_r+0x2d0>)
 800540a:	21ea      	movs	r1, #234	; 0xea
 800540c:	48a7      	ldr	r0, [pc, #668]	; (80056ac <_dtoa_r+0x2d4>)
 800540e:	f001 fa75 	bl	80068fc <__assert_func>
 8005412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005416:	6005      	str	r5, [r0, #0]
 8005418:	60c5      	str	r5, [r0, #12]
 800541a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	b151      	cbz	r1, 8005436 <_dtoa_r+0x5e>
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	604a      	str	r2, [r1, #4]
 8005424:	2301      	movs	r3, #1
 8005426:	4093      	lsls	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fe1c 	bl	8006068 <_Bfree>
 8005430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	1e3b      	subs	r3, r7, #0
 8005438:	bfaa      	itet	ge
 800543a:	2300      	movge	r3, #0
 800543c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005440:	f8c8 3000 	strge.w	r3, [r8]
 8005444:	4b9a      	ldr	r3, [pc, #616]	; (80056b0 <_dtoa_r+0x2d8>)
 8005446:	bfbc      	itt	lt
 8005448:	2201      	movlt	r2, #1
 800544a:	f8c8 2000 	strlt.w	r2, [r8]
 800544e:	ea33 030b 	bics.w	r3, r3, fp
 8005452:	d11b      	bne.n	800548c <_dtoa_r+0xb4>
 8005454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005456:	f242 730f 	movw	r3, #9999	; 0x270f
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005460:	4333      	orrs	r3, r6
 8005462:	f000 8592 	beq.w	8005f8a <_dtoa_r+0xbb2>
 8005466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005468:	b963      	cbnz	r3, 8005484 <_dtoa_r+0xac>
 800546a:	4b92      	ldr	r3, [pc, #584]	; (80056b4 <_dtoa_r+0x2dc>)
 800546c:	e022      	b.n	80054b4 <_dtoa_r+0xdc>
 800546e:	4b92      	ldr	r3, [pc, #584]	; (80056b8 <_dtoa_r+0x2e0>)
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	3308      	adds	r3, #8
 8005474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	9801      	ldr	r0, [sp, #4]
 800547a:	b013      	add	sp, #76	; 0x4c
 800547c:	ecbd 8b04 	vpop	{d8-d9}
 8005480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005484:	4b8b      	ldr	r3, [pc, #556]	; (80056b4 <_dtoa_r+0x2dc>)
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	3303      	adds	r3, #3
 800548a:	e7f3      	b.n	8005474 <_dtoa_r+0x9c>
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	4650      	mov	r0, sl
 8005492:	4659      	mov	r1, fp
 8005494:	f7fb fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005498:	ec4b ab19 	vmov	d9, sl, fp
 800549c:	4680      	mov	r8, r0
 800549e:	b158      	cbz	r0, 80054b8 <_dtoa_r+0xe0>
 80054a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054a2:	2301      	movs	r3, #1
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 856b 	beq.w	8005f84 <_dtoa_r+0xbac>
 80054ae:	4883      	ldr	r0, [pc, #524]	; (80056bc <_dtoa_r+0x2e4>)
 80054b0:	6018      	str	r0, [r3, #0]
 80054b2:	1e43      	subs	r3, r0, #1
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	e7df      	b.n	8005478 <_dtoa_r+0xa0>
 80054b8:	ec4b ab10 	vmov	d0, sl, fp
 80054bc:	aa10      	add	r2, sp, #64	; 0x40
 80054be:	a911      	add	r1, sp, #68	; 0x44
 80054c0:	4620      	mov	r0, r4
 80054c2:	f001 f8b9 	bl	8006638 <__d2b>
 80054c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80054ca:	ee08 0a10 	vmov	s16, r0
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	f000 8084 	beq.w	80055dc <_dtoa_r+0x204>
 80054d4:	ee19 3a90 	vmov	r3, s19
 80054d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054e0:	4656      	mov	r6, sl
 80054e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054ee:	4b74      	ldr	r3, [pc, #464]	; (80056c0 <_dtoa_r+0x2e8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	4630      	mov	r0, r6
 80054f4:	4639      	mov	r1, r7
 80054f6:	f7fa fec7 	bl	8000288 <__aeabi_dsub>
 80054fa:	a365      	add	r3, pc, #404	; (adr r3, 8005690 <_dtoa_r+0x2b8>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fb f87a 	bl	80005f8 <__aeabi_dmul>
 8005504:	a364      	add	r3, pc, #400	; (adr r3, 8005698 <_dtoa_r+0x2c0>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fa febf 	bl	800028c <__adddf3>
 800550e:	4606      	mov	r6, r0
 8005510:	4628      	mov	r0, r5
 8005512:	460f      	mov	r7, r1
 8005514:	f7fb f806 	bl	8000524 <__aeabi_i2d>
 8005518:	a361      	add	r3, pc, #388	; (adr r3, 80056a0 <_dtoa_r+0x2c8>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fa feaf 	bl	800028c <__adddf3>
 800552e:	4606      	mov	r6, r0
 8005530:	460f      	mov	r7, r1
 8005532:	f7fb fb11 	bl	8000b58 <__aeabi_d2iz>
 8005536:	2200      	movs	r2, #0
 8005538:	9000      	str	r0, [sp, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fb facc 	bl	8000adc <__aeabi_dcmplt>
 8005544:	b150      	cbz	r0, 800555c <_dtoa_r+0x184>
 8005546:	9800      	ldr	r0, [sp, #0]
 8005548:	f7fa ffec 	bl	8000524 <__aeabi_i2d>
 800554c:	4632      	mov	r2, r6
 800554e:	463b      	mov	r3, r7
 8005550:	f7fb faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005554:	b910      	cbnz	r0, 800555c <_dtoa_r+0x184>
 8005556:	9b00      	ldr	r3, [sp, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	2b16      	cmp	r3, #22
 8005560:	d85a      	bhi.n	8005618 <_dtoa_r+0x240>
 8005562:	9a00      	ldr	r2, [sp, #0]
 8005564:	4b57      	ldr	r3, [pc, #348]	; (80056c4 <_dtoa_r+0x2ec>)
 8005566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	ec51 0b19 	vmov	r0, r1, d9
 8005572:	f7fb fab3 	bl	8000adc <__aeabi_dcmplt>
 8005576:	2800      	cmp	r0, #0
 8005578:	d050      	beq.n	800561c <_dtoa_r+0x244>
 800557a:	9b00      	ldr	r3, [sp, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	930b      	str	r3, [sp, #44]	; 0x2c
 8005584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005586:	1b5d      	subs	r5, r3, r5
 8005588:	1e6b      	subs	r3, r5, #1
 800558a:	9305      	str	r3, [sp, #20]
 800558c:	bf45      	ittet	mi
 800558e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005592:	9304      	strmi	r3, [sp, #16]
 8005594:	2300      	movpl	r3, #0
 8005596:	2300      	movmi	r3, #0
 8005598:	bf4c      	ite	mi
 800559a:	9305      	strmi	r3, [sp, #20]
 800559c:	9304      	strpl	r3, [sp, #16]
 800559e:	9b00      	ldr	r3, [sp, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db3d      	blt.n	8005620 <_dtoa_r+0x248>
 80055a4:	9b05      	ldr	r3, [sp, #20]
 80055a6:	9a00      	ldr	r2, [sp, #0]
 80055a8:	920a      	str	r2, [sp, #40]	; 0x28
 80055aa:	4413      	add	r3, r2
 80055ac:	9305      	str	r3, [sp, #20]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9307      	str	r3, [sp, #28]
 80055b2:	9b06      	ldr	r3, [sp, #24]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	f200 8089 	bhi.w	80056cc <_dtoa_r+0x2f4>
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	bfc4      	itt	gt
 80055be:	3b04      	subgt	r3, #4
 80055c0:	9306      	strgt	r3, [sp, #24]
 80055c2:	9b06      	ldr	r3, [sp, #24]
 80055c4:	f1a3 0302 	sub.w	r3, r3, #2
 80055c8:	bfcc      	ite	gt
 80055ca:	2500      	movgt	r5, #0
 80055cc:	2501      	movle	r5, #1
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	f200 8087 	bhi.w	80056e2 <_dtoa_r+0x30a>
 80055d4:	e8df f003 	tbb	[pc, r3]
 80055d8:	59383a2d 	.word	0x59383a2d
 80055dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055e0:	441d      	add	r5, r3
 80055e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	bfc1      	itttt	gt
 80055ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80055f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055fa:	bfda      	itte	le
 80055fc:	f1c3 0320 	rsble	r3, r3, #32
 8005600:	fa06 f003 	lslle.w	r0, r6, r3
 8005604:	4318      	orrgt	r0, r3
 8005606:	f7fa ff7d 	bl	8000504 <__aeabi_ui2d>
 800560a:	2301      	movs	r3, #1
 800560c:	4606      	mov	r6, r0
 800560e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005612:	3d01      	subs	r5, #1
 8005614:	930e      	str	r3, [sp, #56]	; 0x38
 8005616:	e76a      	b.n	80054ee <_dtoa_r+0x116>
 8005618:	2301      	movs	r3, #1
 800561a:	e7b2      	b.n	8005582 <_dtoa_r+0x1aa>
 800561c:	900b      	str	r0, [sp, #44]	; 0x2c
 800561e:	e7b1      	b.n	8005584 <_dtoa_r+0x1ac>
 8005620:	9b04      	ldr	r3, [sp, #16]
 8005622:	9a00      	ldr	r2, [sp, #0]
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	4253      	negs	r3, r2
 800562a:	9307      	str	r3, [sp, #28]
 800562c:	2300      	movs	r3, #0
 800562e:	930a      	str	r3, [sp, #40]	; 0x28
 8005630:	e7bf      	b.n	80055b2 <_dtoa_r+0x1da>
 8005632:	2300      	movs	r3, #0
 8005634:	9308      	str	r3, [sp, #32]
 8005636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	dc55      	bgt.n	80056e8 <_dtoa_r+0x310>
 800563c:	2301      	movs	r3, #1
 800563e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005642:	461a      	mov	r2, r3
 8005644:	9209      	str	r2, [sp, #36]	; 0x24
 8005646:	e00c      	b.n	8005662 <_dtoa_r+0x28a>
 8005648:	2301      	movs	r3, #1
 800564a:	e7f3      	b.n	8005634 <_dtoa_r+0x25c>
 800564c:	2300      	movs	r3, #0
 800564e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005650:	9308      	str	r3, [sp, #32]
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	4413      	add	r3, r2
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	3301      	adds	r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	9303      	str	r3, [sp, #12]
 800565e:	bfb8      	it	lt
 8005660:	2301      	movlt	r3, #1
 8005662:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005664:	2200      	movs	r2, #0
 8005666:	6042      	str	r2, [r0, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	f102 0614 	add.w	r6, r2, #20
 800566e:	429e      	cmp	r6, r3
 8005670:	6841      	ldr	r1, [r0, #4]
 8005672:	d93d      	bls.n	80056f0 <_dtoa_r+0x318>
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fcb7 	bl	8005fe8 <_Balloc>
 800567a:	9001      	str	r0, [sp, #4]
 800567c:	2800      	cmp	r0, #0
 800567e:	d13b      	bne.n	80056f8 <_dtoa_r+0x320>
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <_dtoa_r+0x2f0>)
 8005682:	4602      	mov	r2, r0
 8005684:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005688:	e6c0      	b.n	800540c <_dtoa_r+0x34>
 800568a:	2301      	movs	r3, #1
 800568c:	e7df      	b.n	800564e <_dtoa_r+0x276>
 800568e:	bf00      	nop
 8005690:	636f4361 	.word	0x636f4361
 8005694:	3fd287a7 	.word	0x3fd287a7
 8005698:	8b60c8b3 	.word	0x8b60c8b3
 800569c:	3fc68a28 	.word	0x3fc68a28
 80056a0:	509f79fb 	.word	0x509f79fb
 80056a4:	3fd34413 	.word	0x3fd34413
 80056a8:	08008b85 	.word	0x08008b85
 80056ac:	08008b9c 	.word	0x08008b9c
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	08008b81 	.word	0x08008b81
 80056b8:	08008b78 	.word	0x08008b78
 80056bc:	08008b55 	.word	0x08008b55
 80056c0:	3ff80000 	.word	0x3ff80000
 80056c4:	08008c90 	.word	0x08008c90
 80056c8:	08008bf7 	.word	0x08008bf7
 80056cc:	2501      	movs	r5, #1
 80056ce:	2300      	movs	r3, #0
 80056d0:	9306      	str	r3, [sp, #24]
 80056d2:	9508      	str	r5, [sp, #32]
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	2312      	movs	r3, #18
 80056e0:	e7b0      	b.n	8005644 <_dtoa_r+0x26c>
 80056e2:	2301      	movs	r3, #1
 80056e4:	9308      	str	r3, [sp, #32]
 80056e6:	e7f5      	b.n	80056d4 <_dtoa_r+0x2fc>
 80056e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ee:	e7b8      	b.n	8005662 <_dtoa_r+0x28a>
 80056f0:	3101      	adds	r1, #1
 80056f2:	6041      	str	r1, [r0, #4]
 80056f4:	0052      	lsls	r2, r2, #1
 80056f6:	e7b8      	b.n	800566a <_dtoa_r+0x292>
 80056f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	2b0e      	cmp	r3, #14
 8005702:	f200 809d 	bhi.w	8005840 <_dtoa_r+0x468>
 8005706:	2d00      	cmp	r5, #0
 8005708:	f000 809a 	beq.w	8005840 <_dtoa_r+0x468>
 800570c:	9b00      	ldr	r3, [sp, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd32      	ble.n	8005778 <_dtoa_r+0x3a0>
 8005712:	4ab7      	ldr	r2, [pc, #732]	; (80059f0 <_dtoa_r+0x618>)
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800571c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005720:	9b00      	ldr	r3, [sp, #0]
 8005722:	05d8      	lsls	r0, r3, #23
 8005724:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005728:	d516      	bpl.n	8005758 <_dtoa_r+0x380>
 800572a:	4bb2      	ldr	r3, [pc, #712]	; (80059f4 <_dtoa_r+0x61c>)
 800572c:	ec51 0b19 	vmov	r0, r1, d9
 8005730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005734:	f7fb f88a 	bl	800084c <__aeabi_ddiv>
 8005738:	f007 070f 	and.w	r7, r7, #15
 800573c:	4682      	mov	sl, r0
 800573e:	468b      	mov	fp, r1
 8005740:	2503      	movs	r5, #3
 8005742:	4eac      	ldr	r6, [pc, #688]	; (80059f4 <_dtoa_r+0x61c>)
 8005744:	b957      	cbnz	r7, 800575c <_dtoa_r+0x384>
 8005746:	4642      	mov	r2, r8
 8005748:	464b      	mov	r3, r9
 800574a:	4650      	mov	r0, sl
 800574c:	4659      	mov	r1, fp
 800574e:	f7fb f87d 	bl	800084c <__aeabi_ddiv>
 8005752:	4682      	mov	sl, r0
 8005754:	468b      	mov	fp, r1
 8005756:	e028      	b.n	80057aa <_dtoa_r+0x3d2>
 8005758:	2502      	movs	r5, #2
 800575a:	e7f2      	b.n	8005742 <_dtoa_r+0x36a>
 800575c:	07f9      	lsls	r1, r7, #31
 800575e:	d508      	bpl.n	8005772 <_dtoa_r+0x39a>
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005768:	f7fa ff46 	bl	80005f8 <__aeabi_dmul>
 800576c:	3501      	adds	r5, #1
 800576e:	4680      	mov	r8, r0
 8005770:	4689      	mov	r9, r1
 8005772:	107f      	asrs	r7, r7, #1
 8005774:	3608      	adds	r6, #8
 8005776:	e7e5      	b.n	8005744 <_dtoa_r+0x36c>
 8005778:	f000 809b 	beq.w	80058b2 <_dtoa_r+0x4da>
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	4f9d      	ldr	r7, [pc, #628]	; (80059f4 <_dtoa_r+0x61c>)
 8005780:	425e      	negs	r6, r3
 8005782:	4b9b      	ldr	r3, [pc, #620]	; (80059f0 <_dtoa_r+0x618>)
 8005784:	f006 020f 	and.w	r2, r6, #15
 8005788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	ec51 0b19 	vmov	r0, r1, d9
 8005794:	f7fa ff30 	bl	80005f8 <__aeabi_dmul>
 8005798:	1136      	asrs	r6, r6, #4
 800579a:	4682      	mov	sl, r0
 800579c:	468b      	mov	fp, r1
 800579e:	2300      	movs	r3, #0
 80057a0:	2502      	movs	r5, #2
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	d17a      	bne.n	800589c <_dtoa_r+0x4c4>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1d3      	bne.n	8005752 <_dtoa_r+0x37a>
 80057aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8082 	beq.w	80058b6 <_dtoa_r+0x4de>
 80057b2:	4b91      	ldr	r3, [pc, #580]	; (80059f8 <_dtoa_r+0x620>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	4650      	mov	r0, sl
 80057b8:	4659      	mov	r1, fp
 80057ba:	f7fb f98f 	bl	8000adc <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d079      	beq.n	80058b6 <_dtoa_r+0x4de>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d076      	beq.n	80058b6 <_dtoa_r+0x4de>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	dd36      	ble.n	800583c <_dtoa_r+0x464>
 80057ce:	9b00      	ldr	r3, [sp, #0]
 80057d0:	4650      	mov	r0, sl
 80057d2:	4659      	mov	r1, fp
 80057d4:	1e5f      	subs	r7, r3, #1
 80057d6:	2200      	movs	r2, #0
 80057d8:	4b88      	ldr	r3, [pc, #544]	; (80059fc <_dtoa_r+0x624>)
 80057da:	f7fa ff0d 	bl	80005f8 <__aeabi_dmul>
 80057de:	9e02      	ldr	r6, [sp, #8]
 80057e0:	4682      	mov	sl, r0
 80057e2:	468b      	mov	fp, r1
 80057e4:	3501      	adds	r5, #1
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7fa fe9c 	bl	8000524 <__aeabi_i2d>
 80057ec:	4652      	mov	r2, sl
 80057ee:	465b      	mov	r3, fp
 80057f0:	f7fa ff02 	bl	80005f8 <__aeabi_dmul>
 80057f4:	4b82      	ldr	r3, [pc, #520]	; (8005a00 <_dtoa_r+0x628>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	f7fa fd48 	bl	800028c <__adddf3>
 80057fc:	46d0      	mov	r8, sl
 80057fe:	46d9      	mov	r9, fp
 8005800:	4682      	mov	sl, r0
 8005802:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005806:	2e00      	cmp	r6, #0
 8005808:	d158      	bne.n	80058bc <_dtoa_r+0x4e4>
 800580a:	4b7e      	ldr	r3, [pc, #504]	; (8005a04 <_dtoa_r+0x62c>)
 800580c:	2200      	movs	r2, #0
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f7fa fd39 	bl	8000288 <__aeabi_dsub>
 8005816:	4652      	mov	r2, sl
 8005818:	465b      	mov	r3, fp
 800581a:	4680      	mov	r8, r0
 800581c:	4689      	mov	r9, r1
 800581e:	f7fb f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8005822:	2800      	cmp	r0, #0
 8005824:	f040 8295 	bne.w	8005d52 <_dtoa_r+0x97a>
 8005828:	4652      	mov	r2, sl
 800582a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fb f953 	bl	8000adc <__aeabi_dcmplt>
 8005836:	2800      	cmp	r0, #0
 8005838:	f040 8289 	bne.w	8005d4e <_dtoa_r+0x976>
 800583c:	ec5b ab19 	vmov	sl, fp, d9
 8005840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005842:	2b00      	cmp	r3, #0
 8005844:	f2c0 8148 	blt.w	8005ad8 <_dtoa_r+0x700>
 8005848:	9a00      	ldr	r2, [sp, #0]
 800584a:	2a0e      	cmp	r2, #14
 800584c:	f300 8144 	bgt.w	8005ad8 <_dtoa_r+0x700>
 8005850:	4b67      	ldr	r3, [pc, #412]	; (80059f0 <_dtoa_r+0x618>)
 8005852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005856:	e9d3 8900 	ldrd	r8, r9, [r3]
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	f280 80d5 	bge.w	8005a0c <_dtoa_r+0x634>
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f300 80d1 	bgt.w	8005a0c <_dtoa_r+0x634>
 800586a:	f040 826f 	bne.w	8005d4c <_dtoa_r+0x974>
 800586e:	4b65      	ldr	r3, [pc, #404]	; (8005a04 <_dtoa_r+0x62c>)
 8005870:	2200      	movs	r2, #0
 8005872:	4640      	mov	r0, r8
 8005874:	4649      	mov	r1, r9
 8005876:	f7fa febf 	bl	80005f8 <__aeabi_dmul>
 800587a:	4652      	mov	r2, sl
 800587c:	465b      	mov	r3, fp
 800587e:	f7fb f941 	bl	8000b04 <__aeabi_dcmpge>
 8005882:	9e03      	ldr	r6, [sp, #12]
 8005884:	4637      	mov	r7, r6
 8005886:	2800      	cmp	r0, #0
 8005888:	f040 8245 	bne.w	8005d16 <_dtoa_r+0x93e>
 800588c:	9d01      	ldr	r5, [sp, #4]
 800588e:	2331      	movs	r3, #49	; 0x31
 8005890:	f805 3b01 	strb.w	r3, [r5], #1
 8005894:	9b00      	ldr	r3, [sp, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	e240      	b.n	8005d1e <_dtoa_r+0x946>
 800589c:	07f2      	lsls	r2, r6, #31
 800589e:	d505      	bpl.n	80058ac <_dtoa_r+0x4d4>
 80058a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a4:	f7fa fea8 	bl	80005f8 <__aeabi_dmul>
 80058a8:	3501      	adds	r5, #1
 80058aa:	2301      	movs	r3, #1
 80058ac:	1076      	asrs	r6, r6, #1
 80058ae:	3708      	adds	r7, #8
 80058b0:	e777      	b.n	80057a2 <_dtoa_r+0x3ca>
 80058b2:	2502      	movs	r5, #2
 80058b4:	e779      	b.n	80057aa <_dtoa_r+0x3d2>
 80058b6:	9f00      	ldr	r7, [sp, #0]
 80058b8:	9e03      	ldr	r6, [sp, #12]
 80058ba:	e794      	b.n	80057e6 <_dtoa_r+0x40e>
 80058bc:	9901      	ldr	r1, [sp, #4]
 80058be:	4b4c      	ldr	r3, [pc, #304]	; (80059f0 <_dtoa_r+0x618>)
 80058c0:	4431      	add	r1, r6
 80058c2:	910d      	str	r1, [sp, #52]	; 0x34
 80058c4:	9908      	ldr	r1, [sp, #32]
 80058c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d043      	beq.n	800595a <_dtoa_r+0x582>
 80058d2:	494d      	ldr	r1, [pc, #308]	; (8005a08 <_dtoa_r+0x630>)
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fa ffb9 	bl	800084c <__aeabi_ddiv>
 80058da:	4652      	mov	r2, sl
 80058dc:	465b      	mov	r3, fp
 80058de:	f7fa fcd3 	bl	8000288 <__aeabi_dsub>
 80058e2:	9d01      	ldr	r5, [sp, #4]
 80058e4:	4682      	mov	sl, r0
 80058e6:	468b      	mov	fp, r1
 80058e8:	4649      	mov	r1, r9
 80058ea:	4640      	mov	r0, r8
 80058ec:	f7fb f934 	bl	8000b58 <__aeabi_d2iz>
 80058f0:	4606      	mov	r6, r0
 80058f2:	f7fa fe17 	bl	8000524 <__aeabi_i2d>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	f7fa fcc3 	bl	8000288 <__aeabi_dsub>
 8005902:	3630      	adds	r6, #48	; 0x30
 8005904:	f805 6b01 	strb.w	r6, [r5], #1
 8005908:	4652      	mov	r2, sl
 800590a:	465b      	mov	r3, fp
 800590c:	4680      	mov	r8, r0
 800590e:	4689      	mov	r9, r1
 8005910:	f7fb f8e4 	bl	8000adc <__aeabi_dcmplt>
 8005914:	2800      	cmp	r0, #0
 8005916:	d163      	bne.n	80059e0 <_dtoa_r+0x608>
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	4936      	ldr	r1, [pc, #216]	; (80059f8 <_dtoa_r+0x620>)
 800591e:	2000      	movs	r0, #0
 8005920:	f7fa fcb2 	bl	8000288 <__aeabi_dsub>
 8005924:	4652      	mov	r2, sl
 8005926:	465b      	mov	r3, fp
 8005928:	f7fb f8d8 	bl	8000adc <__aeabi_dcmplt>
 800592c:	2800      	cmp	r0, #0
 800592e:	f040 80b5 	bne.w	8005a9c <_dtoa_r+0x6c4>
 8005932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005934:	429d      	cmp	r5, r3
 8005936:	d081      	beq.n	800583c <_dtoa_r+0x464>
 8005938:	4b30      	ldr	r3, [pc, #192]	; (80059fc <_dtoa_r+0x624>)
 800593a:	2200      	movs	r2, #0
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fe5a 	bl	80005f8 <__aeabi_dmul>
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <_dtoa_r+0x624>)
 8005946:	4682      	mov	sl, r0
 8005948:	468b      	mov	fp, r1
 800594a:	4640      	mov	r0, r8
 800594c:	4649      	mov	r1, r9
 800594e:	2200      	movs	r2, #0
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	4680      	mov	r8, r0
 8005956:	4689      	mov	r9, r1
 8005958:	e7c6      	b.n	80058e8 <_dtoa_r+0x510>
 800595a:	4650      	mov	r0, sl
 800595c:	4659      	mov	r1, fp
 800595e:	f7fa fe4b 	bl	80005f8 <__aeabi_dmul>
 8005962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005964:	9d01      	ldr	r5, [sp, #4]
 8005966:	930f      	str	r3, [sp, #60]	; 0x3c
 8005968:	4682      	mov	sl, r0
 800596a:	468b      	mov	fp, r1
 800596c:	4649      	mov	r1, r9
 800596e:	4640      	mov	r0, r8
 8005970:	f7fb f8f2 	bl	8000b58 <__aeabi_d2iz>
 8005974:	4606      	mov	r6, r0
 8005976:	f7fa fdd5 	bl	8000524 <__aeabi_i2d>
 800597a:	3630      	adds	r6, #48	; 0x30
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fa fc80 	bl	8000288 <__aeabi_dsub>
 8005988:	f805 6b01 	strb.w	r6, [r5], #1
 800598c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800598e:	429d      	cmp	r5, r3
 8005990:	4680      	mov	r8, r0
 8005992:	4689      	mov	r9, r1
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	d124      	bne.n	80059e4 <_dtoa_r+0x60c>
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <_dtoa_r+0x630>)
 800599c:	4650      	mov	r0, sl
 800599e:	4659      	mov	r1, fp
 80059a0:	f7fa fc74 	bl	800028c <__adddf3>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fb f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d173      	bne.n	8005a9c <_dtoa_r+0x6c4>
 80059b4:	4652      	mov	r2, sl
 80059b6:	465b      	mov	r3, fp
 80059b8:	4913      	ldr	r1, [pc, #76]	; (8005a08 <_dtoa_r+0x630>)
 80059ba:	2000      	movs	r0, #0
 80059bc:	f7fa fc64 	bl	8000288 <__aeabi_dsub>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fb f888 	bl	8000adc <__aeabi_dcmplt>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f43f af35 	beq.w	800583c <_dtoa_r+0x464>
 80059d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059d4:	1e6b      	subs	r3, r5, #1
 80059d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	d0f8      	beq.n	80059d2 <_dtoa_r+0x5fa>
 80059e0:	9700      	str	r7, [sp, #0]
 80059e2:	e049      	b.n	8005a78 <_dtoa_r+0x6a0>
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <_dtoa_r+0x624>)
 80059e6:	f7fa fe07 	bl	80005f8 <__aeabi_dmul>
 80059ea:	4680      	mov	r8, r0
 80059ec:	4689      	mov	r9, r1
 80059ee:	e7bd      	b.n	800596c <_dtoa_r+0x594>
 80059f0:	08008c90 	.word	0x08008c90
 80059f4:	08008c68 	.word	0x08008c68
 80059f8:	3ff00000 	.word	0x3ff00000
 80059fc:	40240000 	.word	0x40240000
 8005a00:	401c0000 	.word	0x401c0000
 8005a04:	40140000 	.word	0x40140000
 8005a08:	3fe00000 	.word	0x3fe00000
 8005a0c:	9d01      	ldr	r5, [sp, #4]
 8005a0e:	4656      	mov	r6, sl
 8005a10:	465f      	mov	r7, fp
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa ff17 	bl	800084c <__aeabi_ddiv>
 8005a1e:	f7fb f89b 	bl	8000b58 <__aeabi_d2iz>
 8005a22:	4682      	mov	sl, r0
 8005a24:	f7fa fd7e 	bl	8000524 <__aeabi_i2d>
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	f7fa fde4 	bl	80005f8 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005a3c:	f7fa fc24 	bl	8000288 <__aeabi_dsub>
 8005a40:	f805 6b01 	strb.w	r6, [r5], #1
 8005a44:	9e01      	ldr	r6, [sp, #4]
 8005a46:	9f03      	ldr	r7, [sp, #12]
 8005a48:	1bae      	subs	r6, r5, r6
 8005a4a:	42b7      	cmp	r7, r6
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	d135      	bne.n	8005abe <_dtoa_r+0x6e6>
 8005a52:	f7fa fc1b 	bl	800028c <__adddf3>
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	f7fb f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8005a62:	b9d0      	cbnz	r0, 8005a9a <_dtoa_r+0x6c2>
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	f7fb f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a70:	b110      	cbz	r0, 8005a78 <_dtoa_r+0x6a0>
 8005a72:	f01a 0f01 	tst.w	sl, #1
 8005a76:	d110      	bne.n	8005a9a <_dtoa_r+0x6c2>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	ee18 1a10 	vmov	r1, s16
 8005a7e:	f000 faf3 	bl	8006068 <_Bfree>
 8005a82:	2300      	movs	r3, #0
 8005a84:	9800      	ldr	r0, [sp, #0]
 8005a86:	702b      	strb	r3, [r5, #0]
 8005a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	6018      	str	r0, [r3, #0]
 8005a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f43f acf1 	beq.w	8005478 <_dtoa_r+0xa0>
 8005a96:	601d      	str	r5, [r3, #0]
 8005a98:	e4ee      	b.n	8005478 <_dtoa_r+0xa0>
 8005a9a:	9f00      	ldr	r7, [sp, #0]
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aa4:	2a39      	cmp	r2, #57	; 0x39
 8005aa6:	d106      	bne.n	8005ab6 <_dtoa_r+0x6de>
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d1f7      	bne.n	8005a9e <_dtoa_r+0x6c6>
 8005aae:	9901      	ldr	r1, [sp, #4]
 8005ab0:	2230      	movs	r2, #48	; 0x30
 8005ab2:	3701      	adds	r7, #1
 8005ab4:	700a      	strb	r2, [r1, #0]
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	3201      	adds	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e790      	b.n	80059e0 <_dtoa_r+0x608>
 8005abe:	4ba6      	ldr	r3, [pc, #664]	; (8005d58 <_dtoa_r+0x980>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f7fa fd99 	bl	80005f8 <__aeabi_dmul>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	f7fa fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d09d      	beq.n	8005a12 <_dtoa_r+0x63a>
 8005ad6:	e7cf      	b.n	8005a78 <_dtoa_r+0x6a0>
 8005ad8:	9a08      	ldr	r2, [sp, #32]
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	f000 80d7 	beq.w	8005c8e <_dtoa_r+0x8b6>
 8005ae0:	9a06      	ldr	r2, [sp, #24]
 8005ae2:	2a01      	cmp	r2, #1
 8005ae4:	f300 80ba 	bgt.w	8005c5c <_dtoa_r+0x884>
 8005ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	f000 80b2 	beq.w	8005c54 <_dtoa_r+0x87c>
 8005af0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005af4:	9e07      	ldr	r6, [sp, #28]
 8005af6:	9d04      	ldr	r5, [sp, #16]
 8005af8:	9a04      	ldr	r2, [sp, #16]
 8005afa:	441a      	add	r2, r3
 8005afc:	9204      	str	r2, [sp, #16]
 8005afe:	9a05      	ldr	r2, [sp, #20]
 8005b00:	2101      	movs	r1, #1
 8005b02:	441a      	add	r2, r3
 8005b04:	4620      	mov	r0, r4
 8005b06:	9205      	str	r2, [sp, #20]
 8005b08:	f000 fb66 	bl	80061d8 <__i2b>
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	dd0c      	ble.n	8005b2c <_dtoa_r+0x754>
 8005b12:	9b05      	ldr	r3, [sp, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dd09      	ble.n	8005b2c <_dtoa_r+0x754>
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	9a04      	ldr	r2, [sp, #16]
 8005b1c:	bfa8      	it	ge
 8005b1e:	462b      	movge	r3, r5
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	9204      	str	r2, [sp, #16]
 8005b24:	9a05      	ldr	r2, [sp, #20]
 8005b26:	1aed      	subs	r5, r5, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	b31b      	cbz	r3, 8005b78 <_dtoa_r+0x7a0>
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80af 	beq.w	8005c96 <_dtoa_r+0x8be>
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	dd13      	ble.n	8005b64 <_dtoa_r+0x78c>
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fc09 	bl	8006358 <__pow5mult>
 8005b46:	ee18 2a10 	vmov	r2, s16
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fb58 	bl	8006204 <__multiply>
 8005b54:	ee18 1a10 	vmov	r1, s16
 8005b58:	4680      	mov	r8, r0
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 fa84 	bl	8006068 <_Bfree>
 8005b60:	ee08 8a10 	vmov	s16, r8
 8005b64:	9b07      	ldr	r3, [sp, #28]
 8005b66:	1b9a      	subs	r2, r3, r6
 8005b68:	d006      	beq.n	8005b78 <_dtoa_r+0x7a0>
 8005b6a:	ee18 1a10 	vmov	r1, s16
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 fbf2 	bl	8006358 <__pow5mult>
 8005b74:	ee08 0a10 	vmov	s16, r0
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 fb2c 	bl	80061d8 <__i2b>
 8005b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	4606      	mov	r6, r0
 8005b86:	f340 8088 	ble.w	8005c9a <_dtoa_r+0x8c2>
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fbe2 	bl	8006358 <__pow5mult>
 8005b94:	9b06      	ldr	r3, [sp, #24]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	4606      	mov	r6, r0
 8005b9a:	f340 8081 	ble.w	8005ca0 <_dtoa_r+0x8c8>
 8005b9e:	f04f 0800 	mov.w	r8, #0
 8005ba2:	6933      	ldr	r3, [r6, #16]
 8005ba4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ba8:	6918      	ldr	r0, [r3, #16]
 8005baa:	f000 fac5 	bl	8006138 <__hi0bits>
 8005bae:	f1c0 0020 	rsb	r0, r0, #32
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	4418      	add	r0, r3
 8005bb6:	f010 001f 	ands.w	r0, r0, #31
 8005bba:	f000 8092 	beq.w	8005ce2 <_dtoa_r+0x90a>
 8005bbe:	f1c0 0320 	rsb	r3, r0, #32
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	f340 808a 	ble.w	8005cdc <_dtoa_r+0x904>
 8005bc8:	f1c0 001c 	rsb	r0, r0, #28
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	4403      	add	r3, r0
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	9b05      	ldr	r3, [sp, #20]
 8005bd4:	4403      	add	r3, r0
 8005bd6:	4405      	add	r5, r0
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	9b04      	ldr	r3, [sp, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dd07      	ble.n	8005bf0 <_dtoa_r+0x818>
 8005be0:	ee18 1a10 	vmov	r1, s16
 8005be4:	461a      	mov	r2, r3
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fc10 	bl	800640c <__lshift>
 8005bec:	ee08 0a10 	vmov	s16, r0
 8005bf0:	9b05      	ldr	r3, [sp, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd05      	ble.n	8005c02 <_dtoa_r+0x82a>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 fc06 	bl	800640c <__lshift>
 8005c00:	4606      	mov	r6, r0
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d06e      	beq.n	8005ce6 <_dtoa_r+0x90e>
 8005c08:	ee18 0a10 	vmov	r0, s16
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	f000 fc6d 	bl	80064ec <__mcmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	da67      	bge.n	8005ce6 <_dtoa_r+0x90e>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	ee18 1a10 	vmov	r1, s16
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	220a      	movs	r2, #10
 8005c22:	2300      	movs	r3, #0
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fa41 	bl	80060ac <__multadd>
 8005c2a:	9b08      	ldr	r3, [sp, #32]
 8005c2c:	ee08 0a10 	vmov	s16, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 81b1 	beq.w	8005f98 <_dtoa_r+0xbc0>
 8005c36:	2300      	movs	r3, #0
 8005c38:	4639      	mov	r1, r7
 8005c3a:	220a      	movs	r2, #10
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fa35 	bl	80060ac <__multadd>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	4607      	mov	r7, r0
 8005c48:	f300 808e 	bgt.w	8005d68 <_dtoa_r+0x990>
 8005c4c:	9b06      	ldr	r3, [sp, #24]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	dc51      	bgt.n	8005cf6 <_dtoa_r+0x91e>
 8005c52:	e089      	b.n	8005d68 <_dtoa_r+0x990>
 8005c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c5a:	e74b      	b.n	8005af4 <_dtoa_r+0x71c>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	1e5e      	subs	r6, r3, #1
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	42b3      	cmp	r3, r6
 8005c64:	bfbf      	itttt	lt
 8005c66:	9b07      	ldrlt	r3, [sp, #28]
 8005c68:	9607      	strlt	r6, [sp, #28]
 8005c6a:	1af2      	sublt	r2, r6, r3
 8005c6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c6e:	bfb6      	itet	lt
 8005c70:	189b      	addlt	r3, r3, r2
 8005c72:	1b9e      	subge	r6, r3, r6
 8005c74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	bfb8      	it	lt
 8005c7a:	2600      	movlt	r6, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bfb7      	itett	lt
 8005c80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c88:	1a9d      	sublt	r5, r3, r2
 8005c8a:	2300      	movlt	r3, #0
 8005c8c:	e734      	b.n	8005af8 <_dtoa_r+0x720>
 8005c8e:	9e07      	ldr	r6, [sp, #28]
 8005c90:	9d04      	ldr	r5, [sp, #16]
 8005c92:	9f08      	ldr	r7, [sp, #32]
 8005c94:	e73b      	b.n	8005b0e <_dtoa_r+0x736>
 8005c96:	9a07      	ldr	r2, [sp, #28]
 8005c98:	e767      	b.n	8005b6a <_dtoa_r+0x792>
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	dc18      	bgt.n	8005cd2 <_dtoa_r+0x8fa>
 8005ca0:	f1ba 0f00 	cmp.w	sl, #0
 8005ca4:	d115      	bne.n	8005cd2 <_dtoa_r+0x8fa>
 8005ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005caa:	b993      	cbnz	r3, 8005cd2 <_dtoa_r+0x8fa>
 8005cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005cb0:	0d1b      	lsrs	r3, r3, #20
 8005cb2:	051b      	lsls	r3, r3, #20
 8005cb4:	b183      	cbz	r3, 8005cd8 <_dtoa_r+0x900>
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	9b05      	ldr	r3, [sp, #20]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	9305      	str	r3, [sp, #20]
 8005cc2:	f04f 0801 	mov.w	r8, #1
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f af6a 	bne.w	8005ba2 <_dtoa_r+0x7ca>
 8005cce:	2001      	movs	r0, #1
 8005cd0:	e76f      	b.n	8005bb2 <_dtoa_r+0x7da>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	e7f6      	b.n	8005cc6 <_dtoa_r+0x8ee>
 8005cd8:	4698      	mov	r8, r3
 8005cda:	e7f4      	b.n	8005cc6 <_dtoa_r+0x8ee>
 8005cdc:	f43f af7d 	beq.w	8005bda <_dtoa_r+0x802>
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	301c      	adds	r0, #28
 8005ce4:	e772      	b.n	8005bcc <_dtoa_r+0x7f4>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dc37      	bgt.n	8005d5c <_dtoa_r+0x984>
 8005cec:	9b06      	ldr	r3, [sp, #24]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	dd34      	ble.n	8005d5c <_dtoa_r+0x984>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	9b02      	ldr	r3, [sp, #8]
 8005cf8:	b96b      	cbnz	r3, 8005d16 <_dtoa_r+0x93e>
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f9d4 	bl	80060ac <__multadd>
 8005d04:	4601      	mov	r1, r0
 8005d06:	4606      	mov	r6, r0
 8005d08:	ee18 0a10 	vmov	r0, s16
 8005d0c:	f000 fbee 	bl	80064ec <__mcmp>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f73f adbb 	bgt.w	800588c <_dtoa_r+0x4b4>
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	9d01      	ldr	r5, [sp, #4]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	4631      	mov	r1, r6
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 f99f 	bl	8006068 <_Bfree>
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	f43f aea4 	beq.w	8005a78 <_dtoa_r+0x6a0>
 8005d30:	f1b8 0f00 	cmp.w	r8, #0
 8005d34:	d005      	beq.n	8005d42 <_dtoa_r+0x96a>
 8005d36:	45b8      	cmp	r8, r7
 8005d38:	d003      	beq.n	8005d42 <_dtoa_r+0x96a>
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 f993 	bl	8006068 <_Bfree>
 8005d42:	4639      	mov	r1, r7
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 f98f 	bl	8006068 <_Bfree>
 8005d4a:	e695      	b.n	8005a78 <_dtoa_r+0x6a0>
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	4637      	mov	r7, r6
 8005d50:	e7e1      	b.n	8005d16 <_dtoa_r+0x93e>
 8005d52:	9700      	str	r7, [sp, #0]
 8005d54:	4637      	mov	r7, r6
 8005d56:	e599      	b.n	800588c <_dtoa_r+0x4b4>
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	9b08      	ldr	r3, [sp, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80ca 	beq.w	8005ef8 <_dtoa_r+0xb20>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	dd05      	ble.n	8005d78 <_dtoa_r+0x9a0>
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fb4b 	bl	800640c <__lshift>
 8005d76:	4607      	mov	r7, r0
 8005d78:	f1b8 0f00 	cmp.w	r8, #0
 8005d7c:	d05b      	beq.n	8005e36 <_dtoa_r+0xa5e>
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f931 	bl	8005fe8 <_Balloc>
 8005d86:	4605      	mov	r5, r0
 8005d88:	b928      	cbnz	r0, 8005d96 <_dtoa_r+0x9be>
 8005d8a:	4b87      	ldr	r3, [pc, #540]	; (8005fa8 <_dtoa_r+0xbd0>)
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d92:	f7ff bb3b 	b.w	800540c <_dtoa_r+0x34>
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	3202      	adds	r2, #2
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	f107 010c 	add.w	r1, r7, #12
 8005da0:	300c      	adds	r0, #12
 8005da2:	f000 f913 	bl	8005fcc <memcpy>
 8005da6:	2201      	movs	r2, #1
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fb2e 	bl	800640c <__lshift>
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	f103 0901 	add.w	r9, r3, #1
 8005db6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	9305      	str	r3, [sp, #20]
 8005dbe:	f00a 0301 	and.w	r3, sl, #1
 8005dc2:	46b8      	mov	r8, r7
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	4631      	mov	r1, r6
 8005dca:	ee18 0a10 	vmov	r0, s16
 8005dce:	f7ff fa77 	bl	80052c0 <quorem>
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	9002      	str	r0, [sp, #8]
 8005dd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dda:	ee18 0a10 	vmov	r0, s16
 8005dde:	f000 fb85 	bl	80064ec <__mcmp>
 8005de2:	463a      	mov	r2, r7
 8005de4:	9003      	str	r0, [sp, #12]
 8005de6:	4631      	mov	r1, r6
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fb9b 	bl	8006524 <__mdiff>
 8005dee:	68c2      	ldr	r2, [r0, #12]
 8005df0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005df4:	4605      	mov	r5, r0
 8005df6:	bb02      	cbnz	r2, 8005e3a <_dtoa_r+0xa62>
 8005df8:	4601      	mov	r1, r0
 8005dfa:	ee18 0a10 	vmov	r0, s16
 8005dfe:	f000 fb75 	bl	80064ec <__mcmp>
 8005e02:	4602      	mov	r2, r0
 8005e04:	4629      	mov	r1, r5
 8005e06:	4620      	mov	r0, r4
 8005e08:	9207      	str	r2, [sp, #28]
 8005e0a:	f000 f92d 	bl	8006068 <_Bfree>
 8005e0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005e12:	ea43 0102 	orr.w	r1, r3, r2
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	464d      	mov	r5, r9
 8005e1c:	d10f      	bne.n	8005e3e <_dtoa_r+0xa66>
 8005e1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e22:	d02a      	beq.n	8005e7a <_dtoa_r+0xaa2>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dd02      	ble.n	8005e30 <_dtoa_r+0xa58>
 8005e2a:	9b02      	ldr	r3, [sp, #8]
 8005e2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005e30:	f88b a000 	strb.w	sl, [fp]
 8005e34:	e775      	b.n	8005d22 <_dtoa_r+0x94a>
 8005e36:	4638      	mov	r0, r7
 8005e38:	e7ba      	b.n	8005db0 <_dtoa_r+0x9d8>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	e7e2      	b.n	8005e04 <_dtoa_r+0xa2c>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db04      	blt.n	8005e4e <_dtoa_r+0xa76>
 8005e44:	9906      	ldr	r1, [sp, #24]
 8005e46:	430b      	orrs	r3, r1
 8005e48:	9904      	ldr	r1, [sp, #16]
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	d122      	bne.n	8005e94 <_dtoa_r+0xabc>
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	ddee      	ble.n	8005e30 <_dtoa_r+0xa58>
 8005e52:	ee18 1a10 	vmov	r1, s16
 8005e56:	2201      	movs	r2, #1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fad7 	bl	800640c <__lshift>
 8005e5e:	4631      	mov	r1, r6
 8005e60:	ee08 0a10 	vmov	s16, r0
 8005e64:	f000 fb42 	bl	80064ec <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dc03      	bgt.n	8005e74 <_dtoa_r+0xa9c>
 8005e6c:	d1e0      	bne.n	8005e30 <_dtoa_r+0xa58>
 8005e6e:	f01a 0f01 	tst.w	sl, #1
 8005e72:	d0dd      	beq.n	8005e30 <_dtoa_r+0xa58>
 8005e74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e78:	d1d7      	bne.n	8005e2a <_dtoa_r+0xa52>
 8005e7a:	2339      	movs	r3, #57	; 0x39
 8005e7c:	f88b 3000 	strb.w	r3, [fp]
 8005e80:	462b      	mov	r3, r5
 8005e82:	461d      	mov	r5, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e8a:	2a39      	cmp	r2, #57	; 0x39
 8005e8c:	d071      	beq.n	8005f72 <_dtoa_r+0xb9a>
 8005e8e:	3201      	adds	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	e746      	b.n	8005d22 <_dtoa_r+0x94a>
 8005e94:	2a00      	cmp	r2, #0
 8005e96:	dd07      	ble.n	8005ea8 <_dtoa_r+0xad0>
 8005e98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e9c:	d0ed      	beq.n	8005e7a <_dtoa_r+0xaa2>
 8005e9e:	f10a 0301 	add.w	r3, sl, #1
 8005ea2:	f88b 3000 	strb.w	r3, [fp]
 8005ea6:	e73c      	b.n	8005d22 <_dtoa_r+0x94a>
 8005ea8:	9b05      	ldr	r3, [sp, #20]
 8005eaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005eae:	4599      	cmp	r9, r3
 8005eb0:	d047      	beq.n	8005f42 <_dtoa_r+0xb6a>
 8005eb2:	ee18 1a10 	vmov	r1, s16
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	220a      	movs	r2, #10
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 f8f6 	bl	80060ac <__multadd>
 8005ec0:	45b8      	cmp	r8, r7
 8005ec2:	ee08 0a10 	vmov	s16, r0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f04f 020a 	mov.w	r2, #10
 8005ece:	4641      	mov	r1, r8
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	d106      	bne.n	8005ee2 <_dtoa_r+0xb0a>
 8005ed4:	f000 f8ea 	bl	80060ac <__multadd>
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4607      	mov	r7, r0
 8005edc:	f109 0901 	add.w	r9, r9, #1
 8005ee0:	e772      	b.n	8005dc8 <_dtoa_r+0x9f0>
 8005ee2:	f000 f8e3 	bl	80060ac <__multadd>
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	4680      	mov	r8, r0
 8005eea:	2300      	movs	r3, #0
 8005eec:	220a      	movs	r2, #10
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 f8dc 	bl	80060ac <__multadd>
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	e7f1      	b.n	8005edc <_dtoa_r+0xb04>
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	9d01      	ldr	r5, [sp, #4]
 8005efe:	ee18 0a10 	vmov	r0, s16
 8005f02:	4631      	mov	r1, r6
 8005f04:	f7ff f9dc 	bl	80052c0 <quorem>
 8005f08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	f805 ab01 	strb.w	sl, [r5], #1
 8005f12:	1aea      	subs	r2, r5, r3
 8005f14:	9b02      	ldr	r3, [sp, #8]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	dd09      	ble.n	8005f2e <_dtoa_r+0xb56>
 8005f1a:	ee18 1a10 	vmov	r1, s16
 8005f1e:	2300      	movs	r3, #0
 8005f20:	220a      	movs	r2, #10
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f8c2 	bl	80060ac <__multadd>
 8005f28:	ee08 0a10 	vmov	s16, r0
 8005f2c:	e7e7      	b.n	8005efe <_dtoa_r+0xb26>
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfc8      	it	gt
 8005f34:	461d      	movgt	r5, r3
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	bfd8      	it	le
 8005f3a:	2501      	movle	r5, #1
 8005f3c:	441d      	add	r5, r3
 8005f3e:	f04f 0800 	mov.w	r8, #0
 8005f42:	ee18 1a10 	vmov	r1, s16
 8005f46:	2201      	movs	r2, #1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fa5f 	bl	800640c <__lshift>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	ee08 0a10 	vmov	s16, r0
 8005f54:	f000 faca 	bl	80064ec <__mcmp>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	dc91      	bgt.n	8005e80 <_dtoa_r+0xaa8>
 8005f5c:	d102      	bne.n	8005f64 <_dtoa_r+0xb8c>
 8005f5e:	f01a 0f01 	tst.w	sl, #1
 8005f62:	d18d      	bne.n	8005e80 <_dtoa_r+0xaa8>
 8005f64:	462b      	mov	r3, r5
 8005f66:	461d      	mov	r5, r3
 8005f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f6c:	2a30      	cmp	r2, #48	; 0x30
 8005f6e:	d0fa      	beq.n	8005f66 <_dtoa_r+0xb8e>
 8005f70:	e6d7      	b.n	8005d22 <_dtoa_r+0x94a>
 8005f72:	9a01      	ldr	r2, [sp, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d184      	bne.n	8005e82 <_dtoa_r+0xaaa>
 8005f78:	9b00      	ldr	r3, [sp, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	2331      	movs	r3, #49	; 0x31
 8005f80:	7013      	strb	r3, [r2, #0]
 8005f82:	e6ce      	b.n	8005d22 <_dtoa_r+0x94a>
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <_dtoa_r+0xbd4>)
 8005f86:	f7ff ba95 	b.w	80054b4 <_dtoa_r+0xdc>
 8005f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f47f aa6e 	bne.w	800546e <_dtoa_r+0x96>
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <_dtoa_r+0xbd8>)
 8005f94:	f7ff ba8e 	b.w	80054b4 <_dtoa_r+0xdc>
 8005f98:	9b02      	ldr	r3, [sp, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dcae      	bgt.n	8005efc <_dtoa_r+0xb24>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	f73f aea8 	bgt.w	8005cf6 <_dtoa_r+0x91e>
 8005fa6:	e7a9      	b.n	8005efc <_dtoa_r+0xb24>
 8005fa8:	08008bf7 	.word	0x08008bf7
 8005fac:	08008b54 	.word	0x08008b54
 8005fb0:	08008b78 	.word	0x08008b78

08005fb4 <_localeconv_r>:
 8005fb4:	4800      	ldr	r0, [pc, #0]	; (8005fb8 <_localeconv_r+0x4>)
 8005fb6:	4770      	bx	lr
 8005fb8:	20000168 	.word	0x20000168

08005fbc <malloc>:
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <malloc+0xc>)
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	f000 bc17 	b.w	80067f4 <_malloc_r>
 8005fc6:	bf00      	nop
 8005fc8:	20000014 	.word	0x20000014

08005fcc <memcpy>:
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd4:	d100      	bne.n	8005fd8 <memcpy+0xc>
 8005fd6:	4770      	bx	lr
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d1f9      	bne.n	8005fda <memcpy+0xe>
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <_Balloc>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	b976      	cbnz	r6, 8006010 <_Balloc+0x28>
 8005ff2:	2010      	movs	r0, #16
 8005ff4:	f7ff ffe2 	bl	8005fbc <malloc>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8005ffc:	b920      	cbnz	r0, 8006008 <_Balloc+0x20>
 8005ffe:	4b18      	ldr	r3, [pc, #96]	; (8006060 <_Balloc+0x78>)
 8006000:	4818      	ldr	r0, [pc, #96]	; (8006064 <_Balloc+0x7c>)
 8006002:	2166      	movs	r1, #102	; 0x66
 8006004:	f000 fc7a 	bl	80068fc <__assert_func>
 8006008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800600c:	6006      	str	r6, [r0, #0]
 800600e:	60c6      	str	r6, [r0, #12]
 8006010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006012:	68f3      	ldr	r3, [r6, #12]
 8006014:	b183      	cbz	r3, 8006038 <_Balloc+0x50>
 8006016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800601e:	b9b8      	cbnz	r0, 8006050 <_Balloc+0x68>
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f605 	lsl.w	r6, r1, r5
 8006026:	1d72      	adds	r2, r6, #5
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fb60 	bl	80066f0 <_calloc_r>
 8006030:	b160      	cbz	r0, 800604c <_Balloc+0x64>
 8006032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006036:	e00e      	b.n	8006056 <_Balloc+0x6e>
 8006038:	2221      	movs	r2, #33	; 0x21
 800603a:	2104      	movs	r1, #4
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fb57 	bl	80066f0 <_calloc_r>
 8006042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006044:	60f0      	str	r0, [r6, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e4      	bne.n	8006016 <_Balloc+0x2e>
 800604c:	2000      	movs	r0, #0
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	6802      	ldr	r2, [r0, #0]
 8006052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006056:	2300      	movs	r3, #0
 8006058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800605c:	e7f7      	b.n	800604e <_Balloc+0x66>
 800605e:	bf00      	nop
 8006060:	08008b85 	.word	0x08008b85
 8006064:	08008c08 	.word	0x08008c08

08006068 <_Bfree>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b976      	cbnz	r6, 8006090 <_Bfree+0x28>
 8006072:	2010      	movs	r0, #16
 8006074:	f7ff ffa2 	bl	8005fbc <malloc>
 8006078:	4602      	mov	r2, r0
 800607a:	6268      	str	r0, [r5, #36]	; 0x24
 800607c:	b920      	cbnz	r0, 8006088 <_Bfree+0x20>
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <_Bfree+0x3c>)
 8006080:	4809      	ldr	r0, [pc, #36]	; (80060a8 <_Bfree+0x40>)
 8006082:	218a      	movs	r1, #138	; 0x8a
 8006084:	f000 fc3a 	bl	80068fc <__assert_func>
 8006088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800608c:	6006      	str	r6, [r0, #0]
 800608e:	60c6      	str	r6, [r0, #12]
 8006090:	b13c      	cbz	r4, 80060a2 <_Bfree+0x3a>
 8006092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006094:	6862      	ldr	r2, [r4, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800609c:	6021      	str	r1, [r4, #0]
 800609e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	08008b85 	.word	0x08008b85
 80060a8:	08008c08 	.word	0x08008c08

080060ac <__multadd>:
 80060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	690d      	ldr	r5, [r1, #16]
 80060b2:	4607      	mov	r7, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	461e      	mov	r6, r3
 80060b8:	f101 0c14 	add.w	ip, r1, #20
 80060bc:	2000      	movs	r0, #0
 80060be:	f8dc 3000 	ldr.w	r3, [ip]
 80060c2:	b299      	uxth	r1, r3
 80060c4:	fb02 6101 	mla	r1, r2, r1, r6
 80060c8:	0c1e      	lsrs	r6, r3, #16
 80060ca:	0c0b      	lsrs	r3, r1, #16
 80060cc:	fb02 3306 	mla	r3, r2, r6, r3
 80060d0:	b289      	uxth	r1, r1
 80060d2:	3001      	adds	r0, #1
 80060d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060d8:	4285      	cmp	r5, r0
 80060da:	f84c 1b04 	str.w	r1, [ip], #4
 80060de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060e2:	dcec      	bgt.n	80060be <__multadd+0x12>
 80060e4:	b30e      	cbz	r6, 800612a <__multadd+0x7e>
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dc19      	bgt.n	8006120 <__multadd+0x74>
 80060ec:	6861      	ldr	r1, [r4, #4]
 80060ee:	4638      	mov	r0, r7
 80060f0:	3101      	adds	r1, #1
 80060f2:	f7ff ff79 	bl	8005fe8 <_Balloc>
 80060f6:	4680      	mov	r8, r0
 80060f8:	b928      	cbnz	r0, 8006106 <__multadd+0x5a>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <__multadd+0x84>)
 80060fe:	480d      	ldr	r0, [pc, #52]	; (8006134 <__multadd+0x88>)
 8006100:	21b5      	movs	r1, #181	; 0xb5
 8006102:	f000 fbfb 	bl	80068fc <__assert_func>
 8006106:	6922      	ldr	r2, [r4, #16]
 8006108:	3202      	adds	r2, #2
 800610a:	f104 010c 	add.w	r1, r4, #12
 800610e:	0092      	lsls	r2, r2, #2
 8006110:	300c      	adds	r0, #12
 8006112:	f7ff ff5b 	bl	8005fcc <memcpy>
 8006116:	4621      	mov	r1, r4
 8006118:	4638      	mov	r0, r7
 800611a:	f7ff ffa5 	bl	8006068 <_Bfree>
 800611e:	4644      	mov	r4, r8
 8006120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006124:	3501      	adds	r5, #1
 8006126:	615e      	str	r6, [r3, #20]
 8006128:	6125      	str	r5, [r4, #16]
 800612a:	4620      	mov	r0, r4
 800612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006130:	08008bf7 	.word	0x08008bf7
 8006134:	08008c08 	.word	0x08008c08

08006138 <__hi0bits>:
 8006138:	0c03      	lsrs	r3, r0, #16
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	b9d3      	cbnz	r3, 8006174 <__hi0bits+0x3c>
 800613e:	0400      	lsls	r0, r0, #16
 8006140:	2310      	movs	r3, #16
 8006142:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006146:	bf04      	itt	eq
 8006148:	0200      	lsleq	r0, r0, #8
 800614a:	3308      	addeq	r3, #8
 800614c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006150:	bf04      	itt	eq
 8006152:	0100      	lsleq	r0, r0, #4
 8006154:	3304      	addeq	r3, #4
 8006156:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800615a:	bf04      	itt	eq
 800615c:	0080      	lsleq	r0, r0, #2
 800615e:	3302      	addeq	r3, #2
 8006160:	2800      	cmp	r0, #0
 8006162:	db05      	blt.n	8006170 <__hi0bits+0x38>
 8006164:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006168:	f103 0301 	add.w	r3, r3, #1
 800616c:	bf08      	it	eq
 800616e:	2320      	moveq	r3, #32
 8006170:	4618      	mov	r0, r3
 8006172:	4770      	bx	lr
 8006174:	2300      	movs	r3, #0
 8006176:	e7e4      	b.n	8006142 <__hi0bits+0xa>

08006178 <__lo0bits>:
 8006178:	6803      	ldr	r3, [r0, #0]
 800617a:	f013 0207 	ands.w	r2, r3, #7
 800617e:	4601      	mov	r1, r0
 8006180:	d00b      	beq.n	800619a <__lo0bits+0x22>
 8006182:	07da      	lsls	r2, r3, #31
 8006184:	d423      	bmi.n	80061ce <__lo0bits+0x56>
 8006186:	0798      	lsls	r0, r3, #30
 8006188:	bf49      	itett	mi
 800618a:	085b      	lsrmi	r3, r3, #1
 800618c:	089b      	lsrpl	r3, r3, #2
 800618e:	2001      	movmi	r0, #1
 8006190:	600b      	strmi	r3, [r1, #0]
 8006192:	bf5c      	itt	pl
 8006194:	600b      	strpl	r3, [r1, #0]
 8006196:	2002      	movpl	r0, #2
 8006198:	4770      	bx	lr
 800619a:	b298      	uxth	r0, r3
 800619c:	b9a8      	cbnz	r0, 80061ca <__lo0bits+0x52>
 800619e:	0c1b      	lsrs	r3, r3, #16
 80061a0:	2010      	movs	r0, #16
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	b90a      	cbnz	r2, 80061aa <__lo0bits+0x32>
 80061a6:	3008      	adds	r0, #8
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	071a      	lsls	r2, r3, #28
 80061ac:	bf04      	itt	eq
 80061ae:	091b      	lsreq	r3, r3, #4
 80061b0:	3004      	addeq	r0, #4
 80061b2:	079a      	lsls	r2, r3, #30
 80061b4:	bf04      	itt	eq
 80061b6:	089b      	lsreq	r3, r3, #2
 80061b8:	3002      	addeq	r0, #2
 80061ba:	07da      	lsls	r2, r3, #31
 80061bc:	d403      	bmi.n	80061c6 <__lo0bits+0x4e>
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	f100 0001 	add.w	r0, r0, #1
 80061c4:	d005      	beq.n	80061d2 <__lo0bits+0x5a>
 80061c6:	600b      	str	r3, [r1, #0]
 80061c8:	4770      	bx	lr
 80061ca:	4610      	mov	r0, r2
 80061cc:	e7e9      	b.n	80061a2 <__lo0bits+0x2a>
 80061ce:	2000      	movs	r0, #0
 80061d0:	4770      	bx	lr
 80061d2:	2020      	movs	r0, #32
 80061d4:	4770      	bx	lr
	...

080061d8 <__i2b>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	460c      	mov	r4, r1
 80061dc:	2101      	movs	r1, #1
 80061de:	f7ff ff03 	bl	8005fe8 <_Balloc>
 80061e2:	4602      	mov	r2, r0
 80061e4:	b928      	cbnz	r0, 80061f2 <__i2b+0x1a>
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <__i2b+0x24>)
 80061e8:	4805      	ldr	r0, [pc, #20]	; (8006200 <__i2b+0x28>)
 80061ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ee:	f000 fb85 	bl	80068fc <__assert_func>
 80061f2:	2301      	movs	r3, #1
 80061f4:	6144      	str	r4, [r0, #20]
 80061f6:	6103      	str	r3, [r0, #16]
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	bf00      	nop
 80061fc:	08008bf7 	.word	0x08008bf7
 8006200:	08008c08 	.word	0x08008c08

08006204 <__multiply>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4691      	mov	r9, r2
 800620a:	690a      	ldr	r2, [r1, #16]
 800620c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006210:	429a      	cmp	r2, r3
 8006212:	bfb8      	it	lt
 8006214:	460b      	movlt	r3, r1
 8006216:	460c      	mov	r4, r1
 8006218:	bfbc      	itt	lt
 800621a:	464c      	movlt	r4, r9
 800621c:	4699      	movlt	r9, r3
 800621e:	6927      	ldr	r7, [r4, #16]
 8006220:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006224:	68a3      	ldr	r3, [r4, #8]
 8006226:	6861      	ldr	r1, [r4, #4]
 8006228:	eb07 060a 	add.w	r6, r7, sl
 800622c:	42b3      	cmp	r3, r6
 800622e:	b085      	sub	sp, #20
 8006230:	bfb8      	it	lt
 8006232:	3101      	addlt	r1, #1
 8006234:	f7ff fed8 	bl	8005fe8 <_Balloc>
 8006238:	b930      	cbnz	r0, 8006248 <__multiply+0x44>
 800623a:	4602      	mov	r2, r0
 800623c:	4b44      	ldr	r3, [pc, #272]	; (8006350 <__multiply+0x14c>)
 800623e:	4845      	ldr	r0, [pc, #276]	; (8006354 <__multiply+0x150>)
 8006240:	f240 115d 	movw	r1, #349	; 0x15d
 8006244:	f000 fb5a 	bl	80068fc <__assert_func>
 8006248:	f100 0514 	add.w	r5, r0, #20
 800624c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006250:	462b      	mov	r3, r5
 8006252:	2200      	movs	r2, #0
 8006254:	4543      	cmp	r3, r8
 8006256:	d321      	bcc.n	800629c <__multiply+0x98>
 8006258:	f104 0314 	add.w	r3, r4, #20
 800625c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006260:	f109 0314 	add.w	r3, r9, #20
 8006264:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006268:	9202      	str	r2, [sp, #8]
 800626a:	1b3a      	subs	r2, r7, r4
 800626c:	3a15      	subs	r2, #21
 800626e:	f022 0203 	bic.w	r2, r2, #3
 8006272:	3204      	adds	r2, #4
 8006274:	f104 0115 	add.w	r1, r4, #21
 8006278:	428f      	cmp	r7, r1
 800627a:	bf38      	it	cc
 800627c:	2204      	movcc	r2, #4
 800627e:	9201      	str	r2, [sp, #4]
 8006280:	9a02      	ldr	r2, [sp, #8]
 8006282:	9303      	str	r3, [sp, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d80c      	bhi.n	80062a2 <__multiply+0x9e>
 8006288:	2e00      	cmp	r6, #0
 800628a:	dd03      	ble.n	8006294 <__multiply+0x90>
 800628c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05a      	beq.n	800634a <__multiply+0x146>
 8006294:	6106      	str	r6, [r0, #16]
 8006296:	b005      	add	sp, #20
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	f843 2b04 	str.w	r2, [r3], #4
 80062a0:	e7d8      	b.n	8006254 <__multiply+0x50>
 80062a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80062a6:	f1ba 0f00 	cmp.w	sl, #0
 80062aa:	d024      	beq.n	80062f6 <__multiply+0xf2>
 80062ac:	f104 0e14 	add.w	lr, r4, #20
 80062b0:	46a9      	mov	r9, r5
 80062b2:	f04f 0c00 	mov.w	ip, #0
 80062b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062ba:	f8d9 1000 	ldr.w	r1, [r9]
 80062be:	fa1f fb82 	uxth.w	fp, r2
 80062c2:	b289      	uxth	r1, r1
 80062c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80062c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80062cc:	f8d9 2000 	ldr.w	r2, [r9]
 80062d0:	4461      	add	r1, ip
 80062d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80062da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062e4:	4577      	cmp	r7, lr
 80062e6:	f849 1b04 	str.w	r1, [r9], #4
 80062ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ee:	d8e2      	bhi.n	80062b6 <__multiply+0xb2>
 80062f0:	9a01      	ldr	r2, [sp, #4]
 80062f2:	f845 c002 	str.w	ip, [r5, r2]
 80062f6:	9a03      	ldr	r2, [sp, #12]
 80062f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062fc:	3304      	adds	r3, #4
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	d020      	beq.n	8006346 <__multiply+0x142>
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	f104 0c14 	add.w	ip, r4, #20
 800630a:	46ae      	mov	lr, r5
 800630c:	f04f 0a00 	mov.w	sl, #0
 8006310:	f8bc b000 	ldrh.w	fp, [ip]
 8006314:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006318:	fb09 220b 	mla	r2, r9, fp, r2
 800631c:	4492      	add	sl, r2
 800631e:	b289      	uxth	r1, r1
 8006320:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006324:	f84e 1b04 	str.w	r1, [lr], #4
 8006328:	f85c 2b04 	ldr.w	r2, [ip], #4
 800632c:	f8be 1000 	ldrh.w	r1, [lr]
 8006330:	0c12      	lsrs	r2, r2, #16
 8006332:	fb09 1102 	mla	r1, r9, r2, r1
 8006336:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800633a:	4567      	cmp	r7, ip
 800633c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006340:	d8e6      	bhi.n	8006310 <__multiply+0x10c>
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	50a9      	str	r1, [r5, r2]
 8006346:	3504      	adds	r5, #4
 8006348:	e79a      	b.n	8006280 <__multiply+0x7c>
 800634a:	3e01      	subs	r6, #1
 800634c:	e79c      	b.n	8006288 <__multiply+0x84>
 800634e:	bf00      	nop
 8006350:	08008bf7 	.word	0x08008bf7
 8006354:	08008c08 	.word	0x08008c08

08006358 <__pow5mult>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	4615      	mov	r5, r2
 800635e:	f012 0203 	ands.w	r2, r2, #3
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	d007      	beq.n	8006378 <__pow5mult+0x20>
 8006368:	4c25      	ldr	r4, [pc, #148]	; (8006400 <__pow5mult+0xa8>)
 800636a:	3a01      	subs	r2, #1
 800636c:	2300      	movs	r3, #0
 800636e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006372:	f7ff fe9b 	bl	80060ac <__multadd>
 8006376:	4607      	mov	r7, r0
 8006378:	10ad      	asrs	r5, r5, #2
 800637a:	d03d      	beq.n	80063f8 <__pow5mult+0xa0>
 800637c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800637e:	b97c      	cbnz	r4, 80063a0 <__pow5mult+0x48>
 8006380:	2010      	movs	r0, #16
 8006382:	f7ff fe1b 	bl	8005fbc <malloc>
 8006386:	4602      	mov	r2, r0
 8006388:	6270      	str	r0, [r6, #36]	; 0x24
 800638a:	b928      	cbnz	r0, 8006398 <__pow5mult+0x40>
 800638c:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <__pow5mult+0xac>)
 800638e:	481e      	ldr	r0, [pc, #120]	; (8006408 <__pow5mult+0xb0>)
 8006390:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006394:	f000 fab2 	bl	80068fc <__assert_func>
 8006398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800639c:	6004      	str	r4, [r0, #0]
 800639e:	60c4      	str	r4, [r0, #12]
 80063a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063a8:	b94c      	cbnz	r4, 80063be <__pow5mult+0x66>
 80063aa:	f240 2171 	movw	r1, #625	; 0x271
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ff12 	bl	80061d8 <__i2b>
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80063ba:	4604      	mov	r4, r0
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	f04f 0900 	mov.w	r9, #0
 80063c2:	07eb      	lsls	r3, r5, #31
 80063c4:	d50a      	bpl.n	80063dc <__pow5mult+0x84>
 80063c6:	4639      	mov	r1, r7
 80063c8:	4622      	mov	r2, r4
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff1a 	bl	8006204 <__multiply>
 80063d0:	4639      	mov	r1, r7
 80063d2:	4680      	mov	r8, r0
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff fe47 	bl	8006068 <_Bfree>
 80063da:	4647      	mov	r7, r8
 80063dc:	106d      	asrs	r5, r5, #1
 80063de:	d00b      	beq.n	80063f8 <__pow5mult+0xa0>
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	b938      	cbnz	r0, 80063f4 <__pow5mult+0x9c>
 80063e4:	4622      	mov	r2, r4
 80063e6:	4621      	mov	r1, r4
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ff0b 	bl	8006204 <__multiply>
 80063ee:	6020      	str	r0, [r4, #0]
 80063f0:	f8c0 9000 	str.w	r9, [r0]
 80063f4:	4604      	mov	r4, r0
 80063f6:	e7e4      	b.n	80063c2 <__pow5mult+0x6a>
 80063f8:	4638      	mov	r0, r7
 80063fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fe:	bf00      	nop
 8006400:	08008d58 	.word	0x08008d58
 8006404:	08008b85 	.word	0x08008b85
 8006408:	08008c08 	.word	0x08008c08

0800640c <__lshift>:
 800640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	6849      	ldr	r1, [r1, #4]
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	4607      	mov	r7, r0
 800641e:	4691      	mov	r9, r2
 8006420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006424:	f108 0601 	add.w	r6, r8, #1
 8006428:	42b3      	cmp	r3, r6
 800642a:	db0b      	blt.n	8006444 <__lshift+0x38>
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff fddb 	bl	8005fe8 <_Balloc>
 8006432:	4605      	mov	r5, r0
 8006434:	b948      	cbnz	r0, 800644a <__lshift+0x3e>
 8006436:	4602      	mov	r2, r0
 8006438:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <__lshift+0xd8>)
 800643a:	482b      	ldr	r0, [pc, #172]	; (80064e8 <__lshift+0xdc>)
 800643c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006440:	f000 fa5c 	bl	80068fc <__assert_func>
 8006444:	3101      	adds	r1, #1
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	e7ee      	b.n	8006428 <__lshift+0x1c>
 800644a:	2300      	movs	r3, #0
 800644c:	f100 0114 	add.w	r1, r0, #20
 8006450:	f100 0210 	add.w	r2, r0, #16
 8006454:	4618      	mov	r0, r3
 8006456:	4553      	cmp	r3, sl
 8006458:	db37      	blt.n	80064ca <__lshift+0xbe>
 800645a:	6920      	ldr	r0, [r4, #16]
 800645c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006460:	f104 0314 	add.w	r3, r4, #20
 8006464:	f019 091f 	ands.w	r9, r9, #31
 8006468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800646c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006470:	d02f      	beq.n	80064d2 <__lshift+0xc6>
 8006472:	f1c9 0e20 	rsb	lr, r9, #32
 8006476:	468a      	mov	sl, r1
 8006478:	f04f 0c00 	mov.w	ip, #0
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	fa02 f209 	lsl.w	r2, r2, r9
 8006482:	ea42 020c 	orr.w	r2, r2, ip
 8006486:	f84a 2b04 	str.w	r2, [sl], #4
 800648a:	f853 2b04 	ldr.w	r2, [r3], #4
 800648e:	4298      	cmp	r0, r3
 8006490:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006494:	d8f2      	bhi.n	800647c <__lshift+0x70>
 8006496:	1b03      	subs	r3, r0, r4
 8006498:	3b15      	subs	r3, #21
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	3304      	adds	r3, #4
 80064a0:	f104 0215 	add.w	r2, r4, #21
 80064a4:	4290      	cmp	r0, r2
 80064a6:	bf38      	it	cc
 80064a8:	2304      	movcc	r3, #4
 80064aa:	f841 c003 	str.w	ip, [r1, r3]
 80064ae:	f1bc 0f00 	cmp.w	ip, #0
 80064b2:	d001      	beq.n	80064b8 <__lshift+0xac>
 80064b4:	f108 0602 	add.w	r6, r8, #2
 80064b8:	3e01      	subs	r6, #1
 80064ba:	4638      	mov	r0, r7
 80064bc:	612e      	str	r6, [r5, #16]
 80064be:	4621      	mov	r1, r4
 80064c0:	f7ff fdd2 	bl	8006068 <_Bfree>
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ce:	3301      	adds	r3, #1
 80064d0:	e7c1      	b.n	8006456 <__lshift+0x4a>
 80064d2:	3904      	subs	r1, #4
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80064dc:	4298      	cmp	r0, r3
 80064de:	d8f9      	bhi.n	80064d4 <__lshift+0xc8>
 80064e0:	e7ea      	b.n	80064b8 <__lshift+0xac>
 80064e2:	bf00      	nop
 80064e4:	08008bf7 	.word	0x08008bf7
 80064e8:	08008c08 	.word	0x08008c08

080064ec <__mcmp>:
 80064ec:	b530      	push	{r4, r5, lr}
 80064ee:	6902      	ldr	r2, [r0, #16]
 80064f0:	690c      	ldr	r4, [r1, #16]
 80064f2:	1b12      	subs	r2, r2, r4
 80064f4:	d10e      	bne.n	8006514 <__mcmp+0x28>
 80064f6:	f100 0314 	add.w	r3, r0, #20
 80064fa:	3114      	adds	r1, #20
 80064fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006500:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006504:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006508:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800650c:	42a5      	cmp	r5, r4
 800650e:	d003      	beq.n	8006518 <__mcmp+0x2c>
 8006510:	d305      	bcc.n	800651e <__mcmp+0x32>
 8006512:	2201      	movs	r2, #1
 8006514:	4610      	mov	r0, r2
 8006516:	bd30      	pop	{r4, r5, pc}
 8006518:	4283      	cmp	r3, r0
 800651a:	d3f3      	bcc.n	8006504 <__mcmp+0x18>
 800651c:	e7fa      	b.n	8006514 <__mcmp+0x28>
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	e7f7      	b.n	8006514 <__mcmp+0x28>

08006524 <__mdiff>:
 8006524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	4606      	mov	r6, r0
 800652c:	4611      	mov	r1, r2
 800652e:	4620      	mov	r0, r4
 8006530:	4690      	mov	r8, r2
 8006532:	f7ff ffdb 	bl	80064ec <__mcmp>
 8006536:	1e05      	subs	r5, r0, #0
 8006538:	d110      	bne.n	800655c <__mdiff+0x38>
 800653a:	4629      	mov	r1, r5
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fd53 	bl	8005fe8 <_Balloc>
 8006542:	b930      	cbnz	r0, 8006552 <__mdiff+0x2e>
 8006544:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <__mdiff+0x10c>)
 8006546:	4602      	mov	r2, r0
 8006548:	f240 2132 	movw	r1, #562	; 0x232
 800654c:	4839      	ldr	r0, [pc, #228]	; (8006634 <__mdiff+0x110>)
 800654e:	f000 f9d5 	bl	80068fc <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	bfa4      	itt	ge
 800655e:	4643      	movge	r3, r8
 8006560:	46a0      	movge	r8, r4
 8006562:	4630      	mov	r0, r6
 8006564:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006568:	bfa6      	itte	ge
 800656a:	461c      	movge	r4, r3
 800656c:	2500      	movge	r5, #0
 800656e:	2501      	movlt	r5, #1
 8006570:	f7ff fd3a 	bl	8005fe8 <_Balloc>
 8006574:	b920      	cbnz	r0, 8006580 <__mdiff+0x5c>
 8006576:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <__mdiff+0x10c>)
 8006578:	4602      	mov	r2, r0
 800657a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800657e:	e7e5      	b.n	800654c <__mdiff+0x28>
 8006580:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006584:	6926      	ldr	r6, [r4, #16]
 8006586:	60c5      	str	r5, [r0, #12]
 8006588:	f104 0914 	add.w	r9, r4, #20
 800658c:	f108 0514 	add.w	r5, r8, #20
 8006590:	f100 0e14 	add.w	lr, r0, #20
 8006594:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006598:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800659c:	f108 0210 	add.w	r2, r8, #16
 80065a0:	46f2      	mov	sl, lr
 80065a2:	2100      	movs	r1, #0
 80065a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80065a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80065ac:	fa1f f883 	uxth.w	r8, r3
 80065b0:	fa11 f18b 	uxtah	r1, r1, fp
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	eba1 0808 	sub.w	r8, r1, r8
 80065ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065c2:	fa1f f888 	uxth.w	r8, r8
 80065c6:	1419      	asrs	r1, r3, #16
 80065c8:	454e      	cmp	r6, r9
 80065ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80065ce:	f84a 3b04 	str.w	r3, [sl], #4
 80065d2:	d8e7      	bhi.n	80065a4 <__mdiff+0x80>
 80065d4:	1b33      	subs	r3, r6, r4
 80065d6:	3b15      	subs	r3, #21
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	3304      	adds	r3, #4
 80065de:	3415      	adds	r4, #21
 80065e0:	42a6      	cmp	r6, r4
 80065e2:	bf38      	it	cc
 80065e4:	2304      	movcc	r3, #4
 80065e6:	441d      	add	r5, r3
 80065e8:	4473      	add	r3, lr
 80065ea:	469e      	mov	lr, r3
 80065ec:	462e      	mov	r6, r5
 80065ee:	4566      	cmp	r6, ip
 80065f0:	d30e      	bcc.n	8006610 <__mdiff+0xec>
 80065f2:	f10c 0203 	add.w	r2, ip, #3
 80065f6:	1b52      	subs	r2, r2, r5
 80065f8:	f022 0203 	bic.w	r2, r2, #3
 80065fc:	3d03      	subs	r5, #3
 80065fe:	45ac      	cmp	ip, r5
 8006600:	bf38      	it	cc
 8006602:	2200      	movcc	r2, #0
 8006604:	441a      	add	r2, r3
 8006606:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800660a:	b17b      	cbz	r3, 800662c <__mdiff+0x108>
 800660c:	6107      	str	r7, [r0, #16]
 800660e:	e7a3      	b.n	8006558 <__mdiff+0x34>
 8006610:	f856 8b04 	ldr.w	r8, [r6], #4
 8006614:	fa11 f288 	uxtah	r2, r1, r8
 8006618:	1414      	asrs	r4, r2, #16
 800661a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800661e:	b292      	uxth	r2, r2
 8006620:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006624:	f84e 2b04 	str.w	r2, [lr], #4
 8006628:	1421      	asrs	r1, r4, #16
 800662a:	e7e0      	b.n	80065ee <__mdiff+0xca>
 800662c:	3f01      	subs	r7, #1
 800662e:	e7ea      	b.n	8006606 <__mdiff+0xe2>
 8006630:	08008bf7 	.word	0x08008bf7
 8006634:	08008c08 	.word	0x08008c08

08006638 <__d2b>:
 8006638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800663c:	4689      	mov	r9, r1
 800663e:	2101      	movs	r1, #1
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	4690      	mov	r8, r2
 8006646:	f7ff fccf 	bl	8005fe8 <_Balloc>
 800664a:	4604      	mov	r4, r0
 800664c:	b930      	cbnz	r0, 800665c <__d2b+0x24>
 800664e:	4602      	mov	r2, r0
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <__d2b+0xb0>)
 8006652:	4826      	ldr	r0, [pc, #152]	; (80066ec <__d2b+0xb4>)
 8006654:	f240 310a 	movw	r1, #778	; 0x30a
 8006658:	f000 f950 	bl	80068fc <__assert_func>
 800665c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006664:	bb35      	cbnz	r5, 80066b4 <__d2b+0x7c>
 8006666:	2e00      	cmp	r6, #0
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	d028      	beq.n	80066be <__d2b+0x86>
 800666c:	4668      	mov	r0, sp
 800666e:	9600      	str	r6, [sp, #0]
 8006670:	f7ff fd82 	bl	8006178 <__lo0bits>
 8006674:	9900      	ldr	r1, [sp, #0]
 8006676:	b300      	cbz	r0, 80066ba <__d2b+0x82>
 8006678:	9a01      	ldr	r2, [sp, #4]
 800667a:	f1c0 0320 	rsb	r3, r0, #32
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	430b      	orrs	r3, r1
 8006684:	40c2      	lsrs	r2, r0
 8006686:	6163      	str	r3, [r4, #20]
 8006688:	9201      	str	r2, [sp, #4]
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	61a3      	str	r3, [r4, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf14      	ite	ne
 8006692:	2202      	movne	r2, #2
 8006694:	2201      	moveq	r2, #1
 8006696:	6122      	str	r2, [r4, #16]
 8006698:	b1d5      	cbz	r5, 80066d0 <__d2b+0x98>
 800669a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800669e:	4405      	add	r5, r0
 80066a0:	f8c9 5000 	str.w	r5, [r9]
 80066a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066a8:	f8c8 0000 	str.w	r0, [r8]
 80066ac:	4620      	mov	r0, r4
 80066ae:	b003      	add	sp, #12
 80066b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b8:	e7d5      	b.n	8006666 <__d2b+0x2e>
 80066ba:	6161      	str	r1, [r4, #20]
 80066bc:	e7e5      	b.n	800668a <__d2b+0x52>
 80066be:	a801      	add	r0, sp, #4
 80066c0:	f7ff fd5a 	bl	8006178 <__lo0bits>
 80066c4:	9b01      	ldr	r3, [sp, #4]
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	2201      	movs	r2, #1
 80066ca:	6122      	str	r2, [r4, #16]
 80066cc:	3020      	adds	r0, #32
 80066ce:	e7e3      	b.n	8006698 <__d2b+0x60>
 80066d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80066d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066d8:	f8c9 0000 	str.w	r0, [r9]
 80066dc:	6918      	ldr	r0, [r3, #16]
 80066de:	f7ff fd2b 	bl	8006138 <__hi0bits>
 80066e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80066e6:	e7df      	b.n	80066a8 <__d2b+0x70>
 80066e8:	08008bf7 	.word	0x08008bf7
 80066ec:	08008c08 	.word	0x08008c08

080066f0 <_calloc_r>:
 80066f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f2:	fba1 2402 	umull	r2, r4, r1, r2
 80066f6:	b94c      	cbnz	r4, 800670c <_calloc_r+0x1c>
 80066f8:	4611      	mov	r1, r2
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	f000 f87a 	bl	80067f4 <_malloc_r>
 8006700:	9a01      	ldr	r2, [sp, #4]
 8006702:	4605      	mov	r5, r0
 8006704:	b930      	cbnz	r0, 8006714 <_calloc_r+0x24>
 8006706:	4628      	mov	r0, r5
 8006708:	b003      	add	sp, #12
 800670a:	bd30      	pop	{r4, r5, pc}
 800670c:	220c      	movs	r2, #12
 800670e:	6002      	str	r2, [r0, #0]
 8006710:	2500      	movs	r5, #0
 8006712:	e7f8      	b.n	8006706 <_calloc_r+0x16>
 8006714:	4621      	mov	r1, r4
 8006716:	f7fe f961 	bl	80049dc <memset>
 800671a:	e7f4      	b.n	8006706 <_calloc_r+0x16>

0800671c <_free_r>:
 800671c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800671e:	2900      	cmp	r1, #0
 8006720:	d044      	beq.n	80067ac <_free_r+0x90>
 8006722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006726:	9001      	str	r0, [sp, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f1a1 0404 	sub.w	r4, r1, #4
 800672e:	bfb8      	it	lt
 8006730:	18e4      	addlt	r4, r4, r3
 8006732:	f000 f925 	bl	8006980 <__malloc_lock>
 8006736:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <_free_r+0x94>)
 8006738:	9801      	ldr	r0, [sp, #4]
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	b933      	cbnz	r3, 800674c <_free_r+0x30>
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	6014      	str	r4, [r2, #0]
 8006742:	b003      	add	sp, #12
 8006744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006748:	f000 b920 	b.w	800698c <__malloc_unlock>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d908      	bls.n	8006762 <_free_r+0x46>
 8006750:	6825      	ldr	r5, [r4, #0]
 8006752:	1961      	adds	r1, r4, r5
 8006754:	428b      	cmp	r3, r1
 8006756:	bf01      	itttt	eq
 8006758:	6819      	ldreq	r1, [r3, #0]
 800675a:	685b      	ldreq	r3, [r3, #4]
 800675c:	1949      	addeq	r1, r1, r5
 800675e:	6021      	streq	r1, [r4, #0]
 8006760:	e7ed      	b.n	800673e <_free_r+0x22>
 8006762:	461a      	mov	r2, r3
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b10b      	cbz	r3, 800676c <_free_r+0x50>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d9fa      	bls.n	8006762 <_free_r+0x46>
 800676c:	6811      	ldr	r1, [r2, #0]
 800676e:	1855      	adds	r5, r2, r1
 8006770:	42a5      	cmp	r5, r4
 8006772:	d10b      	bne.n	800678c <_free_r+0x70>
 8006774:	6824      	ldr	r4, [r4, #0]
 8006776:	4421      	add	r1, r4
 8006778:	1854      	adds	r4, r2, r1
 800677a:	42a3      	cmp	r3, r4
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	d1e0      	bne.n	8006742 <_free_r+0x26>
 8006780:	681c      	ldr	r4, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	6053      	str	r3, [r2, #4]
 8006786:	4421      	add	r1, r4
 8006788:	6011      	str	r1, [r2, #0]
 800678a:	e7da      	b.n	8006742 <_free_r+0x26>
 800678c:	d902      	bls.n	8006794 <_free_r+0x78>
 800678e:	230c      	movs	r3, #12
 8006790:	6003      	str	r3, [r0, #0]
 8006792:	e7d6      	b.n	8006742 <_free_r+0x26>
 8006794:	6825      	ldr	r5, [r4, #0]
 8006796:	1961      	adds	r1, r4, r5
 8006798:	428b      	cmp	r3, r1
 800679a:	bf04      	itt	eq
 800679c:	6819      	ldreq	r1, [r3, #0]
 800679e:	685b      	ldreq	r3, [r3, #4]
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	bf04      	itt	eq
 80067a4:	1949      	addeq	r1, r1, r5
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	6054      	str	r4, [r2, #4]
 80067aa:	e7ca      	b.n	8006742 <_free_r+0x26>
 80067ac:	b003      	add	sp, #12
 80067ae:	bd30      	pop	{r4, r5, pc}
 80067b0:	20000380 	.word	0x20000380

080067b4 <sbrk_aligned>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4e0e      	ldr	r6, [pc, #56]	; (80067f0 <sbrk_aligned+0x3c>)
 80067b8:	460c      	mov	r4, r1
 80067ba:	6831      	ldr	r1, [r6, #0]
 80067bc:	4605      	mov	r5, r0
 80067be:	b911      	cbnz	r1, 80067c6 <sbrk_aligned+0x12>
 80067c0:	f000 f88c 	bl	80068dc <_sbrk_r>
 80067c4:	6030      	str	r0, [r6, #0]
 80067c6:	4621      	mov	r1, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	f000 f887 	bl	80068dc <_sbrk_r>
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	d00a      	beq.n	80067e8 <sbrk_aligned+0x34>
 80067d2:	1cc4      	adds	r4, r0, #3
 80067d4:	f024 0403 	bic.w	r4, r4, #3
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d007      	beq.n	80067ec <sbrk_aligned+0x38>
 80067dc:	1a21      	subs	r1, r4, r0
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f87c 	bl	80068dc <_sbrk_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d101      	bne.n	80067ec <sbrk_aligned+0x38>
 80067e8:	f04f 34ff 	mov.w	r4, #4294967295
 80067ec:	4620      	mov	r0, r4
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	20000384 	.word	0x20000384

080067f4 <_malloc_r>:
 80067f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f8:	1ccd      	adds	r5, r1, #3
 80067fa:	f025 0503 	bic.w	r5, r5, #3
 80067fe:	3508      	adds	r5, #8
 8006800:	2d0c      	cmp	r5, #12
 8006802:	bf38      	it	cc
 8006804:	250c      	movcc	r5, #12
 8006806:	2d00      	cmp	r5, #0
 8006808:	4607      	mov	r7, r0
 800680a:	db01      	blt.n	8006810 <_malloc_r+0x1c>
 800680c:	42a9      	cmp	r1, r5
 800680e:	d905      	bls.n	800681c <_malloc_r+0x28>
 8006810:	230c      	movs	r3, #12
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	2600      	movs	r6, #0
 8006816:	4630      	mov	r0, r6
 8006818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681c:	4e2e      	ldr	r6, [pc, #184]	; (80068d8 <_malloc_r+0xe4>)
 800681e:	f000 f8af 	bl	8006980 <__malloc_lock>
 8006822:	6833      	ldr	r3, [r6, #0]
 8006824:	461c      	mov	r4, r3
 8006826:	bb34      	cbnz	r4, 8006876 <_malloc_r+0x82>
 8006828:	4629      	mov	r1, r5
 800682a:	4638      	mov	r0, r7
 800682c:	f7ff ffc2 	bl	80067b4 <sbrk_aligned>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	4604      	mov	r4, r0
 8006834:	d14d      	bne.n	80068d2 <_malloc_r+0xde>
 8006836:	6834      	ldr	r4, [r6, #0]
 8006838:	4626      	mov	r6, r4
 800683a:	2e00      	cmp	r6, #0
 800683c:	d140      	bne.n	80068c0 <_malloc_r+0xcc>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	4631      	mov	r1, r6
 8006842:	4638      	mov	r0, r7
 8006844:	eb04 0803 	add.w	r8, r4, r3
 8006848:	f000 f848 	bl	80068dc <_sbrk_r>
 800684c:	4580      	cmp	r8, r0
 800684e:	d13a      	bne.n	80068c6 <_malloc_r+0xd2>
 8006850:	6821      	ldr	r1, [r4, #0]
 8006852:	3503      	adds	r5, #3
 8006854:	1a6d      	subs	r5, r5, r1
 8006856:	f025 0503 	bic.w	r5, r5, #3
 800685a:	3508      	adds	r5, #8
 800685c:	2d0c      	cmp	r5, #12
 800685e:	bf38      	it	cc
 8006860:	250c      	movcc	r5, #12
 8006862:	4629      	mov	r1, r5
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ffa5 	bl	80067b4 <sbrk_aligned>
 800686a:	3001      	adds	r0, #1
 800686c:	d02b      	beq.n	80068c6 <_malloc_r+0xd2>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	442b      	add	r3, r5
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	e00e      	b.n	8006894 <_malloc_r+0xa0>
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	1b52      	subs	r2, r2, r5
 800687a:	d41e      	bmi.n	80068ba <_malloc_r+0xc6>
 800687c:	2a0b      	cmp	r2, #11
 800687e:	d916      	bls.n	80068ae <_malloc_r+0xba>
 8006880:	1961      	adds	r1, r4, r5
 8006882:	42a3      	cmp	r3, r4
 8006884:	6025      	str	r5, [r4, #0]
 8006886:	bf18      	it	ne
 8006888:	6059      	strne	r1, [r3, #4]
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	bf08      	it	eq
 800688e:	6031      	streq	r1, [r6, #0]
 8006890:	5162      	str	r2, [r4, r5]
 8006892:	604b      	str	r3, [r1, #4]
 8006894:	4638      	mov	r0, r7
 8006896:	f104 060b 	add.w	r6, r4, #11
 800689a:	f000 f877 	bl	800698c <__malloc_unlock>
 800689e:	f026 0607 	bic.w	r6, r6, #7
 80068a2:	1d23      	adds	r3, r4, #4
 80068a4:	1af2      	subs	r2, r6, r3
 80068a6:	d0b6      	beq.n	8006816 <_malloc_r+0x22>
 80068a8:	1b9b      	subs	r3, r3, r6
 80068aa:	50a3      	str	r3, [r4, r2]
 80068ac:	e7b3      	b.n	8006816 <_malloc_r+0x22>
 80068ae:	6862      	ldr	r2, [r4, #4]
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	bf0c      	ite	eq
 80068b4:	6032      	streq	r2, [r6, #0]
 80068b6:	605a      	strne	r2, [r3, #4]
 80068b8:	e7ec      	b.n	8006894 <_malloc_r+0xa0>
 80068ba:	4623      	mov	r3, r4
 80068bc:	6864      	ldr	r4, [r4, #4]
 80068be:	e7b2      	b.n	8006826 <_malloc_r+0x32>
 80068c0:	4634      	mov	r4, r6
 80068c2:	6876      	ldr	r6, [r6, #4]
 80068c4:	e7b9      	b.n	800683a <_malloc_r+0x46>
 80068c6:	230c      	movs	r3, #12
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	4638      	mov	r0, r7
 80068cc:	f000 f85e 	bl	800698c <__malloc_unlock>
 80068d0:	e7a1      	b.n	8006816 <_malloc_r+0x22>
 80068d2:	6025      	str	r5, [r4, #0]
 80068d4:	e7de      	b.n	8006894 <_malloc_r+0xa0>
 80068d6:	bf00      	nop
 80068d8:	20000380 	.word	0x20000380

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	; (80068f8 <_sbrk_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fb f940 	bl	8001b6c <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20000388 	.word	0x20000388

080068fc <__assert_func>:
 80068fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068fe:	4614      	mov	r4, r2
 8006900:	461a      	mov	r2, r3
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <__assert_func+0x2c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4605      	mov	r5, r0
 8006908:	68d8      	ldr	r0, [r3, #12]
 800690a:	b14c      	cbz	r4, 8006920 <__assert_func+0x24>
 800690c:	4b07      	ldr	r3, [pc, #28]	; (800692c <__assert_func+0x30>)
 800690e:	9100      	str	r1, [sp, #0]
 8006910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006914:	4906      	ldr	r1, [pc, #24]	; (8006930 <__assert_func+0x34>)
 8006916:	462b      	mov	r3, r5
 8006918:	f000 f80e 	bl	8006938 <fiprintf>
 800691c:	f000 fa64 	bl	8006de8 <abort>
 8006920:	4b04      	ldr	r3, [pc, #16]	; (8006934 <__assert_func+0x38>)
 8006922:	461c      	mov	r4, r3
 8006924:	e7f3      	b.n	800690e <__assert_func+0x12>
 8006926:	bf00      	nop
 8006928:	20000014 	.word	0x20000014
 800692c:	08008d64 	.word	0x08008d64
 8006930:	08008d71 	.word	0x08008d71
 8006934:	08008d9f 	.word	0x08008d9f

08006938 <fiprintf>:
 8006938:	b40e      	push	{r1, r2, r3}
 800693a:	b503      	push	{r0, r1, lr}
 800693c:	4601      	mov	r1, r0
 800693e:	ab03      	add	r3, sp, #12
 8006940:	4805      	ldr	r0, [pc, #20]	; (8006958 <fiprintf+0x20>)
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	6800      	ldr	r0, [r0, #0]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f000 f84f 	bl	80069ec <_vfiprintf_r>
 800694e:	b002      	add	sp, #8
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	b003      	add	sp, #12
 8006956:	4770      	bx	lr
 8006958:	20000014 	.word	0x20000014

0800695c <__ascii_mbtowc>:
 800695c:	b082      	sub	sp, #8
 800695e:	b901      	cbnz	r1, 8006962 <__ascii_mbtowc+0x6>
 8006960:	a901      	add	r1, sp, #4
 8006962:	b142      	cbz	r2, 8006976 <__ascii_mbtowc+0x1a>
 8006964:	b14b      	cbz	r3, 800697a <__ascii_mbtowc+0x1e>
 8006966:	7813      	ldrb	r3, [r2, #0]
 8006968:	600b      	str	r3, [r1, #0]
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	1e10      	subs	r0, r2, #0
 800696e:	bf18      	it	ne
 8006970:	2001      	movne	r0, #1
 8006972:	b002      	add	sp, #8
 8006974:	4770      	bx	lr
 8006976:	4610      	mov	r0, r2
 8006978:	e7fb      	b.n	8006972 <__ascii_mbtowc+0x16>
 800697a:	f06f 0001 	mvn.w	r0, #1
 800697e:	e7f8      	b.n	8006972 <__ascii_mbtowc+0x16>

08006980 <__malloc_lock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_lock+0x8>)
 8006982:	f000 bbf1 	b.w	8007168 <__retarget_lock_acquire_recursive>
 8006986:	bf00      	nop
 8006988:	2000038c 	.word	0x2000038c

0800698c <__malloc_unlock>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__malloc_unlock+0x8>)
 800698e:	f000 bbec 	b.w	800716a <__retarget_lock_release_recursive>
 8006992:	bf00      	nop
 8006994:	2000038c 	.word	0x2000038c

08006998 <__sfputc_r>:
 8006998:	6893      	ldr	r3, [r2, #8]
 800699a:	3b01      	subs	r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	b410      	push	{r4}
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	da08      	bge.n	80069b6 <__sfputc_r+0x1e>
 80069a4:	6994      	ldr	r4, [r2, #24]
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	db01      	blt.n	80069ae <__sfputc_r+0x16>
 80069aa:	290a      	cmp	r1, #10
 80069ac:	d103      	bne.n	80069b6 <__sfputc_r+0x1e>
 80069ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b2:	f000 b94b 	b.w	8006c4c <__swbuf_r>
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	1c58      	adds	r0, r3, #1
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	7019      	strb	r1, [r3, #0]
 80069be:	4608      	mov	r0, r1
 80069c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <__sfputs_r>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	18d5      	adds	r5, r2, r3
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	d101      	bne.n	80069d8 <__sfputs_r+0x12>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e007      	b.n	80069e8 <__sfputs_r+0x22>
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	463a      	mov	r2, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffda 	bl	8006998 <__sfputc_r>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d1f3      	bne.n	80069d0 <__sfputs_r+0xa>
 80069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ec <_vfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	460d      	mov	r5, r1
 80069f2:	b09d      	sub	sp, #116	; 0x74
 80069f4:	4614      	mov	r4, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	4606      	mov	r6, r0
 80069fa:	b118      	cbz	r0, 8006a04 <_vfiprintf_r+0x18>
 80069fc:	6983      	ldr	r3, [r0, #24]
 80069fe:	b90b      	cbnz	r3, 8006a04 <_vfiprintf_r+0x18>
 8006a00:	f000 fb14 	bl	800702c <__sinit>
 8006a04:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <_vfiprintf_r+0x240>)
 8006a06:	429d      	cmp	r5, r3
 8006a08:	d11b      	bne.n	8006a42 <_vfiprintf_r+0x56>
 8006a0a:	6875      	ldr	r5, [r6, #4]
 8006a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f000 fba5 	bl	8007168 <__retarget_lock_acquire_recursive>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	d501      	bpl.n	8006a28 <_vfiprintf_r+0x3c>
 8006a24:	692b      	ldr	r3, [r5, #16]
 8006a26:	b9eb      	cbnz	r3, 8006a64 <_vfiprintf_r+0x78>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 f96e 	bl	8006d0c <__swsetup_r>
 8006a30:	b1c0      	cbz	r0, 8006a64 <_vfiprintf_r+0x78>
 8006a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a34:	07dc      	lsls	r4, r3, #31
 8006a36:	d50e      	bpl.n	8006a56 <_vfiprintf_r+0x6a>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b01d      	add	sp, #116	; 0x74
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <_vfiprintf_r+0x244>)
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d101      	bne.n	8006a4c <_vfiprintf_r+0x60>
 8006a48:	68b5      	ldr	r5, [r6, #8]
 8006a4a:	e7df      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a4c:	4b79      	ldr	r3, [pc, #484]	; (8006c34 <_vfiprintf_r+0x248>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf08      	it	eq
 8006a52:	68f5      	ldreq	r5, [r6, #12]
 8006a54:	e7da      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	0598      	lsls	r0, r3, #22
 8006a5a:	d4ed      	bmi.n	8006a38 <_vfiprintf_r+0x4c>
 8006a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5e:	f000 fb84 	bl	800716a <__retarget_lock_release_recursive>
 8006a62:	e7e9      	b.n	8006a38 <_vfiprintf_r+0x4c>
 8006a64:	2300      	movs	r3, #0
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a72:	2330      	movs	r3, #48	; 0x30
 8006a74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c38 <_vfiprintf_r+0x24c>
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	f04f 0901 	mov.w	r9, #1
 8006a80:	4623      	mov	r3, r4
 8006a82:	469a      	mov	sl, r3
 8006a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a88:	b10a      	cbz	r2, 8006a8e <_vfiprintf_r+0xa2>
 8006a8a:	2a25      	cmp	r2, #37	; 0x25
 8006a8c:	d1f9      	bne.n	8006a82 <_vfiprintf_r+0x96>
 8006a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a92:	d00b      	beq.n	8006aac <_vfiprintf_r+0xc0>
 8006a94:	465b      	mov	r3, fp
 8006a96:	4622      	mov	r2, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ff93 	bl	80069c6 <__sfputs_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f000 80aa 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa8:	445a      	add	r2, fp
 8006aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006aac:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80a2 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	f10a 0a01 	add.w	sl, sl, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006acc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ace:	4654      	mov	r4, sl
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	4858      	ldr	r0, [pc, #352]	; (8006c38 <_vfiprintf_r+0x24c>)
 8006ad8:	f7f9 fb82 	bl	80001e0 <memchr>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	b9d8      	cbnz	r0, 8006b18 <_vfiprintf_r+0x12c>
 8006ae0:	06d1      	lsls	r1, r2, #27
 8006ae2:	bf44      	itt	mi
 8006ae4:	2320      	movmi	r3, #32
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	0713      	lsls	r3, r2, #28
 8006aec:	bf44      	itt	mi
 8006aee:	232b      	movmi	r3, #43	; 0x2b
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d015      	beq.n	8006b28 <_vfiprintf_r+0x13c>
 8006afc:	9a07      	ldr	r2, [sp, #28]
 8006afe:	4654      	mov	r4, sl
 8006b00:	2000      	movs	r0, #0
 8006b02:	f04f 0c0a 	mov.w	ip, #10
 8006b06:	4621      	mov	r1, r4
 8006b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0c:	3b30      	subs	r3, #48	; 0x30
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d94e      	bls.n	8006bb0 <_vfiprintf_r+0x1c4>
 8006b12:	b1b0      	cbz	r0, 8006b42 <_vfiprintf_r+0x156>
 8006b14:	9207      	str	r2, [sp, #28]
 8006b16:	e014      	b.n	8006b42 <_vfiprintf_r+0x156>
 8006b18:	eba0 0308 	sub.w	r3, r0, r8
 8006b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b20:	4313      	orrs	r3, r2
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	46a2      	mov	sl, r4
 8006b26:	e7d2      	b.n	8006ace <_vfiprintf_r+0xe2>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbb      	ittet	lt
 8006b34:	425b      	neglt	r3, r3
 8006b36:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3a:	9307      	strge	r3, [sp, #28]
 8006b3c:	9307      	strlt	r3, [sp, #28]
 8006b3e:	bfb8      	it	lt
 8006b40:	9204      	strlt	r2, [sp, #16]
 8006b42:	7823      	ldrb	r3, [r4, #0]
 8006b44:	2b2e      	cmp	r3, #46	; 0x2e
 8006b46:	d10c      	bne.n	8006b62 <_vfiprintf_r+0x176>
 8006b48:	7863      	ldrb	r3, [r4, #1]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d135      	bne.n	8006bba <_vfiprintf_r+0x1ce>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	9203      	str	r2, [sp, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfb8      	it	lt
 8006b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b5e:	3402      	adds	r4, #2
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c48 <_vfiprintf_r+0x25c>
 8006b66:	7821      	ldrb	r1, [r4, #0]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f7f9 fb38 	bl	80001e0 <memchr>
 8006b70:	b140      	cbz	r0, 8006b84 <_vfiprintf_r+0x198>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	eba0 000a 	sub.w	r0, r0, sl
 8006b78:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	4303      	orrs	r3, r0
 8006b80:	3401      	adds	r4, #1
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	482c      	ldr	r0, [pc, #176]	; (8006c3c <_vfiprintf_r+0x250>)
 8006b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b8e:	2206      	movs	r2, #6
 8006b90:	f7f9 fb26 	bl	80001e0 <memchr>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d03f      	beq.n	8006c18 <_vfiprintf_r+0x22c>
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <_vfiprintf_r+0x254>)
 8006b9a:	bb1b      	cbnz	r3, 8006be4 <_vfiprintf_r+0x1f8>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	443b      	add	r3, r7
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	e767      	b.n	8006a80 <_vfiprintf_r+0x94>
 8006bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	e7a5      	b.n	8006b06 <_vfiprintf_r+0x11a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	3401      	adds	r4, #1
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f04f 0c0a 	mov.w	ip, #10
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bcc:	3a30      	subs	r2, #48	; 0x30
 8006bce:	2a09      	cmp	r2, #9
 8006bd0:	d903      	bls.n	8006bda <_vfiprintf_r+0x1ee>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0c5      	beq.n	8006b62 <_vfiprintf_r+0x176>
 8006bd6:	9105      	str	r1, [sp, #20]
 8006bd8:	e7c3      	b.n	8006b62 <_vfiprintf_r+0x176>
 8006bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bde:	4604      	mov	r4, r0
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7f0      	b.n	8006bc6 <_vfiprintf_r+0x1da>
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <_vfiprintf_r+0x258>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7fd ff9c 	bl	8004b2c <_printf_float>
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	1c78      	adds	r0, r7, #1
 8006bf8:	d1d6      	bne.n	8006ba8 <_vfiprintf_r+0x1bc>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	d405      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c00:	89ab      	ldrh	r3, [r5, #12]
 8006c02:	059a      	lsls	r2, r3, #22
 8006c04:	d402      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c08:	f000 faaf 	bl	800716a <__retarget_lock_release_recursive>
 8006c0c:	89ab      	ldrh	r3, [r5, #12]
 8006c0e:	065b      	lsls	r3, r3, #25
 8006c10:	f53f af12 	bmi.w	8006a38 <_vfiprintf_r+0x4c>
 8006c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c16:	e711      	b.n	8006a3c <_vfiprintf_r+0x50>
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <_vfiprintf_r+0x258>)
 8006c20:	a904      	add	r1, sp, #16
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7fe fa26 	bl	8005074 <_printf_i>
 8006c28:	e7e4      	b.n	8006bf4 <_vfiprintf_r+0x208>
 8006c2a:	bf00      	nop
 8006c2c:	08008edc 	.word	0x08008edc
 8006c30:	08008efc 	.word	0x08008efc
 8006c34:	08008ebc 	.word	0x08008ebc
 8006c38:	08008daa 	.word	0x08008daa
 8006c3c:	08008db4 	.word	0x08008db4
 8006c40:	08004b2d 	.word	0x08004b2d
 8006c44:	080069c7 	.word	0x080069c7
 8006c48:	08008db0 	.word	0x08008db0

08006c4c <__swbuf_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460e      	mov	r6, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <__swbuf_r+0x12>
 8006c56:	6983      	ldr	r3, [r0, #24]
 8006c58:	b90b      	cbnz	r3, 8006c5e <__swbuf_r+0x12>
 8006c5a:	f000 f9e7 	bl	800702c <__sinit>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <__swbuf_r+0x98>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d12b      	bne.n	8006cbc <__swbuf_r+0x70>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	071a      	lsls	r2, r3, #28
 8006c6e:	d52f      	bpl.n	8006cd0 <__swbuf_r+0x84>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	b36b      	cbz	r3, 8006cd0 <__swbuf_r+0x84>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1ac0      	subs	r0, r0, r3
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	b2f6      	uxtb	r6, r6
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	4637      	mov	r7, r6
 8006c82:	dc04      	bgt.n	8006c8e <__swbuf_r+0x42>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f93c 	bl	8006f04 <_fflush_r>
 8006c8c:	bb30      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	701e      	strb	r6, [r3, #0]
 8006c9c:	6963      	ldr	r3, [r4, #20]
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	4283      	cmp	r3, r0
 8006ca2:	d004      	beq.n	8006cae <__swbuf_r+0x62>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d506      	bpl.n	8006cb8 <__swbuf_r+0x6c>
 8006caa:	2e0a      	cmp	r6, #10
 8006cac:	d104      	bne.n	8006cb8 <__swbuf_r+0x6c>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f927 	bl	8006f04 <_fflush_r>
 8006cb6:	b988      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <__swbuf_r+0x9c>)
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	d101      	bne.n	8006cc6 <__swbuf_r+0x7a>
 8006cc2:	68ac      	ldr	r4, [r5, #8]
 8006cc4:	e7cf      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <__swbuf_r+0xa0>)
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	bf08      	it	eq
 8006ccc:	68ec      	ldreq	r4, [r5, #12]
 8006cce:	e7ca      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f81a 	bl	8006d0c <__swsetup_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0cb      	beq.n	8006c74 <__swbuf_r+0x28>
 8006cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce0:	e7ea      	b.n	8006cb8 <__swbuf_r+0x6c>
 8006ce2:	bf00      	nop
 8006ce4:	08008edc 	.word	0x08008edc
 8006ce8:	08008efc 	.word	0x08008efc
 8006cec:	08008ebc 	.word	0x08008ebc

08006cf0 <__ascii_wctomb>:
 8006cf0:	b149      	cbz	r1, 8006d06 <__ascii_wctomb+0x16>
 8006cf2:	2aff      	cmp	r2, #255	; 0xff
 8006cf4:	bf85      	ittet	hi
 8006cf6:	238a      	movhi	r3, #138	; 0x8a
 8006cf8:	6003      	strhi	r3, [r0, #0]
 8006cfa:	700a      	strbls	r2, [r1, #0]
 8006cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d00:	bf98      	it	ls
 8006d02:	2001      	movls	r0, #1
 8006d04:	4770      	bx	lr
 8006d06:	4608      	mov	r0, r1
 8006d08:	4770      	bx	lr
	...

08006d0c <__swsetup_r>:
 8006d0c:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <__swsetup_r+0xcc>)
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	681d      	ldr	r5, [r3, #0]
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	b125      	cbz	r5, 8006d22 <__swsetup_r+0x16>
 8006d18:	69ab      	ldr	r3, [r5, #24]
 8006d1a:	b913      	cbnz	r3, 8006d22 <__swsetup_r+0x16>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 f985 	bl	800702c <__sinit>
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <__swsetup_r+0xd0>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	d10f      	bne.n	8006d48 <__swsetup_r+0x3c>
 8006d28:	686c      	ldr	r4, [r5, #4]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d42c      	bmi.n	8006d8e <__swsetup_r+0x82>
 8006d34:	06dd      	lsls	r5, r3, #27
 8006d36:	d411      	bmi.n	8006d5c <__swsetup_r+0x50>
 8006d38:	2309      	movs	r3, #9
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	e03e      	b.n	8006dc6 <__swsetup_r+0xba>
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <__swsetup_r+0xd4>)
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	d101      	bne.n	8006d52 <__swsetup_r+0x46>
 8006d4e:	68ac      	ldr	r4, [r5, #8]
 8006d50:	e7eb      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <__swsetup_r+0xd8>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	bf08      	it	eq
 8006d58:	68ec      	ldreq	r4, [r5, #12]
 8006d5a:	e7e6      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d5c:	0758      	lsls	r0, r3, #29
 8006d5e:	d512      	bpl.n	8006d86 <__swsetup_r+0x7a>
 8006d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d62:	b141      	cbz	r1, 8006d76 <__swsetup_r+0x6a>
 8006d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d002      	beq.n	8006d72 <__swsetup_r+0x66>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff fcd5 	bl	800671c <_free_r>
 8006d72:	2300      	movs	r3, #0
 8006d74:	6363      	str	r3, [r4, #52]	; 0x34
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	b94b      	cbnz	r3, 8006da6 <__swsetup_r+0x9a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9c:	d003      	beq.n	8006da6 <__swsetup_r+0x9a>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fa09 	bl	80071b8 <__smakebuf_r>
 8006da6:	89a0      	ldrh	r0, [r4, #12]
 8006da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dac:	f010 0301 	ands.w	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <__swsetup_r+0xbc>
 8006db2:	2300      	movs	r3, #0
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6963      	ldr	r3, [r4, #20]
 8006db8:	425b      	negs	r3, r3
 8006dba:	61a3      	str	r3, [r4, #24]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	b943      	cbnz	r3, 8006dd2 <__swsetup_r+0xc6>
 8006dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dc4:	d1ba      	bne.n	8006d3c <__swsetup_r+0x30>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	0781      	lsls	r1, r0, #30
 8006dca:	bf58      	it	pl
 8006dcc:	6963      	ldrpl	r3, [r4, #20]
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	e7f4      	b.n	8006dbc <__swsetup_r+0xb0>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e7f7      	b.n	8006dc6 <__swsetup_r+0xba>
 8006dd6:	bf00      	nop
 8006dd8:	20000014 	.word	0x20000014
 8006ddc:	08008edc 	.word	0x08008edc
 8006de0:	08008efc 	.word	0x08008efc
 8006de4:	08008ebc 	.word	0x08008ebc

08006de8 <abort>:
 8006de8:	b508      	push	{r3, lr}
 8006dea:	2006      	movs	r0, #6
 8006dec:	f000 fa4c 	bl	8007288 <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa fe43 	bl	8001a7c <_exit>
	...

08006df8 <__sflush_r>:
 8006df8:	898a      	ldrh	r2, [r1, #12]
 8006dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfe:	4605      	mov	r5, r0
 8006e00:	0710      	lsls	r0, r2, #28
 8006e02:	460c      	mov	r4, r1
 8006e04:	d458      	bmi.n	8006eb8 <__sflush_r+0xc0>
 8006e06:	684b      	ldr	r3, [r1, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc05      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dc02      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d0f9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e24:	682f      	ldr	r7, [r5, #0]
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	d032      	beq.n	8006e90 <__sflush_r+0x98>
 8006e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	075a      	lsls	r2, r3, #29
 8006e30:	d505      	bpl.n	8006e3e <__sflush_r+0x46>
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e38:	b10b      	cbz	r3, 8006e3e <__sflush_r+0x46>
 8006e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e3c:	1ac0      	subs	r0, r0, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4602      	mov	r2, r0
 8006e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e44:	6a21      	ldr	r1, [r4, #32]
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b0      	blx	r6
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	d106      	bne.n	8006e5e <__sflush_r+0x66>
 8006e50:	6829      	ldr	r1, [r5, #0]
 8006e52:	291d      	cmp	r1, #29
 8006e54:	d82c      	bhi.n	8006eb0 <__sflush_r+0xb8>
 8006e56:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <__sflush_r+0x108>)
 8006e58:	40ca      	lsrs	r2, r1
 8006e5a:	07d6      	lsls	r6, r2, #31
 8006e5c:	d528      	bpl.n	8006eb0 <__sflush_r+0xb8>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6062      	str	r2, [r4, #4]
 8006e62:	04d9      	lsls	r1, r3, #19
 8006e64:	6922      	ldr	r2, [r4, #16]
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	d504      	bpl.n	8006e74 <__sflush_r+0x7c>
 8006e6a:	1c42      	adds	r2, r0, #1
 8006e6c:	d101      	bne.n	8006e72 <__sflush_r+0x7a>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b903      	cbnz	r3, 8006e74 <__sflush_r+0x7c>
 8006e72:	6560      	str	r0, [r4, #84]	; 0x54
 8006e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e76:	602f      	str	r7, [r5, #0]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d0ca      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e80:	4299      	cmp	r1, r3
 8006e82:	d002      	beq.n	8006e8a <__sflush_r+0x92>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7ff fc49 	bl	800671c <_free_r>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e8e:	e7c1      	b.n	8006e14 <__sflush_r+0x1c>
 8006e90:	6a21      	ldr	r1, [r4, #32]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b0      	blx	r6
 8006e98:	1c41      	adds	r1, r0, #1
 8006e9a:	d1c7      	bne.n	8006e2c <__sflush_r+0x34>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c4      	beq.n	8006e2c <__sflush_r+0x34>
 8006ea2:	2b1d      	cmp	r3, #29
 8006ea4:	d001      	beq.n	8006eaa <__sflush_r+0xb2>
 8006ea6:	2b16      	cmp	r3, #22
 8006ea8:	d101      	bne.n	8006eae <__sflush_r+0xb6>
 8006eaa:	602f      	str	r7, [r5, #0]
 8006eac:	e7b1      	b.n	8006e12 <__sflush_r+0x1a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	e7ad      	b.n	8006e14 <__sflush_r+0x1c>
 8006eb8:	690f      	ldr	r7, [r1, #16]
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d0a9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006ebe:	0793      	lsls	r3, r2, #30
 8006ec0:	680e      	ldr	r6, [r1, #0]
 8006ec2:	bf08      	it	eq
 8006ec4:	694b      	ldreq	r3, [r1, #20]
 8006ec6:	600f      	str	r7, [r1, #0]
 8006ec8:	bf18      	it	ne
 8006eca:	2300      	movne	r3, #0
 8006ecc:	eba6 0807 	sub.w	r8, r6, r7
 8006ed0:	608b      	str	r3, [r1, #8]
 8006ed2:	f1b8 0f00 	cmp.w	r8, #0
 8006ed6:	dd9c      	ble.n	8006e12 <__sflush_r+0x1a>
 8006ed8:	6a21      	ldr	r1, [r4, #32]
 8006eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006edc:	4643      	mov	r3, r8
 8006ede:	463a      	mov	r2, r7
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b0      	blx	r6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	dc06      	bgt.n	8006ef6 <__sflush_r+0xfe>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e78e      	b.n	8006e14 <__sflush_r+0x1c>
 8006ef6:	4407      	add	r7, r0
 8006ef8:	eba8 0800 	sub.w	r8, r8, r0
 8006efc:	e7e9      	b.n	8006ed2 <__sflush_r+0xda>
 8006efe:	bf00      	nop
 8006f00:	20400001 	.word	0x20400001

08006f04 <_fflush_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b913      	cbnz	r3, 8006f14 <_fflush_r+0x10>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	4628      	mov	r0, r5
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	b118      	cbz	r0, 8006f1e <_fflush_r+0x1a>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <_fflush_r+0x1a>
 8006f1a:	f000 f887 	bl	800702c <__sinit>
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <_fflush_r+0x6c>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d11b      	bne.n	8006f5c <_fflush_r+0x58>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ef      	beq.n	8006f0e <_fflush_r+0xa>
 8006f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f30:	07d0      	lsls	r0, r2, #31
 8006f32:	d404      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f34:	0599      	lsls	r1, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3a:	f000 f915 	bl	8007168 <__retarget_lock_acquire_recursive>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4621      	mov	r1, r4
 8006f42:	f7ff ff59 	bl	8006df8 <__sflush_r>
 8006f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f48:	07da      	lsls	r2, r3, #31
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	d4e0      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	d4dd      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f56:	f000 f908 	bl	800716a <__retarget_lock_release_recursive>
 8006f5a:	e7d9      	b.n	8006f10 <_fflush_r+0xc>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <_fflush_r+0x70>)
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	d101      	bne.n	8006f66 <_fflush_r+0x62>
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	e7df      	b.n	8006f26 <_fflush_r+0x22>
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <_fflush_r+0x74>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	bf08      	it	eq
 8006f6c:	68ec      	ldreq	r4, [r5, #12]
 8006f6e:	e7da      	b.n	8006f26 <_fflush_r+0x22>
 8006f70:	08008edc 	.word	0x08008edc
 8006f74:	08008efc 	.word	0x08008efc
 8006f78:	08008ebc 	.word	0x08008ebc

08006f7c <std>:
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	4604      	mov	r4, r0
 8006f82:	e9c0 3300 	strd	r3, r3, [r0]
 8006f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8a:	6083      	str	r3, [r0, #8]
 8006f8c:	8181      	strh	r1, [r0, #12]
 8006f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f90:	81c2      	strh	r2, [r0, #14]
 8006f92:	6183      	str	r3, [r0, #24]
 8006f94:	4619      	mov	r1, r3
 8006f96:	2208      	movs	r2, #8
 8006f98:	305c      	adds	r0, #92	; 0x5c
 8006f9a:	f7fd fd1f 	bl	80049dc <memset>
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x38>)
 8006fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x3c>)
 8006fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x40>)
 8006fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x44>)
 8006fac:	6224      	str	r4, [r4, #32]
 8006fae:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	080072c1 	.word	0x080072c1
 8006fb8:	080072e3 	.word	0x080072e3
 8006fbc:	0800731b 	.word	0x0800731b
 8006fc0:	0800733f 	.word	0x0800733f

08006fc4 <_cleanup_r>:
 8006fc4:	4901      	ldr	r1, [pc, #4]	; (8006fcc <_cleanup_r+0x8>)
 8006fc6:	f000 b8af 	b.w	8007128 <_fwalk_reent>
 8006fca:	bf00      	nop
 8006fcc:	08006f05 	.word	0x08006f05

08006fd0 <__sfmoreglue>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	2268      	movs	r2, #104	; 0x68
 8006fd4:	1e4d      	subs	r5, r1, #1
 8006fd6:	4355      	muls	r5, r2
 8006fd8:	460e      	mov	r6, r1
 8006fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fde:	f7ff fc09 	bl	80067f4 <_malloc_r>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	b140      	cbz	r0, 8006ff8 <__sfmoreglue+0x28>
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fec:	300c      	adds	r0, #12
 8006fee:	60a0      	str	r0, [r4, #8]
 8006ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff4:	f7fd fcf2 	bl	80049dc <memset>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}

08006ffc <__sfp_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sfp_lock_acquire+0x8>)
 8006ffe:	f000 b8b3 	b.w	8007168 <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	2000038d 	.word	0x2000038d

08007008 <__sfp_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_release+0x8>)
 800700a:	f000 b8ae 	b.w	800716a <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	2000038d 	.word	0x2000038d

08007014 <__sinit_lock_acquire>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sinit_lock_acquire+0x8>)
 8007016:	f000 b8a7 	b.w	8007168 <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	2000038e 	.word	0x2000038e

08007020 <__sinit_lock_release>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_release+0x8>)
 8007022:	f000 b8a2 	b.w	800716a <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	2000038e 	.word	0x2000038e

0800702c <__sinit>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	f7ff fff0 	bl	8007014 <__sinit_lock_acquire>
 8007034:	69a3      	ldr	r3, [r4, #24]
 8007036:	b11b      	cbz	r3, 8007040 <__sinit+0x14>
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f7ff bff0 	b.w	8007020 <__sinit_lock_release>
 8007040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007044:	6523      	str	r3, [r4, #80]	; 0x50
 8007046:	4b13      	ldr	r3, [pc, #76]	; (8007094 <__sinit+0x68>)
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <__sinit+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	62a2      	str	r2, [r4, #40]	; 0x28
 800704e:	42a3      	cmp	r3, r4
 8007050:	bf04      	itt	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	61a3      	streq	r3, [r4, #24]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f820 	bl	800709c <__sfp>
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f81c 	bl	800709c <__sfp>
 8007064:	60a0      	str	r0, [r4, #8]
 8007066:	4620      	mov	r0, r4
 8007068:	f000 f818 	bl	800709c <__sfp>
 800706c:	2200      	movs	r2, #0
 800706e:	60e0      	str	r0, [r4, #12]
 8007070:	2104      	movs	r1, #4
 8007072:	6860      	ldr	r0, [r4, #4]
 8007074:	f7ff ff82 	bl	8006f7c <std>
 8007078:	68a0      	ldr	r0, [r4, #8]
 800707a:	2201      	movs	r2, #1
 800707c:	2109      	movs	r1, #9
 800707e:	f7ff ff7d 	bl	8006f7c <std>
 8007082:	68e0      	ldr	r0, [r4, #12]
 8007084:	2202      	movs	r2, #2
 8007086:	2112      	movs	r1, #18
 8007088:	f7ff ff78 	bl	8006f7c <std>
 800708c:	2301      	movs	r3, #1
 800708e:	61a3      	str	r3, [r4, #24]
 8007090:	e7d2      	b.n	8007038 <__sinit+0xc>
 8007092:	bf00      	nop
 8007094:	08008b40 	.word	0x08008b40
 8007098:	08006fc5 	.word	0x08006fc5

0800709c <__sfp>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	4607      	mov	r7, r0
 80070a0:	f7ff ffac 	bl	8006ffc <__sfp_lock_acquire>
 80070a4:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <__sfp+0x84>)
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	69b3      	ldr	r3, [r6, #24]
 80070aa:	b913      	cbnz	r3, 80070b2 <__sfp+0x16>
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff ffbd 	bl	800702c <__sinit>
 80070b2:	3648      	adds	r6, #72	; 0x48
 80070b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	d503      	bpl.n	80070c4 <__sfp+0x28>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	b30b      	cbz	r3, 8007104 <__sfp+0x68>
 80070c0:	6836      	ldr	r6, [r6, #0]
 80070c2:	e7f7      	b.n	80070b4 <__sfp+0x18>
 80070c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c8:	b9d5      	cbnz	r5, 8007100 <__sfp+0x64>
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <__sfp+0x88>)
 80070cc:	60e3      	str	r3, [r4, #12]
 80070ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d2:	6665      	str	r5, [r4, #100]	; 0x64
 80070d4:	f000 f847 	bl	8007166 <__retarget_lock_init_recursive>
 80070d8:	f7ff ff96 	bl	8007008 <__sfp_lock_release>
 80070dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e4:	6025      	str	r5, [r4, #0]
 80070e6:	61a5      	str	r5, [r4, #24]
 80070e8:	2208      	movs	r2, #8
 80070ea:	4629      	mov	r1, r5
 80070ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f0:	f7fd fc74 	bl	80049dc <memset>
 80070f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070fc:	4620      	mov	r0, r4
 80070fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007100:	3468      	adds	r4, #104	; 0x68
 8007102:	e7d9      	b.n	80070b8 <__sfp+0x1c>
 8007104:	2104      	movs	r1, #4
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ff62 	bl	8006fd0 <__sfmoreglue>
 800710c:	4604      	mov	r4, r0
 800710e:	6030      	str	r0, [r6, #0]
 8007110:	2800      	cmp	r0, #0
 8007112:	d1d5      	bne.n	80070c0 <__sfp+0x24>
 8007114:	f7ff ff78 	bl	8007008 <__sfp_lock_release>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	e7ee      	b.n	80070fc <__sfp+0x60>
 800711e:	bf00      	nop
 8007120:	08008b40 	.word	0x08008b40
 8007124:	ffff0001 	.word	0xffff0001

08007128 <_fwalk_reent>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	4688      	mov	r8, r1
 8007130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007134:	2700      	movs	r7, #0
 8007136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713a:	f1b9 0901 	subs.w	r9, r9, #1
 800713e:	d505      	bpl.n	800714c <_fwalk_reent+0x24>
 8007140:	6824      	ldr	r4, [r4, #0]
 8007142:	2c00      	cmp	r4, #0
 8007144:	d1f7      	bne.n	8007136 <_fwalk_reent+0xe>
 8007146:	4638      	mov	r0, r7
 8007148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d907      	bls.n	8007162 <_fwalk_reent+0x3a>
 8007152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007156:	3301      	adds	r3, #1
 8007158:	d003      	beq.n	8007162 <_fwalk_reent+0x3a>
 800715a:	4629      	mov	r1, r5
 800715c:	4630      	mov	r0, r6
 800715e:	47c0      	blx	r8
 8007160:	4307      	orrs	r7, r0
 8007162:	3568      	adds	r5, #104	; 0x68
 8007164:	e7e9      	b.n	800713a <_fwalk_reent+0x12>

08007166 <__retarget_lock_init_recursive>:
 8007166:	4770      	bx	lr

08007168 <__retarget_lock_acquire_recursive>:
 8007168:	4770      	bx	lr

0800716a <__retarget_lock_release_recursive>:
 800716a:	4770      	bx	lr

0800716c <__swhatbuf_r>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	460e      	mov	r6, r1
 8007170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007174:	2900      	cmp	r1, #0
 8007176:	b096      	sub	sp, #88	; 0x58
 8007178:	4614      	mov	r4, r2
 800717a:	461d      	mov	r5, r3
 800717c:	da08      	bge.n	8007190 <__swhatbuf_r+0x24>
 800717e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	061a      	lsls	r2, r3, #24
 8007188:	d410      	bmi.n	80071ac <__swhatbuf_r+0x40>
 800718a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718e:	e00e      	b.n	80071ae <__swhatbuf_r+0x42>
 8007190:	466a      	mov	r2, sp
 8007192:	f000 f8fb 	bl	800738c <_fstat_r>
 8007196:	2800      	cmp	r0, #0
 8007198:	dbf1      	blt.n	800717e <__swhatbuf_r+0x12>
 800719a:	9a01      	ldr	r2, [sp, #4]
 800719c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a4:	425a      	negs	r2, r3
 80071a6:	415a      	adcs	r2, r3
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	e7ee      	b.n	800718a <__swhatbuf_r+0x1e>
 80071ac:	2340      	movs	r3, #64	; 0x40
 80071ae:	2000      	movs	r0, #0
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	b016      	add	sp, #88	; 0x58
 80071b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080071b8 <__smakebuf_r>:
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071bc:	079d      	lsls	r5, r3, #30
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	d507      	bpl.n	80071d4 <__smakebuf_r+0x1c>
 80071c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	2301      	movs	r3, #1
 80071ce:	6163      	str	r3, [r4, #20]
 80071d0:	b002      	add	sp, #8
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	ab01      	add	r3, sp, #4
 80071d6:	466a      	mov	r2, sp
 80071d8:	f7ff ffc8 	bl	800716c <__swhatbuf_r>
 80071dc:	9900      	ldr	r1, [sp, #0]
 80071de:	4605      	mov	r5, r0
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7ff fb07 	bl	80067f4 <_malloc_r>
 80071e6:	b948      	cbnz	r0, 80071fc <__smakebuf_r+0x44>
 80071e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ec:	059a      	lsls	r2, r3, #22
 80071ee:	d4ef      	bmi.n	80071d0 <__smakebuf_r+0x18>
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	e7e3      	b.n	80071c4 <__smakebuf_r+0xc>
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <__smakebuf_r+0x7c>)
 80071fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	6020      	str	r0, [r4, #0]
 8007204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	6163      	str	r3, [r4, #20]
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	6120      	str	r0, [r4, #16]
 8007212:	b15b      	cbz	r3, 800722c <__smakebuf_r+0x74>
 8007214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f8c9 	bl	80073b0 <_isatty_r>
 800721e:	b128      	cbz	r0, 800722c <__smakebuf_r+0x74>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	89a0      	ldrh	r0, [r4, #12]
 800722e:	4305      	orrs	r5, r0
 8007230:	81a5      	strh	r5, [r4, #12]
 8007232:	e7cd      	b.n	80071d0 <__smakebuf_r+0x18>
 8007234:	08006fc5 	.word	0x08006fc5

08007238 <_raise_r>:
 8007238:	291f      	cmp	r1, #31
 800723a:	b538      	push	{r3, r4, r5, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	d904      	bls.n	800724c <_raise_r+0x14>
 8007242:	2316      	movs	r3, #22
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800724e:	b112      	cbz	r2, 8007256 <_raise_r+0x1e>
 8007250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007254:	b94b      	cbnz	r3, 800726a <_raise_r+0x32>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f830 	bl	80072bc <_getpid_r>
 800725c:	462a      	mov	r2, r5
 800725e:	4601      	mov	r1, r0
 8007260:	4620      	mov	r0, r4
 8007262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007266:	f000 b817 	b.w	8007298 <_kill_r>
 800726a:	2b01      	cmp	r3, #1
 800726c:	d00a      	beq.n	8007284 <_raise_r+0x4c>
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	d103      	bne.n	800727a <_raise_r+0x42>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	2001      	movs	r0, #1
 8007278:	e7e7      	b.n	800724a <_raise_r+0x12>
 800727a:	2400      	movs	r4, #0
 800727c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007280:	4628      	mov	r0, r5
 8007282:	4798      	blx	r3
 8007284:	2000      	movs	r0, #0
 8007286:	e7e0      	b.n	800724a <_raise_r+0x12>

08007288 <raise>:
 8007288:	4b02      	ldr	r3, [pc, #8]	; (8007294 <raise+0xc>)
 800728a:	4601      	mov	r1, r0
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f7ff bfd3 	b.w	8007238 <_raise_r>
 8007292:	bf00      	nop
 8007294:	20000014 	.word	0x20000014

08007298 <_kill_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_kill_r+0x20>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7fa fbd9 	bl	8001a5c <_kill>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_kill_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_kill_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	20000388 	.word	0x20000388

080072bc <_getpid_r>:
 80072bc:	f7fa bbc6 	b.w	8001a4c <_getpid>

080072c0 <__sread>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	f000 f894 	bl	80073f4 <_read_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	bfab      	itete	ge
 80072d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072d2:	89a3      	ldrhlt	r3, [r4, #12]
 80072d4:	181b      	addge	r3, r3, r0
 80072d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072da:	bfac      	ite	ge
 80072dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072de:	81a3      	strhlt	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__swrite>:
 80072e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	461f      	mov	r7, r3
 80072e8:	898b      	ldrh	r3, [r1, #12]
 80072ea:	05db      	lsls	r3, r3, #23
 80072ec:	4605      	mov	r5, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4616      	mov	r6, r2
 80072f2:	d505      	bpl.n	8007300 <__swrite+0x1e>
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	2302      	movs	r3, #2
 80072fa:	2200      	movs	r2, #0
 80072fc:	f000 f868 	bl	80073d0 <_lseek_r>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	4632      	mov	r2, r6
 800730e:	463b      	mov	r3, r7
 8007310:	4628      	mov	r0, r5
 8007312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	f000 b817 	b.w	8007348 <_write_r>

0800731a <__sseek>:
 800731a:	b510      	push	{r4, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007322:	f000 f855 	bl	80073d0 <_lseek_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	bf15      	itete	ne
 800732c:	6560      	strne	r0, [r4, #84]	; 0x54
 800732e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007336:	81a3      	strheq	r3, [r4, #12]
 8007338:	bf18      	it	ne
 800733a:	81a3      	strhne	r3, [r4, #12]
 800733c:	bd10      	pop	{r4, pc}

0800733e <__sclose>:
 800733e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007342:	f000 b813 	b.w	800736c <_close_r>
	...

08007348 <_write_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4d07      	ldr	r5, [pc, #28]	; (8007368 <_write_r+0x20>)
 800734c:	4604      	mov	r4, r0
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	2200      	movs	r2, #0
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7fa fbb7 	bl	8001aca <_write>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_write_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_write_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000388 	.word	0x20000388

0800736c <_close_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	; (8007388 <_close_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fa fbc3 	bl	8001b02 <_close>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_close_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_close_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000388 	.word	0x20000388

0800738c <_fstat_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	; (80073ac <_fstat_r+0x20>)
 8007390:	2300      	movs	r3, #0
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	f7fa fbbe 	bl	8001b1a <_fstat>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d102      	bne.n	80073a8 <_fstat_r+0x1c>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	b103      	cbz	r3, 80073a8 <_fstat_r+0x1c>
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	20000388 	.word	0x20000388

080073b0 <_isatty_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d06      	ldr	r5, [pc, #24]	; (80073cc <_isatty_r+0x1c>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fa fbbd 	bl	8001b3a <_isatty>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_isatty_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_isatty_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000388 	.word	0x20000388

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d07      	ldr	r5, [pc, #28]	; (80073f0 <_lseek_r+0x20>)
 80073d4:	4604      	mov	r4, r0
 80073d6:	4608      	mov	r0, r1
 80073d8:	4611      	mov	r1, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fa fbb6 	bl	8001b50 <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000388 	.word	0x20000388

080073f4 <_read_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	; (8007414 <_read_r+0x20>)
 80073f8:	4604      	mov	r4, r0
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7fa fb44 	bl	8001a90 <_read>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_read_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_read_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000388 	.word	0x20000388

08007418 <sin>:
 8007418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800741a:	ec53 2b10 	vmov	r2, r3, d0
 800741e:	4828      	ldr	r0, [pc, #160]	; (80074c0 <sin+0xa8>)
 8007420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007424:	4281      	cmp	r1, r0
 8007426:	dc07      	bgt.n	8007438 <sin+0x20>
 8007428:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80074b8 <sin+0xa0>
 800742c:	2000      	movs	r0, #0
 800742e:	b005      	add	sp, #20
 8007430:	f85d eb04 	ldr.w	lr, [sp], #4
 8007434:	f001 b994 	b.w	8008760 <__kernel_sin>
 8007438:	4822      	ldr	r0, [pc, #136]	; (80074c4 <sin+0xac>)
 800743a:	4281      	cmp	r1, r0
 800743c:	dd09      	ble.n	8007452 <sin+0x3a>
 800743e:	ee10 0a10 	vmov	r0, s0
 8007442:	4619      	mov	r1, r3
 8007444:	f7f8 ff20 	bl	8000288 <__aeabi_dsub>
 8007448:	ec41 0b10 	vmov	d0, r0, r1
 800744c:	b005      	add	sp, #20
 800744e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007452:	4668      	mov	r0, sp
 8007454:	f000 faac 	bl	80079b0 <__ieee754_rem_pio2>
 8007458:	f000 0003 	and.w	r0, r0, #3
 800745c:	2801      	cmp	r0, #1
 800745e:	d00c      	beq.n	800747a <sin+0x62>
 8007460:	2802      	cmp	r0, #2
 8007462:	d011      	beq.n	8007488 <sin+0x70>
 8007464:	b9f0      	cbnz	r0, 80074a4 <sin+0x8c>
 8007466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800746a:	ed9d 0b00 	vldr	d0, [sp]
 800746e:	2001      	movs	r0, #1
 8007470:	f001 f976 	bl	8008760 <__kernel_sin>
 8007474:	ec51 0b10 	vmov	r0, r1, d0
 8007478:	e7e6      	b.n	8007448 <sin+0x30>
 800747a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800747e:	ed9d 0b00 	vldr	d0, [sp]
 8007482:	f000 fd55 	bl	8007f30 <__kernel_cos>
 8007486:	e7f5      	b.n	8007474 <sin+0x5c>
 8007488:	ed9d 1b02 	vldr	d1, [sp, #8]
 800748c:	ed9d 0b00 	vldr	d0, [sp]
 8007490:	2001      	movs	r0, #1
 8007492:	f001 f965 	bl	8008760 <__kernel_sin>
 8007496:	ec53 2b10 	vmov	r2, r3, d0
 800749a:	ee10 0a10 	vmov	r0, s0
 800749e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80074a2:	e7d1      	b.n	8007448 <sin+0x30>
 80074a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074a8:	ed9d 0b00 	vldr	d0, [sp]
 80074ac:	f000 fd40 	bl	8007f30 <__kernel_cos>
 80074b0:	e7f1      	b.n	8007496 <sin+0x7e>
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
	...
 80074c0:	3fe921fb 	.word	0x3fe921fb
 80074c4:	7fefffff 	.word	0x7fefffff

080074c8 <asin>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	ed2d 8b02 	vpush	{d8}
 80074ce:	ec55 4b10 	vmov	r4, r5, d0
 80074d2:	f000 f859 	bl	8007588 <__ieee754_asin>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	eeb0 8a40 	vmov.f32	s16, s0
 80074e2:	eef0 8a60 	vmov.f32	s17, s1
 80074e6:	f7f9 fb21 	bl	8000b2c <__aeabi_dcmpun>
 80074ea:	b9a8      	cbnz	r0, 8007518 <asin+0x50>
 80074ec:	ec45 4b10 	vmov	d0, r4, r5
 80074f0:	f001 f9f4 	bl	80088dc <fabs>
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <asin+0x60>)
 80074f6:	ec51 0b10 	vmov	r0, r1, d0
 80074fa:	2200      	movs	r2, #0
 80074fc:	f7f9 fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8007500:	b150      	cbz	r0, 8007518 <asin+0x50>
 8007502:	f7fd fa41 	bl	8004988 <__errno>
 8007506:	ecbd 8b02 	vpop	{d8}
 800750a:	2321      	movs	r3, #33	; 0x21
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007512:	4806      	ldr	r0, [pc, #24]	; (800752c <asin+0x64>)
 8007514:	f001 ba6c 	b.w	80089f0 <nan>
 8007518:	eeb0 0a48 	vmov.f32	s0, s16
 800751c:	eef0 0a68 	vmov.f32	s1, s17
 8007520:	ecbd 8b02 	vpop	{d8}
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	3ff00000 	.word	0x3ff00000
 800752c:	08008d9f 	.word	0x08008d9f

08007530 <sqrt>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	ed2d 8b02 	vpush	{d8}
 8007536:	ec55 4b10 	vmov	r4, r5, d0
 800753a:	f000 fc45 	bl	8007dc8 <__ieee754_sqrt>
 800753e:	4622      	mov	r2, r4
 8007540:	462b      	mov	r3, r5
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	eeb0 8a40 	vmov.f32	s16, s0
 800754a:	eef0 8a60 	vmov.f32	s17, s1
 800754e:	f7f9 faed 	bl	8000b2c <__aeabi_dcmpun>
 8007552:	b990      	cbnz	r0, 800757a <sqrt+0x4a>
 8007554:	2200      	movs	r2, #0
 8007556:	2300      	movs	r3, #0
 8007558:	4620      	mov	r0, r4
 800755a:	4629      	mov	r1, r5
 800755c:	f7f9 fabe 	bl	8000adc <__aeabi_dcmplt>
 8007560:	b158      	cbz	r0, 800757a <sqrt+0x4a>
 8007562:	f7fd fa11 	bl	8004988 <__errno>
 8007566:	2321      	movs	r3, #33	; 0x21
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	2300      	movs	r3, #0
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f7f9 f96b 	bl	800084c <__aeabi_ddiv>
 8007576:	ec41 0b18 	vmov	d8, r0, r1
 800757a:	eeb0 0a48 	vmov.f32	s0, s16
 800757e:	eef0 0a68 	vmov.f32	s1, s17
 8007582:	ecbd 8b02 	vpop	{d8}
 8007586:	bd38      	pop	{r3, r4, r5, pc}

08007588 <__ieee754_asin>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	ed2d 8b04 	vpush	{d8-d9}
 8007590:	ec55 4b10 	vmov	r4, r5, d0
 8007594:	4bcc      	ldr	r3, [pc, #816]	; (80078c8 <__ieee754_asin+0x340>)
 8007596:	b083      	sub	sp, #12
 8007598:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800759c:	4598      	cmp	r8, r3
 800759e:	9501      	str	r5, [sp, #4]
 80075a0:	dd35      	ble.n	800760e <__ieee754_asin+0x86>
 80075a2:	ee10 3a10 	vmov	r3, s0
 80075a6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80075aa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80075ae:	ea58 0303 	orrs.w	r3, r8, r3
 80075b2:	d117      	bne.n	80075e4 <__ieee754_asin+0x5c>
 80075b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007860 <__ieee754_asin+0x2d8>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	ee10 0a10 	vmov	r0, s0
 80075be:	4629      	mov	r1, r5
 80075c0:	f7f9 f81a 	bl	80005f8 <__aeabi_dmul>
 80075c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007868 <__ieee754_asin+0x2e0>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	4606      	mov	r6, r0
 80075cc:	460f      	mov	r7, r1
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 f811 	bl	80005f8 <__aeabi_dmul>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f8 fe55 	bl	800028c <__adddf3>
 80075e2:	e00b      	b.n	80075fc <__ieee754_asin+0x74>
 80075e4:	ee10 2a10 	vmov	r2, s0
 80075e8:	462b      	mov	r3, r5
 80075ea:	ee10 0a10 	vmov	r0, s0
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f8 fe4a 	bl	8000288 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	f7f9 f928 	bl	800084c <__aeabi_ddiv>
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	ec45 4b10 	vmov	d0, r4, r5
 8007604:	b003      	add	sp, #12
 8007606:	ecbd 8b04 	vpop	{d8-d9}
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	4baf      	ldr	r3, [pc, #700]	; (80078cc <__ieee754_asin+0x344>)
 8007610:	4598      	cmp	r8, r3
 8007612:	dc11      	bgt.n	8007638 <__ieee754_asin+0xb0>
 8007614:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007618:	f280 80ae 	bge.w	8007778 <__ieee754_asin+0x1f0>
 800761c:	a394      	add	r3, pc, #592	; (adr r3, 8007870 <__ieee754_asin+0x2e8>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	ee10 0a10 	vmov	r0, s0
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 fe30 	bl	800028c <__adddf3>
 800762c:	4ba8      	ldr	r3, [pc, #672]	; (80078d0 <__ieee754_asin+0x348>)
 800762e:	2200      	movs	r2, #0
 8007630:	f7f9 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 8007634:	2800      	cmp	r0, #0
 8007636:	d1e3      	bne.n	8007600 <__ieee754_asin+0x78>
 8007638:	ec45 4b10 	vmov	d0, r4, r5
 800763c:	f001 f94e 	bl	80088dc <fabs>
 8007640:	49a3      	ldr	r1, [pc, #652]	; (80078d0 <__ieee754_asin+0x348>)
 8007642:	ec53 2b10 	vmov	r2, r3, d0
 8007646:	2000      	movs	r0, #0
 8007648:	f7f8 fe1e 	bl	8000288 <__aeabi_dsub>
 800764c:	4ba1      	ldr	r3, [pc, #644]	; (80078d4 <__ieee754_asin+0x34c>)
 800764e:	2200      	movs	r2, #0
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	a388      	add	r3, pc, #544	; (adr r3, 8007878 <__ieee754_asin+0x2f0>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	4604      	mov	r4, r0
 800765c:	460d      	mov	r5, r1
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	a387      	add	r3, pc, #540	; (adr r3, 8007880 <__ieee754_asin+0x2f8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fe10 	bl	800028c <__adddf3>
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	f7f8 ffc2 	bl	80005f8 <__aeabi_dmul>
 8007674:	a384      	add	r3, pc, #528	; (adr r3, 8007888 <__ieee754_asin+0x300>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fe05 	bl	8000288 <__aeabi_dsub>
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	a382      	add	r3, pc, #520	; (adr r3, 8007890 <__ieee754_asin+0x308>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 fdfe 	bl	800028c <__adddf3>
 8007690:	4622      	mov	r2, r4
 8007692:	462b      	mov	r3, r5
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	a37f      	add	r3, pc, #508	; (adr r3, 8007898 <__ieee754_asin+0x310>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 fdf3 	bl	8000288 <__aeabi_dsub>
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f7f8 ffa7 	bl	80005f8 <__aeabi_dmul>
 80076aa:	a37d      	add	r3, pc, #500	; (adr r3, 80078a0 <__ieee754_asin+0x318>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 fdec 	bl	800028c <__adddf3>
 80076b4:	4622      	mov	r2, r4
 80076b6:	462b      	mov	r3, r5
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	a37a      	add	r3, pc, #488	; (adr r3, 80078a8 <__ieee754_asin+0x320>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	ec41 0b18 	vmov	d8, r0, r1
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	a378      	add	r3, pc, #480	; (adr r3, 80078b0 <__ieee754_asin+0x328>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	4622      	mov	r2, r4
 80076da:	462b      	mov	r3, r5
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	a375      	add	r3, pc, #468	; (adr r3, 80078b8 <__ieee754_asin+0x330>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f8 fdd1 	bl	800028c <__adddf3>
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	a373      	add	r3, pc, #460	; (adr r3, 80078c0 <__ieee754_asin+0x338>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f8 fdc6 	bl	8000288 <__aeabi_dsub>
 80076fc:	4622      	mov	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	f7f8 ff7a 	bl	80005f8 <__aeabi_dmul>
 8007704:	4b72      	ldr	r3, [pc, #456]	; (80078d0 <__ieee754_asin+0x348>)
 8007706:	2200      	movs	r2, #0
 8007708:	f7f8 fdc0 	bl	800028c <__adddf3>
 800770c:	ec45 4b10 	vmov	d0, r4, r5
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	f000 fb58 	bl	8007dc8 <__ieee754_sqrt>
 8007718:	4b6f      	ldr	r3, [pc, #444]	; (80078d8 <__ieee754_asin+0x350>)
 800771a:	4598      	cmp	r8, r3
 800771c:	ec5b ab10 	vmov	sl, fp, d0
 8007720:	f340 80dc 	ble.w	80078dc <__ieee754_asin+0x354>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	ec51 0b18 	vmov	r0, r1, d8
 800772c:	f7f9 f88e 	bl	800084c <__aeabi_ddiv>
 8007730:	4652      	mov	r2, sl
 8007732:	465b      	mov	r3, fp
 8007734:	f7f8 ff60 	bl	80005f8 <__aeabi_dmul>
 8007738:	4652      	mov	r2, sl
 800773a:	465b      	mov	r3, fp
 800773c:	f7f8 fda6 	bl	800028c <__adddf3>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	f7f8 fda2 	bl	800028c <__adddf3>
 8007748:	a347      	add	r3, pc, #284	; (adr r3, 8007868 <__ieee754_asin+0x2e0>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 fd9b 	bl	8000288 <__aeabi_dsub>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	a142      	add	r1, pc, #264	; (adr r1, 8007860 <__ieee754_asin+0x2d8>)
 8007758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfdc      	itt	le
 8007766:	4602      	movle	r2, r0
 8007768:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800776c:	4604      	mov	r4, r0
 800776e:	460d      	mov	r5, r1
 8007770:	bfdc      	itt	le
 8007772:	4614      	movle	r4, r2
 8007774:	461d      	movle	r5, r3
 8007776:	e743      	b.n	8007600 <__ieee754_asin+0x78>
 8007778:	ee10 2a10 	vmov	r2, s0
 800777c:	ee10 0a10 	vmov	r0, s0
 8007780:	462b      	mov	r3, r5
 8007782:	4629      	mov	r1, r5
 8007784:	f7f8 ff38 	bl	80005f8 <__aeabi_dmul>
 8007788:	a33b      	add	r3, pc, #236	; (adr r3, 8007878 <__ieee754_asin+0x2f0>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	f7f8 ff31 	bl	80005f8 <__aeabi_dmul>
 8007796:	a33a      	add	r3, pc, #232	; (adr r3, 8007880 <__ieee754_asin+0x2f8>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd76 	bl	800028c <__adddf3>
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	f7f8 ff28 	bl	80005f8 <__aeabi_dmul>
 80077a8:	a337      	add	r3, pc, #220	; (adr r3, 8007888 <__ieee754_asin+0x300>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	4632      	mov	r2, r6
 80077b4:	463b      	mov	r3, r7
 80077b6:	f7f8 ff1f 	bl	80005f8 <__aeabi_dmul>
 80077ba:	a335      	add	r3, pc, #212	; (adr r3, 8007890 <__ieee754_asin+0x308>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd64 	bl	800028c <__adddf3>
 80077c4:	4632      	mov	r2, r6
 80077c6:	463b      	mov	r3, r7
 80077c8:	f7f8 ff16 	bl	80005f8 <__aeabi_dmul>
 80077cc:	a332      	add	r3, pc, #200	; (adr r3, 8007898 <__ieee754_asin+0x310>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd59 	bl	8000288 <__aeabi_dsub>
 80077d6:	4632      	mov	r2, r6
 80077d8:	463b      	mov	r3, r7
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	a330      	add	r3, pc, #192	; (adr r3, 80078a0 <__ieee754_asin+0x318>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fd52 	bl	800028c <__adddf3>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	f7f8 ff04 	bl	80005f8 <__aeabi_dmul>
 80077f0:	a32d      	add	r3, pc, #180	; (adr r3, 80078a8 <__ieee754_asin+0x320>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	4680      	mov	r8, r0
 80077f8:	4689      	mov	r9, r1
 80077fa:	4630      	mov	r0, r6
 80077fc:	4639      	mov	r1, r7
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	a32b      	add	r3, pc, #172	; (adr r3, 80078b0 <__ieee754_asin+0x328>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fd3e 	bl	8000288 <__aeabi_dsub>
 800780c:	4632      	mov	r2, r6
 800780e:	463b      	mov	r3, r7
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	a328      	add	r3, pc, #160	; (adr r3, 80078b8 <__ieee754_asin+0x330>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fd37 	bl	800028c <__adddf3>
 800781e:	4632      	mov	r2, r6
 8007820:	463b      	mov	r3, r7
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	a326      	add	r3, pc, #152	; (adr r3, 80078c0 <__ieee754_asin+0x338>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	4632      	mov	r2, r6
 8007832:	463b      	mov	r3, r7
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <__ieee754_asin+0x348>)
 800783a:	2200      	movs	r2, #0
 800783c:	f7f8 fd26 	bl	800028c <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f9 f800 	bl	800084c <__aeabi_ddiv>
 800784c:	4622      	mov	r2, r4
 800784e:	462b      	mov	r3, r5
 8007850:	f7f8 fed2 	bl	80005f8 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	e6bf      	b.n	80075de <__ieee754_asin+0x56>
 800785e:	bf00      	nop
 8007860:	54442d18 	.word	0x54442d18
 8007864:	3ff921fb 	.word	0x3ff921fb
 8007868:	33145c07 	.word	0x33145c07
 800786c:	3c91a626 	.word	0x3c91a626
 8007870:	8800759c 	.word	0x8800759c
 8007874:	7e37e43c 	.word	0x7e37e43c
 8007878:	0dfdf709 	.word	0x0dfdf709
 800787c:	3f023de1 	.word	0x3f023de1
 8007880:	7501b288 	.word	0x7501b288
 8007884:	3f49efe0 	.word	0x3f49efe0
 8007888:	b5688f3b 	.word	0xb5688f3b
 800788c:	3fa48228 	.word	0x3fa48228
 8007890:	0e884455 	.word	0x0e884455
 8007894:	3fc9c155 	.word	0x3fc9c155
 8007898:	03eb6f7d 	.word	0x03eb6f7d
 800789c:	3fd4d612 	.word	0x3fd4d612
 80078a0:	55555555 	.word	0x55555555
 80078a4:	3fc55555 	.word	0x3fc55555
 80078a8:	b12e9282 	.word	0xb12e9282
 80078ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80078b0:	1b8d0159 	.word	0x1b8d0159
 80078b4:	3fe6066c 	.word	0x3fe6066c
 80078b8:	9c598ac8 	.word	0x9c598ac8
 80078bc:	40002ae5 	.word	0x40002ae5
 80078c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80078c4:	40033a27 	.word	0x40033a27
 80078c8:	3fefffff 	.word	0x3fefffff
 80078cc:	3fdfffff 	.word	0x3fdfffff
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	3fef3332 	.word	0x3fef3332
 80078dc:	ee10 2a10 	vmov	r2, s0
 80078e0:	ee10 0a10 	vmov	r0, s0
 80078e4:	465b      	mov	r3, fp
 80078e6:	4659      	mov	r1, fp
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	ec41 0b19 	vmov	d9, r0, r1
 80078f4:	ec51 0b18 	vmov	r0, r1, d8
 80078f8:	f7f8 ffa8 	bl	800084c <__aeabi_ddiv>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	ec51 0b19 	vmov	r0, r1, d9
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	f04f 0800 	mov.w	r8, #0
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	4642      	mov	r2, r8
 8007912:	465b      	mov	r3, fp
 8007914:	4640      	mov	r0, r8
 8007916:	4659      	mov	r1, fp
 8007918:	f7f8 fe6e 	bl	80005f8 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	4642      	mov	r2, r8
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	465b      	mov	r3, fp
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	f7f8 fcaa 	bl	800028c <__adddf3>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f8 ff84 	bl	800084c <__aeabi_ddiv>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	a113      	add	r1, pc, #76	; (adr r1, 80079a0 <__ieee754_asin+0x418>)
 8007952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f8 fc91 	bl	8000288 <__aeabi_dsub>
 8007966:	4642      	mov	r2, r8
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	465b      	mov	r3, fp
 800796e:	4640      	mov	r0, r8
 8007970:	4659      	mov	r1, fp
 8007972:	f7f8 fc8b 	bl	800028c <__adddf3>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	a10b      	add	r1, pc, #44	; (adr r1, 80079a8 <__ieee754_asin+0x420>)
 800797c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007980:	f7f8 fc82 	bl	8000288 <__aeabi_dsub>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4620      	mov	r0, r4
 800798a:	4629      	mov	r1, r5
 800798c:	f7f8 fc7c 	bl	8000288 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	a104      	add	r1, pc, #16	; (adr r1, 80079a8 <__ieee754_asin+0x420>)
 8007996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799a:	e6df      	b.n	800775c <__ieee754_asin+0x1d4>
 800799c:	f3af 8000 	nop.w
 80079a0:	33145c07 	.word	0x33145c07
 80079a4:	3c91a626 	.word	0x3c91a626
 80079a8:	54442d18 	.word	0x54442d18
 80079ac:	3fe921fb 	.word	0x3fe921fb

080079b0 <__ieee754_rem_pio2>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	ed2d 8b02 	vpush	{d8}
 80079b8:	ec55 4b10 	vmov	r4, r5, d0
 80079bc:	4bca      	ldr	r3, [pc, #808]	; (8007ce8 <__ieee754_rem_pio2+0x338>)
 80079be:	b08b      	sub	sp, #44	; 0x2c
 80079c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80079c4:	4598      	cmp	r8, r3
 80079c6:	4682      	mov	sl, r0
 80079c8:	9502      	str	r5, [sp, #8]
 80079ca:	dc08      	bgt.n	80079de <__ieee754_rem_pio2+0x2e>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	ed80 0b00 	vstr	d0, [r0]
 80079d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80079d8:	f04f 0b00 	mov.w	fp, #0
 80079dc:	e028      	b.n	8007a30 <__ieee754_rem_pio2+0x80>
 80079de:	4bc3      	ldr	r3, [pc, #780]	; (8007cec <__ieee754_rem_pio2+0x33c>)
 80079e0:	4598      	cmp	r8, r3
 80079e2:	dc78      	bgt.n	8007ad6 <__ieee754_rem_pio2+0x126>
 80079e4:	9b02      	ldr	r3, [sp, #8]
 80079e6:	4ec2      	ldr	r6, [pc, #776]	; (8007cf0 <__ieee754_rem_pio2+0x340>)
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	ee10 0a10 	vmov	r0, s0
 80079ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8007cb0 <__ieee754_rem_pio2+0x300>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	4629      	mov	r1, r5
 80079f6:	dd39      	ble.n	8007a6c <__ieee754_rem_pio2+0xbc>
 80079f8:	f7f8 fc46 	bl	8000288 <__aeabi_dsub>
 80079fc:	45b0      	cmp	r8, r6
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	d01b      	beq.n	8007a3c <__ieee754_rem_pio2+0x8c>
 8007a04:	a3ac      	add	r3, pc, #688	; (adr r3, 8007cb8 <__ieee754_rem_pio2+0x308>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f7f8 fc3d 	bl	8000288 <__aeabi_dsub>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	e9ca 2300 	strd	r2, r3, [sl]
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 fc35 	bl	8000288 <__aeabi_dsub>
 8007a1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007cb8 <__ieee754_rem_pio2+0x308>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc30 	bl	8000288 <__aeabi_dsub>
 8007a28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a2c:	f04f 0b01 	mov.w	fp, #1
 8007a30:	4658      	mov	r0, fp
 8007a32:	b00b      	add	sp, #44	; 0x2c
 8007a34:	ecbd 8b02 	vpop	{d8}
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007cc0 <__ieee754_rem_pio2+0x310>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc21 	bl	8000288 <__aeabi_dsub>
 8007a46:	a3a0      	add	r3, pc, #640	; (adr r3, 8007cc8 <__ieee754_rem_pio2+0x318>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	f7f8 fc1a 	bl	8000288 <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	e9ca 2300 	strd	r2, r3, [sl]
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f8 fc12 	bl	8000288 <__aeabi_dsub>
 8007a64:	a398      	add	r3, pc, #608	; (adr r3, 8007cc8 <__ieee754_rem_pio2+0x318>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	e7db      	b.n	8007a24 <__ieee754_rem_pio2+0x74>
 8007a6c:	f7f8 fc0e 	bl	800028c <__adddf3>
 8007a70:	45b0      	cmp	r8, r6
 8007a72:	4604      	mov	r4, r0
 8007a74:	460d      	mov	r5, r1
 8007a76:	d016      	beq.n	8007aa6 <__ieee754_rem_pio2+0xf6>
 8007a78:	a38f      	add	r3, pc, #572	; (adr r3, 8007cb8 <__ieee754_rem_pio2+0x308>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 fc05 	bl	800028c <__adddf3>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	e9ca 2300 	strd	r2, r3, [sl]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7f8 fbfb 	bl	8000288 <__aeabi_dsub>
 8007a92:	a389      	add	r3, pc, #548	; (adr r3, 8007cb8 <__ieee754_rem_pio2+0x308>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f7f8 fbf8 	bl	800028c <__adddf3>
 8007a9c:	f04f 3bff 	mov.w	fp, #4294967295
 8007aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aa4:	e7c4      	b.n	8007a30 <__ieee754_rem_pio2+0x80>
 8007aa6:	a386      	add	r3, pc, #536	; (adr r3, 8007cc0 <__ieee754_rem_pio2+0x310>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fbee 	bl	800028c <__adddf3>
 8007ab0:	a385      	add	r3, pc, #532	; (adr r3, 8007cc8 <__ieee754_rem_pio2+0x318>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	f7f8 fbe7 	bl	800028c <__adddf3>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	e9ca 2300 	strd	r2, r3, [sl]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fbdd 	bl	8000288 <__aeabi_dsub>
 8007ace:	a37e      	add	r3, pc, #504	; (adr r3, 8007cc8 <__ieee754_rem_pio2+0x318>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	e7e0      	b.n	8007a98 <__ieee754_rem_pio2+0xe8>
 8007ad6:	4b87      	ldr	r3, [pc, #540]	; (8007cf4 <__ieee754_rem_pio2+0x344>)
 8007ad8:	4598      	cmp	r8, r3
 8007ada:	f300 80d9 	bgt.w	8007c90 <__ieee754_rem_pio2+0x2e0>
 8007ade:	f000 fefd 	bl	80088dc <fabs>
 8007ae2:	ec55 4b10 	vmov	r4, r5, d0
 8007ae6:	ee10 0a10 	vmov	r0, s0
 8007aea:	a379      	add	r3, pc, #484	; (adr r3, 8007cd0 <__ieee754_rem_pio2+0x320>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	4b80      	ldr	r3, [pc, #512]	; (8007cf8 <__ieee754_rem_pio2+0x348>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	f7f8 fbc7 	bl	800028c <__adddf3>
 8007afe:	f7f9 f82b 	bl	8000b58 <__aeabi_d2iz>
 8007b02:	4683      	mov	fp, r0
 8007b04:	f7f8 fd0e 	bl	8000524 <__aeabi_i2d>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	ec43 2b18 	vmov	d8, r2, r3
 8007b10:	a367      	add	r3, pc, #412	; (adr r3, 8007cb0 <__ieee754_rem_pio2+0x300>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 fbb1 	bl	8000288 <__aeabi_dsub>
 8007b26:	a364      	add	r3, pc, #400	; (adr r3, 8007cb8 <__ieee754_rem_pio2+0x308>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	ec51 0b18 	vmov	r0, r1, d8
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	f1bb 0f1f 	cmp.w	fp, #31
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	dc0d      	bgt.n	8007b5e <__ieee754_rem_pio2+0x1ae>
 8007b42:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <__ieee754_rem_pio2+0x34c>)
 8007b44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	d006      	beq.n	8007b5e <__ieee754_rem_pio2+0x1ae>
 8007b50:	4622      	mov	r2, r4
 8007b52:	462b      	mov	r3, r5
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f8 fb96 	bl	8000288 <__aeabi_dsub>
 8007b5c:	e00f      	b.n	8007b7e <__ieee754_rem_pio2+0x1ce>
 8007b5e:	462b      	mov	r3, r5
 8007b60:	4622      	mov	r2, r4
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	f7f8 fb8f 	bl	8000288 <__aeabi_dsub>
 8007b6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007b78:	f1b8 0f10 	cmp.w	r8, #16
 8007b7c:	dc02      	bgt.n	8007b84 <__ieee754_rem_pio2+0x1d4>
 8007b7e:	e9ca 0100 	strd	r0, r1, [sl]
 8007b82:	e039      	b.n	8007bf8 <__ieee754_rem_pio2+0x248>
 8007b84:	a34e      	add	r3, pc, #312	; (adr r3, 8007cc0 <__ieee754_rem_pio2+0x310>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	ec51 0b18 	vmov	r0, r1, d8
 8007b8e:	f7f8 fd33 	bl	80005f8 <__aeabi_dmul>
 8007b92:	4604      	mov	r4, r0
 8007b94:	460d      	mov	r5, r1
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	4689      	mov	r9, r1
 8007baa:	4630      	mov	r0, r6
 8007bac:	4639      	mov	r1, r7
 8007bae:	f7f8 fb6b 	bl	8000288 <__aeabi_dsub>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	f7f8 fb67 	bl	8000288 <__aeabi_dsub>
 8007bba:	a343      	add	r3, pc, #268	; (adr r3, 8007cc8 <__ieee754_rem_pio2+0x318>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	ec51 0b18 	vmov	r0, r1, d8
 8007bc8:	f7f8 fd16 	bl	80005f8 <__aeabi_dmul>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fb5a 	bl	8000288 <__aeabi_dsub>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4649      	mov	r1, r9
 8007be0:	f7f8 fb52 	bl	8000288 <__aeabi_dsub>
 8007be4:	9a03      	ldr	r2, [sp, #12]
 8007be6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b31      	cmp	r3, #49	; 0x31
 8007bee:	dc24      	bgt.n	8007c3a <__ieee754_rem_pio2+0x28a>
 8007bf0:	e9ca 0100 	strd	r0, r1, [sl]
 8007bf4:	4646      	mov	r6, r8
 8007bf6:	464f      	mov	r7, r9
 8007bf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4642      	mov	r2, r8
 8007c00:	464b      	mov	r3, r9
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 fb40 	bl	8000288 <__aeabi_dsub>
 8007c08:	462b      	mov	r3, r5
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	9b02      	ldr	r3, [sp, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c18:	f6bf af0a 	bge.w	8007a30 <__ieee754_rem_pio2+0x80>
 8007c1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c20:	f8ca 3004 	str.w	r3, [sl, #4]
 8007c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c28:	f8ca 8000 	str.w	r8, [sl]
 8007c2c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007c30:	f8ca 300c 	str.w	r3, [sl, #12]
 8007c34:	f1cb 0b00 	rsb	fp, fp, #0
 8007c38:	e6fa      	b.n	8007a30 <__ieee754_rem_pio2+0x80>
 8007c3a:	a327      	add	r3, pc, #156	; (adr r3, 8007cd8 <__ieee754_rem_pio2+0x328>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	ec51 0b18 	vmov	r0, r1, d8
 8007c44:	f7f8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8007c48:	4604      	mov	r4, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	f7f8 fb0c 	bl	8000288 <__aeabi_dsub>
 8007c70:	a31b      	add	r3, pc, #108	; (adr r3, 8007ce0 <__ieee754_rem_pio2+0x330>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	4604      	mov	r4, r0
 8007c78:	460d      	mov	r5, r1
 8007c7a:	ec51 0b18 	vmov	r0, r1, d8
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	f7f8 faff 	bl	8000288 <__aeabi_dsub>
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	e75f      	b.n	8007b50 <__ieee754_rem_pio2+0x1a0>
 8007c90:	4b1b      	ldr	r3, [pc, #108]	; (8007d00 <__ieee754_rem_pio2+0x350>)
 8007c92:	4598      	cmp	r8, r3
 8007c94:	dd36      	ble.n	8007d04 <__ieee754_rem_pio2+0x354>
 8007c96:	ee10 2a10 	vmov	r2, s0
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 faf2 	bl	8000288 <__aeabi_dsub>
 8007ca4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ca8:	e9ca 0100 	strd	r0, r1, [sl]
 8007cac:	e694      	b.n	80079d8 <__ieee754_rem_pio2+0x28>
 8007cae:	bf00      	nop
 8007cb0:	54400000 	.word	0x54400000
 8007cb4:	3ff921fb 	.word	0x3ff921fb
 8007cb8:	1a626331 	.word	0x1a626331
 8007cbc:	3dd0b461 	.word	0x3dd0b461
 8007cc0:	1a600000 	.word	0x1a600000
 8007cc4:	3dd0b461 	.word	0x3dd0b461
 8007cc8:	2e037073 	.word	0x2e037073
 8007ccc:	3ba3198a 	.word	0x3ba3198a
 8007cd0:	6dc9c883 	.word	0x6dc9c883
 8007cd4:	3fe45f30 	.word	0x3fe45f30
 8007cd8:	2e000000 	.word	0x2e000000
 8007cdc:	3ba3198a 	.word	0x3ba3198a
 8007ce0:	252049c1 	.word	0x252049c1
 8007ce4:	397b839a 	.word	0x397b839a
 8007ce8:	3fe921fb 	.word	0x3fe921fb
 8007cec:	4002d97b 	.word	0x4002d97b
 8007cf0:	3ff921fb 	.word	0x3ff921fb
 8007cf4:	413921fb 	.word	0x413921fb
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	08008f1c 	.word	0x08008f1c
 8007d00:	7fefffff 	.word	0x7fefffff
 8007d04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007d08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007d0c:	ee10 0a10 	vmov	r0, s0
 8007d10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007d14:	ee10 6a10 	vmov	r6, s0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	f7f8 ff1d 	bl	8000b58 <__aeabi_d2iz>
 8007d1e:	f7f8 fc01 	bl	8000524 <__aeabi_i2d>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2e:	f7f8 faab 	bl	8000288 <__aeabi_dsub>
 8007d32:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <__ieee754_rem_pio2+0x410>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	f7f8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	f7f8 ff0b 	bl	8000b58 <__aeabi_d2iz>
 8007d42:	f7f8 fbef 	bl	8000524 <__aeabi_i2d>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d52:	f7f8 fa99 	bl	8000288 <__aeabi_dsub>
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <__ieee754_rem_pio2+0x410>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f7f8 fc4d 	bl	80005f8 <__aeabi_dmul>
 8007d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d62:	ad04      	add	r5, sp, #16
 8007d64:	f04f 0803 	mov.w	r8, #3
 8007d68:	46a9      	mov	r9, r5
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	4632      	mov	r2, r6
 8007d70:	463b      	mov	r3, r7
 8007d72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007d76:	46c3      	mov	fp, r8
 8007d78:	3d08      	subs	r5, #8
 8007d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d7e:	f7f8 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d1f3      	bne.n	8007d6e <__ieee754_rem_pio2+0x3be>
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <__ieee754_rem_pio2+0x414>)
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4622      	mov	r2, r4
 8007d90:	465b      	mov	r3, fp
 8007d92:	4651      	mov	r1, sl
 8007d94:	4648      	mov	r0, r9
 8007d96:	f000 f993 	bl	80080c0 <__kernel_rem_pio2>
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	4683      	mov	fp, r0
 8007da0:	f6bf ae46 	bge.w	8007a30 <__ieee754_rem_pio2+0x80>
 8007da4:	e9da 2100 	ldrd	r2, r1, [sl]
 8007da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dac:	e9ca 2300 	strd	r2, r3, [sl]
 8007db0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007db8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007dbc:	e73a      	b.n	8007c34 <__ieee754_rem_pio2+0x284>
 8007dbe:	bf00      	nop
 8007dc0:	41700000 	.word	0x41700000
 8007dc4:	08008f9c 	.word	0x08008f9c

08007dc8 <__ieee754_sqrt>:
 8007dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dcc:	ec55 4b10 	vmov	r4, r5, d0
 8007dd0:	4e55      	ldr	r6, [pc, #340]	; (8007f28 <__ieee754_sqrt+0x160>)
 8007dd2:	43ae      	bics	r6, r5
 8007dd4:	ee10 0a10 	vmov	r0, s0
 8007dd8:	ee10 3a10 	vmov	r3, s0
 8007ddc:	462a      	mov	r2, r5
 8007dde:	4629      	mov	r1, r5
 8007de0:	d110      	bne.n	8007e04 <__ieee754_sqrt+0x3c>
 8007de2:	ee10 2a10 	vmov	r2, s0
 8007de6:	462b      	mov	r3, r5
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4620      	mov	r0, r4
 8007df2:	4629      	mov	r1, r5
 8007df4:	f7f8 fa4a 	bl	800028c <__adddf3>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	ec45 4b10 	vmov	d0, r4, r5
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	dc10      	bgt.n	8007e2a <__ieee754_sqrt+0x62>
 8007e08:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e0c:	4330      	orrs	r0, r6
 8007e0e:	d0f5      	beq.n	8007dfc <__ieee754_sqrt+0x34>
 8007e10:	b15d      	cbz	r5, 8007e2a <__ieee754_sqrt+0x62>
 8007e12:	ee10 2a10 	vmov	r2, s0
 8007e16:	462b      	mov	r3, r5
 8007e18:	ee10 0a10 	vmov	r0, s0
 8007e1c:	f7f8 fa34 	bl	8000288 <__aeabi_dsub>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	f7f8 fd12 	bl	800084c <__aeabi_ddiv>
 8007e28:	e7e6      	b.n	8007df8 <__ieee754_sqrt+0x30>
 8007e2a:	1512      	asrs	r2, r2, #20
 8007e2c:	d074      	beq.n	8007f18 <__ieee754_sqrt+0x150>
 8007e2e:	07d4      	lsls	r4, r2, #31
 8007e30:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007e34:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e3c:	bf5e      	ittt	pl
 8007e3e:	0fda      	lsrpl	r2, r3, #31
 8007e40:	005b      	lslpl	r3, r3, #1
 8007e42:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007e46:	2400      	movs	r4, #0
 8007e48:	0fda      	lsrs	r2, r3, #31
 8007e4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007e4e:	107f      	asrs	r7, r7, #1
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	2516      	movs	r5, #22
 8007e54:	4620      	mov	r0, r4
 8007e56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007e5a:	1886      	adds	r6, r0, r2
 8007e5c:	428e      	cmp	r6, r1
 8007e5e:	bfde      	ittt	le
 8007e60:	1b89      	suble	r1, r1, r6
 8007e62:	18b0      	addle	r0, r6, r2
 8007e64:	18a4      	addle	r4, r4, r2
 8007e66:	0049      	lsls	r1, r1, #1
 8007e68:	3d01      	subs	r5, #1
 8007e6a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007e6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007e72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e76:	d1f0      	bne.n	8007e5a <__ieee754_sqrt+0x92>
 8007e78:	462a      	mov	r2, r5
 8007e7a:	f04f 0e20 	mov.w	lr, #32
 8007e7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007e82:	4281      	cmp	r1, r0
 8007e84:	eb06 0c05 	add.w	ip, r6, r5
 8007e88:	dc02      	bgt.n	8007e90 <__ieee754_sqrt+0xc8>
 8007e8a:	d113      	bne.n	8007eb4 <__ieee754_sqrt+0xec>
 8007e8c:	459c      	cmp	ip, r3
 8007e8e:	d811      	bhi.n	8007eb4 <__ieee754_sqrt+0xec>
 8007e90:	f1bc 0f00 	cmp.w	ip, #0
 8007e94:	eb0c 0506 	add.w	r5, ip, r6
 8007e98:	da43      	bge.n	8007f22 <__ieee754_sqrt+0x15a>
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	db41      	blt.n	8007f22 <__ieee754_sqrt+0x15a>
 8007e9e:	f100 0801 	add.w	r8, r0, #1
 8007ea2:	1a09      	subs	r1, r1, r0
 8007ea4:	459c      	cmp	ip, r3
 8007ea6:	bf88      	it	hi
 8007ea8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007eac:	eba3 030c 	sub.w	r3, r3, ip
 8007eb0:	4432      	add	r2, r6
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007eb8:	f1be 0e01 	subs.w	lr, lr, #1
 8007ebc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ec4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ec8:	d1db      	bne.n	8007e82 <__ieee754_sqrt+0xba>
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	d006      	beq.n	8007edc <__ieee754_sqrt+0x114>
 8007ece:	1c50      	adds	r0, r2, #1
 8007ed0:	bf13      	iteet	ne
 8007ed2:	3201      	addne	r2, #1
 8007ed4:	3401      	addeq	r4, #1
 8007ed6:	4672      	moveq	r2, lr
 8007ed8:	f022 0201 	bicne.w	r2, r2, #1
 8007edc:	1063      	asrs	r3, r4, #1
 8007ede:	0852      	lsrs	r2, r2, #1
 8007ee0:	07e1      	lsls	r1, r4, #31
 8007ee2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ee6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007eea:	bf48      	it	mi
 8007eec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007ef0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	e781      	b.n	8007dfc <__ieee754_sqrt+0x34>
 8007ef8:	0ad9      	lsrs	r1, r3, #11
 8007efa:	3815      	subs	r0, #21
 8007efc:	055b      	lsls	r3, r3, #21
 8007efe:	2900      	cmp	r1, #0
 8007f00:	d0fa      	beq.n	8007ef8 <__ieee754_sqrt+0x130>
 8007f02:	02cd      	lsls	r5, r1, #11
 8007f04:	d50a      	bpl.n	8007f1c <__ieee754_sqrt+0x154>
 8007f06:	f1c2 0420 	rsb	r4, r2, #32
 8007f0a:	fa23 f404 	lsr.w	r4, r3, r4
 8007f0e:	1e55      	subs	r5, r2, #1
 8007f10:	4093      	lsls	r3, r2
 8007f12:	4321      	orrs	r1, r4
 8007f14:	1b42      	subs	r2, r0, r5
 8007f16:	e78a      	b.n	8007e2e <__ieee754_sqrt+0x66>
 8007f18:	4610      	mov	r0, r2
 8007f1a:	e7f0      	b.n	8007efe <__ieee754_sqrt+0x136>
 8007f1c:	0049      	lsls	r1, r1, #1
 8007f1e:	3201      	adds	r2, #1
 8007f20:	e7ef      	b.n	8007f02 <__ieee754_sqrt+0x13a>
 8007f22:	4680      	mov	r8, r0
 8007f24:	e7bd      	b.n	8007ea2 <__ieee754_sqrt+0xda>
 8007f26:	bf00      	nop
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	00000000 	.word	0x00000000

08007f30 <__kernel_cos>:
 8007f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	ec57 6b10 	vmov	r6, r7, d0
 8007f38:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007f3c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007f40:	ed8d 1b00 	vstr	d1, [sp]
 8007f44:	da07      	bge.n	8007f56 <__kernel_cos+0x26>
 8007f46:	ee10 0a10 	vmov	r0, s0
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fe04 	bl	8000b58 <__aeabi_d2iz>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f000 8088 	beq.w	8008066 <__kernel_cos+0x136>
 8007f56:	4632      	mov	r2, r6
 8007f58:	463b      	mov	r3, r7
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	f7f8 fb4b 	bl	80005f8 <__aeabi_dmul>
 8007f62:	4b51      	ldr	r3, [pc, #324]	; (80080a8 <__kernel_cos+0x178>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	f7f8 fb45 	bl	80005f8 <__aeabi_dmul>
 8007f6e:	a340      	add	r3, pc, #256	; (adr r3, 8008070 <__kernel_cos+0x140>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	a33d      	add	r3, pc, #244	; (adr r3, 8008078 <__kernel_cos+0x148>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f981 	bl	800028c <__adddf3>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 fb33 	bl	80005f8 <__aeabi_dmul>
 8007f92:	a33b      	add	r3, pc, #236	; (adr r3, 8008080 <__kernel_cos+0x150>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f976 	bl	8000288 <__aeabi_dsub>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	a338      	add	r3, pc, #224	; (adr r3, 8008088 <__kernel_cos+0x158>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f96f 	bl	800028c <__adddf3>
 8007fae:	4622      	mov	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	f7f8 fb21 	bl	80005f8 <__aeabi_dmul>
 8007fb6:	a336      	add	r3, pc, #216	; (adr r3, 8008090 <__kernel_cos+0x160>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f964 	bl	8000288 <__aeabi_dsub>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	a333      	add	r3, pc, #204	; (adr r3, 8008098 <__kernel_cos+0x168>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f95d 	bl	800028c <__adddf3>
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 fb03 	bl	80005f8 <__aeabi_dmul>
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7f8 f945 	bl	8000288 <__aeabi_dsub>
 8007ffe:	4b2b      	ldr	r3, [pc, #172]	; (80080ac <__kernel_cos+0x17c>)
 8008000:	4598      	cmp	r8, r3
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	dc10      	bgt.n	800802a <__kernel_cos+0xfa>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4650      	mov	r0, sl
 800800e:	4659      	mov	r1, fp
 8008010:	f7f8 f93a 	bl	8000288 <__aeabi_dsub>
 8008014:	460b      	mov	r3, r1
 8008016:	4926      	ldr	r1, [pc, #152]	; (80080b0 <__kernel_cos+0x180>)
 8008018:	4602      	mov	r2, r0
 800801a:	2000      	movs	r0, #0
 800801c:	f7f8 f934 	bl	8000288 <__aeabi_dsub>
 8008020:	ec41 0b10 	vmov	d0, r0, r1
 8008024:	b003      	add	sp, #12
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <__kernel_cos+0x184>)
 800802c:	4920      	ldr	r1, [pc, #128]	; (80080b0 <__kernel_cos+0x180>)
 800802e:	4598      	cmp	r8, r3
 8008030:	bfcc      	ite	gt
 8008032:	4d21      	ldrgt	r5, [pc, #132]	; (80080b8 <__kernel_cos+0x188>)
 8008034:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008038:	2400      	movs	r4, #0
 800803a:	4622      	mov	r2, r4
 800803c:	462b      	mov	r3, r5
 800803e:	2000      	movs	r0, #0
 8008040:	f7f8 f922 	bl	8000288 <__aeabi_dsub>
 8008044:	4622      	mov	r2, r4
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	462b      	mov	r3, r5
 800804c:	4650      	mov	r0, sl
 800804e:	4659      	mov	r1, fp
 8008050:	f7f8 f91a 	bl	8000288 <__aeabi_dsub>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 f916 	bl	8000288 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	e7da      	b.n	800801c <__kernel_cos+0xec>
 8008066:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80080a0 <__kernel_cos+0x170>
 800806a:	e7db      	b.n	8008024 <__kernel_cos+0xf4>
 800806c:	f3af 8000 	nop.w
 8008070:	be8838d4 	.word	0xbe8838d4
 8008074:	bda8fae9 	.word	0xbda8fae9
 8008078:	bdb4b1c4 	.word	0xbdb4b1c4
 800807c:	3e21ee9e 	.word	0x3e21ee9e
 8008080:	809c52ad 	.word	0x809c52ad
 8008084:	3e927e4f 	.word	0x3e927e4f
 8008088:	19cb1590 	.word	0x19cb1590
 800808c:	3efa01a0 	.word	0x3efa01a0
 8008090:	16c15177 	.word	0x16c15177
 8008094:	3f56c16c 	.word	0x3f56c16c
 8008098:	5555554c 	.word	0x5555554c
 800809c:	3fa55555 	.word	0x3fa55555
 80080a0:	00000000 	.word	0x00000000
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	3fe00000 	.word	0x3fe00000
 80080ac:	3fd33332 	.word	0x3fd33332
 80080b0:	3ff00000 	.word	0x3ff00000
 80080b4:	3fe90000 	.word	0x3fe90000
 80080b8:	3fd20000 	.word	0x3fd20000
 80080bc:	00000000 	.word	0x00000000

080080c0 <__kernel_rem_pio2>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b02 	vpush	{d8}
 80080c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80080cc:	f112 0f14 	cmn.w	r2, #20
 80080d0:	9308      	str	r3, [sp, #32]
 80080d2:	9101      	str	r1, [sp, #4]
 80080d4:	4bc4      	ldr	r3, [pc, #784]	; (80083e8 <__kernel_rem_pio2+0x328>)
 80080d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80080d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80080da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80080e6:	bfa8      	it	ge
 80080e8:	1ed4      	subge	r4, r2, #3
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	bfb2      	itee	lt
 80080ee:	2400      	movlt	r4, #0
 80080f0:	2318      	movge	r3, #24
 80080f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80080f6:	f06f 0317 	mvn.w	r3, #23
 80080fa:	fb04 3303 	mla	r3, r4, r3, r3
 80080fe:	eb03 0a02 	add.w	sl, r3, r2
 8008102:	9b02      	ldr	r3, [sp, #8]
 8008104:	9a06      	ldr	r2, [sp, #24]
 8008106:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80083d8 <__kernel_rem_pio2+0x318>
 800810a:	eb03 0802 	add.w	r8, r3, r2
 800810e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008110:	1aa7      	subs	r7, r4, r2
 8008112:	ae22      	add	r6, sp, #136	; 0x88
 8008114:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008118:	2500      	movs	r5, #0
 800811a:	4545      	cmp	r5, r8
 800811c:	dd13      	ble.n	8008146 <__kernel_rem_pio2+0x86>
 800811e:	9b08      	ldr	r3, [sp, #32]
 8008120:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80083d8 <__kernel_rem_pio2+0x318>
 8008124:	aa22      	add	r2, sp, #136	; 0x88
 8008126:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800812a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	9b02      	ldr	r3, [sp, #8]
 8008134:	4598      	cmp	r8, r3
 8008136:	dc2f      	bgt.n	8008198 <__kernel_rem_pio2+0xd8>
 8008138:	ed8d 8b04 	vstr	d8, [sp, #16]
 800813c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008140:	462f      	mov	r7, r5
 8008142:	2600      	movs	r6, #0
 8008144:	e01b      	b.n	800817e <__kernel_rem_pio2+0xbe>
 8008146:	42ef      	cmn	r7, r5
 8008148:	d407      	bmi.n	800815a <__kernel_rem_pio2+0x9a>
 800814a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800814e:	f7f8 f9e9 	bl	8000524 <__aeabi_i2d>
 8008152:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008156:	3501      	adds	r5, #1
 8008158:	e7df      	b.n	800811a <__kernel_rem_pio2+0x5a>
 800815a:	ec51 0b18 	vmov	r0, r1, d8
 800815e:	e7f8      	b.n	8008152 <__kernel_rem_pio2+0x92>
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008168:	f7f8 fa46 	bl	80005f8 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008174:	f7f8 f88a 	bl	800028c <__adddf3>
 8008178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800817c:	3601      	adds	r6, #1
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	429e      	cmp	r6, r3
 8008182:	f1a7 0708 	sub.w	r7, r7, #8
 8008186:	ddeb      	ble.n	8008160 <__kernel_rem_pio2+0xa0>
 8008188:	ed9d 7b04 	vldr	d7, [sp, #16]
 800818c:	f108 0801 	add.w	r8, r8, #1
 8008190:	ecab 7b02 	vstmia	fp!, {d7}
 8008194:	3508      	adds	r5, #8
 8008196:	e7cc      	b.n	8008132 <__kernel_rem_pio2+0x72>
 8008198:	9b02      	ldr	r3, [sp, #8]
 800819a:	aa0e      	add	r2, sp, #56	; 0x38
 800819c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081a0:	930d      	str	r3, [sp, #52]	; 0x34
 80081a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80081a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80081a8:	9c02      	ldr	r4, [sp, #8]
 80081aa:	930c      	str	r3, [sp, #48]	; 0x30
 80081ac:	00e3      	lsls	r3, r4, #3
 80081ae:	930a      	str	r3, [sp, #40]	; 0x28
 80081b0:	ab9a      	add	r3, sp, #616	; 0x268
 80081b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80081ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80081be:	ab72      	add	r3, sp, #456	; 0x1c8
 80081c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80081c4:	46c3      	mov	fp, r8
 80081c6:	46a1      	mov	r9, r4
 80081c8:	f1b9 0f00 	cmp.w	r9, #0
 80081cc:	f1a5 0508 	sub.w	r5, r5, #8
 80081d0:	dc77      	bgt.n	80082c2 <__kernel_rem_pio2+0x202>
 80081d2:	ec47 6b10 	vmov	d0, r6, r7
 80081d6:	4650      	mov	r0, sl
 80081d8:	f000 fc12 	bl	8008a00 <scalbn>
 80081dc:	ec57 6b10 	vmov	r6, r7, d0
 80081e0:	2200      	movs	r2, #0
 80081e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80081e6:	ee10 0a10 	vmov	r0, s0
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	ec41 0b10 	vmov	d0, r0, r1
 80081f4:	f000 fb7c 	bl	80088f0 <floor>
 80081f8:	4b7c      	ldr	r3, [pc, #496]	; (80083ec <__kernel_rem_pio2+0x32c>)
 80081fa:	ec51 0b10 	vmov	r0, r1, d0
 80081fe:	2200      	movs	r2, #0
 8008200:	f7f8 f9fa 	bl	80005f8 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 f83c 	bl	8000288 <__aeabi_dsub>
 8008210:	460f      	mov	r7, r1
 8008212:	4606      	mov	r6, r0
 8008214:	f7f8 fca0 	bl	8000b58 <__aeabi_d2iz>
 8008218:	9004      	str	r0, [sp, #16]
 800821a:	f7f8 f983 	bl	8000524 <__aeabi_i2d>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 f82f 	bl	8000288 <__aeabi_dsub>
 800822a:	f1ba 0f00 	cmp.w	sl, #0
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	dd6d      	ble.n	8008310 <__kernel_rem_pio2+0x250>
 8008234:	1e62      	subs	r2, r4, #1
 8008236:	ab0e      	add	r3, sp, #56	; 0x38
 8008238:	9d04      	ldr	r5, [sp, #16]
 800823a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800823e:	f1ca 0118 	rsb	r1, sl, #24
 8008242:	fa40 f301 	asr.w	r3, r0, r1
 8008246:	441d      	add	r5, r3
 8008248:	408b      	lsls	r3, r1
 800824a:	1ac0      	subs	r0, r0, r3
 800824c:	ab0e      	add	r3, sp, #56	; 0x38
 800824e:	9504      	str	r5, [sp, #16]
 8008250:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008254:	f1ca 0317 	rsb	r3, sl, #23
 8008258:	fa40 fb03 	asr.w	fp, r0, r3
 800825c:	f1bb 0f00 	cmp.w	fp, #0
 8008260:	dd65      	ble.n	800832e <__kernel_rem_pio2+0x26e>
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	2200      	movs	r2, #0
 8008266:	3301      	adds	r3, #1
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	4615      	mov	r5, r2
 800826c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008270:	4294      	cmp	r4, r2
 8008272:	f300 809c 	bgt.w	80083ae <__kernel_rem_pio2+0x2ee>
 8008276:	f1ba 0f00 	cmp.w	sl, #0
 800827a:	dd07      	ble.n	800828c <__kernel_rem_pio2+0x1cc>
 800827c:	f1ba 0f01 	cmp.w	sl, #1
 8008280:	f000 80c0 	beq.w	8008404 <__kernel_rem_pio2+0x344>
 8008284:	f1ba 0f02 	cmp.w	sl, #2
 8008288:	f000 80c6 	beq.w	8008418 <__kernel_rem_pio2+0x358>
 800828c:	f1bb 0f02 	cmp.w	fp, #2
 8008290:	d14d      	bne.n	800832e <__kernel_rem_pio2+0x26e>
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	4956      	ldr	r1, [pc, #344]	; (80083f0 <__kernel_rem_pio2+0x330>)
 8008298:	2000      	movs	r0, #0
 800829a:	f7f7 fff5 	bl	8000288 <__aeabi_dsub>
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	d043      	beq.n	800832e <__kernel_rem_pio2+0x26e>
 80082a6:	4650      	mov	r0, sl
 80082a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80083e0 <__kernel_rem_pio2+0x320>
 80082ac:	f000 fba8 	bl	8008a00 <scalbn>
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	ec53 2b10 	vmov	r2, r3, d0
 80082b8:	f7f7 ffe6 	bl	8000288 <__aeabi_dsub>
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	e035      	b.n	800832e <__kernel_rem_pio2+0x26e>
 80082c2:	4b4c      	ldr	r3, [pc, #304]	; (80083f4 <__kernel_rem_pio2+0x334>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	f7f8 fc43 	bl	8000b58 <__aeabi_d2iz>
 80082d2:	f7f8 f927 	bl	8000524 <__aeabi_i2d>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	ec43 2b18 	vmov	d8, r2, r3
 80082de:	4b46      	ldr	r3, [pc, #280]	; (80083f8 <__kernel_rem_pio2+0x338>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f8 f989 	bl	80005f8 <__aeabi_dmul>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4630      	mov	r0, r6
 80082ec:	4639      	mov	r1, r7
 80082ee:	f7f7 ffcb 	bl	8000288 <__aeabi_dsub>
 80082f2:	f7f8 fc31 	bl	8000b58 <__aeabi_d2iz>
 80082f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082fa:	f84b 0b04 	str.w	r0, [fp], #4
 80082fe:	ec51 0b18 	vmov	r0, r1, d8
 8008302:	f7f7 ffc3 	bl	800028c <__adddf3>
 8008306:	f109 39ff 	add.w	r9, r9, #4294967295
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	e75b      	b.n	80081c8 <__kernel_rem_pio2+0x108>
 8008310:	d106      	bne.n	8008320 <__kernel_rem_pio2+0x260>
 8008312:	1e63      	subs	r3, r4, #1
 8008314:	aa0e      	add	r2, sp, #56	; 0x38
 8008316:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800831a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800831e:	e79d      	b.n	800825c <__kernel_rem_pio2+0x19c>
 8008320:	4b36      	ldr	r3, [pc, #216]	; (80083fc <__kernel_rem_pio2+0x33c>)
 8008322:	2200      	movs	r2, #0
 8008324:	f7f8 fbee 	bl	8000b04 <__aeabi_dcmpge>
 8008328:	2800      	cmp	r0, #0
 800832a:	d13d      	bne.n	80083a8 <__kernel_rem_pio2+0x2e8>
 800832c:	4683      	mov	fp, r0
 800832e:	2200      	movs	r2, #0
 8008330:	2300      	movs	r3, #0
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f8 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800833a:	2800      	cmp	r0, #0
 800833c:	f000 80c0 	beq.w	80084c0 <__kernel_rem_pio2+0x400>
 8008340:	1e65      	subs	r5, r4, #1
 8008342:	462b      	mov	r3, r5
 8008344:	2200      	movs	r2, #0
 8008346:	9902      	ldr	r1, [sp, #8]
 8008348:	428b      	cmp	r3, r1
 800834a:	da6c      	bge.n	8008426 <__kernel_rem_pio2+0x366>
 800834c:	2a00      	cmp	r2, #0
 800834e:	f000 8089 	beq.w	8008464 <__kernel_rem_pio2+0x3a4>
 8008352:	ab0e      	add	r3, sp, #56	; 0x38
 8008354:	f1aa 0a18 	sub.w	sl, sl, #24
 8008358:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80ad 	beq.w	80084bc <__kernel_rem_pio2+0x3fc>
 8008362:	4650      	mov	r0, sl
 8008364:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80083e0 <__kernel_rem_pio2+0x320>
 8008368:	f000 fb4a 	bl	8008a00 <scalbn>
 800836c:	ab9a      	add	r3, sp, #616	; 0x268
 800836e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008372:	ec57 6b10 	vmov	r6, r7, d0
 8008376:	00ec      	lsls	r4, r5, #3
 8008378:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800837c:	46aa      	mov	sl, r5
 800837e:	f1ba 0f00 	cmp.w	sl, #0
 8008382:	f280 80d6 	bge.w	8008532 <__kernel_rem_pio2+0x472>
 8008386:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80083d8 <__kernel_rem_pio2+0x318>
 800838a:	462e      	mov	r6, r5
 800838c:	2e00      	cmp	r6, #0
 800838e:	f2c0 8104 	blt.w	800859a <__kernel_rem_pio2+0x4da>
 8008392:	ab72      	add	r3, sp, #456	; 0x1c8
 8008394:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008398:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008400 <__kernel_rem_pio2+0x340>
 800839c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	1baf      	subs	r7, r5, r6
 80083a6:	e0ea      	b.n	800857e <__kernel_rem_pio2+0x4be>
 80083a8:	f04f 0b02 	mov.w	fp, #2
 80083ac:	e759      	b.n	8008262 <__kernel_rem_pio2+0x1a2>
 80083ae:	f8d8 3000 	ldr.w	r3, [r8]
 80083b2:	b955      	cbnz	r5, 80083ca <__kernel_rem_pio2+0x30a>
 80083b4:	b123      	cbz	r3, 80083c0 <__kernel_rem_pio2+0x300>
 80083b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80083ba:	f8c8 3000 	str.w	r3, [r8]
 80083be:	2301      	movs	r3, #1
 80083c0:	3201      	adds	r2, #1
 80083c2:	f108 0804 	add.w	r8, r8, #4
 80083c6:	461d      	mov	r5, r3
 80083c8:	e752      	b.n	8008270 <__kernel_rem_pio2+0x1b0>
 80083ca:	1acb      	subs	r3, r1, r3
 80083cc:	f8c8 3000 	str.w	r3, [r8]
 80083d0:	462b      	mov	r3, r5
 80083d2:	e7f5      	b.n	80083c0 <__kernel_rem_pio2+0x300>
 80083d4:	f3af 8000 	nop.w
	...
 80083e4:	3ff00000 	.word	0x3ff00000
 80083e8:	080090e8 	.word	0x080090e8
 80083ec:	40200000 	.word	0x40200000
 80083f0:	3ff00000 	.word	0x3ff00000
 80083f4:	3e700000 	.word	0x3e700000
 80083f8:	41700000 	.word	0x41700000
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	080090a8 	.word	0x080090a8
 8008404:	1e62      	subs	r2, r4, #1
 8008406:	ab0e      	add	r3, sp, #56	; 0x38
 8008408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008410:	a90e      	add	r1, sp, #56	; 0x38
 8008412:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008416:	e739      	b.n	800828c <__kernel_rem_pio2+0x1cc>
 8008418:	1e62      	subs	r2, r4, #1
 800841a:	ab0e      	add	r3, sp, #56	; 0x38
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008424:	e7f4      	b.n	8008410 <__kernel_rem_pio2+0x350>
 8008426:	a90e      	add	r1, sp, #56	; 0x38
 8008428:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800842c:	3b01      	subs	r3, #1
 800842e:	430a      	orrs	r2, r1
 8008430:	e789      	b.n	8008346 <__kernel_rem_pio2+0x286>
 8008432:	3301      	adds	r3, #1
 8008434:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008438:	2900      	cmp	r1, #0
 800843a:	d0fa      	beq.n	8008432 <__kernel_rem_pio2+0x372>
 800843c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800843e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008442:	446a      	add	r2, sp
 8008444:	3a98      	subs	r2, #152	; 0x98
 8008446:	920a      	str	r2, [sp, #40]	; 0x28
 8008448:	9a08      	ldr	r2, [sp, #32]
 800844a:	18e3      	adds	r3, r4, r3
 800844c:	18a5      	adds	r5, r4, r2
 800844e:	aa22      	add	r2, sp, #136	; 0x88
 8008450:	f104 0801 	add.w	r8, r4, #1
 8008454:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	4543      	cmp	r3, r8
 800845e:	da04      	bge.n	800846a <__kernel_rem_pio2+0x3aa>
 8008460:	461c      	mov	r4, r3
 8008462:	e6a3      	b.n	80081ac <__kernel_rem_pio2+0xec>
 8008464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008466:	2301      	movs	r3, #1
 8008468:	e7e4      	b.n	8008434 <__kernel_rem_pio2+0x374>
 800846a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008470:	f7f8 f858 	bl	8000524 <__aeabi_i2d>
 8008474:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800847a:	46ab      	mov	fp, r5
 800847c:	461c      	mov	r4, r3
 800847e:	f04f 0900 	mov.w	r9, #0
 8008482:	2600      	movs	r6, #0
 8008484:	2700      	movs	r7, #0
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	4599      	cmp	r9, r3
 800848a:	dd06      	ble.n	800849a <__kernel_rem_pio2+0x3da>
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008492:	f108 0801 	add.w	r8, r8, #1
 8008496:	930a      	str	r3, [sp, #40]	; 0x28
 8008498:	e7df      	b.n	800845a <__kernel_rem_pio2+0x39a>
 800849a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800849e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f7 feed 	bl	800028c <__adddf3>
 80084b2:	f109 0901 	add.w	r9, r9, #1
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	e7e4      	b.n	8008486 <__kernel_rem_pio2+0x3c6>
 80084bc:	3d01      	subs	r5, #1
 80084be:	e748      	b.n	8008352 <__kernel_rem_pio2+0x292>
 80084c0:	ec47 6b10 	vmov	d0, r6, r7
 80084c4:	f1ca 0000 	rsb	r0, sl, #0
 80084c8:	f000 fa9a 	bl	8008a00 <scalbn>
 80084cc:	ec57 6b10 	vmov	r6, r7, d0
 80084d0:	4ba0      	ldr	r3, [pc, #640]	; (8008754 <__kernel_rem_pio2+0x694>)
 80084d2:	ee10 0a10 	vmov	r0, s0
 80084d6:	2200      	movs	r2, #0
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f8 fb13 	bl	8000b04 <__aeabi_dcmpge>
 80084de:	b1f8      	cbz	r0, 8008520 <__kernel_rem_pio2+0x460>
 80084e0:	4b9d      	ldr	r3, [pc, #628]	; (8008758 <__kernel_rem_pio2+0x698>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f8 f886 	bl	80005f8 <__aeabi_dmul>
 80084ec:	f7f8 fb34 	bl	8000b58 <__aeabi_d2iz>
 80084f0:	4680      	mov	r8, r0
 80084f2:	f7f8 f817 	bl	8000524 <__aeabi_i2d>
 80084f6:	4b97      	ldr	r3, [pc, #604]	; (8008754 <__kernel_rem_pio2+0x694>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	460b      	mov	r3, r1
 8008500:	4602      	mov	r2, r0
 8008502:	4639      	mov	r1, r7
 8008504:	4630      	mov	r0, r6
 8008506:	f7f7 febf 	bl	8000288 <__aeabi_dsub>
 800850a:	f7f8 fb25 	bl	8000b58 <__aeabi_d2iz>
 800850e:	1c65      	adds	r5, r4, #1
 8008510:	ab0e      	add	r3, sp, #56	; 0x38
 8008512:	f10a 0a18 	add.w	sl, sl, #24
 8008516:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800851a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800851e:	e720      	b.n	8008362 <__kernel_rem_pio2+0x2a2>
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 fb18 	bl	8000b58 <__aeabi_d2iz>
 8008528:	ab0e      	add	r3, sp, #56	; 0x38
 800852a:	4625      	mov	r5, r4
 800852c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008530:	e717      	b.n	8008362 <__kernel_rem_pio2+0x2a2>
 8008532:	ab0e      	add	r3, sp, #56	; 0x38
 8008534:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	4632      	mov	r2, r6
 800853e:	463b      	mov	r3, r7
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	4b84      	ldr	r3, [pc, #528]	; (8008758 <__kernel_rem_pio2+0x698>)
 8008546:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800854a:	2200      	movs	r2, #0
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	e70f      	b.n	800837e <__kernel_rem_pio2+0x2be>
 800855e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008562:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008566:	f7f8 f847 	bl	80005f8 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008572:	f7f7 fe8b 	bl	800028c <__adddf3>
 8008576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	4598      	cmp	r8, r3
 8008582:	dc01      	bgt.n	8008588 <__kernel_rem_pio2+0x4c8>
 8008584:	45b8      	cmp	r8, r7
 8008586:	ddea      	ble.n	800855e <__kernel_rem_pio2+0x49e>
 8008588:	ed9d 7b06 	vldr	d7, [sp, #24]
 800858c:	ab4a      	add	r3, sp, #296	; 0x128
 800858e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008592:	ed87 7b00 	vstr	d7, [r7]
 8008596:	3e01      	subs	r6, #1
 8008598:	e6f8      	b.n	800838c <__kernel_rem_pio2+0x2cc>
 800859a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800859c:	2b02      	cmp	r3, #2
 800859e:	dc0b      	bgt.n	80085b8 <__kernel_rem_pio2+0x4f8>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dc35      	bgt.n	8008610 <__kernel_rem_pio2+0x550>
 80085a4:	d059      	beq.n	800865a <__kernel_rem_pio2+0x59a>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	f003 0007 	and.w	r0, r3, #7
 80085ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80085b0:	ecbd 8b02 	vpop	{d8}
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d1f3      	bne.n	80085a6 <__kernel_rem_pio2+0x4e6>
 80085be:	ab4a      	add	r3, sp, #296	; 0x128
 80085c0:	4423      	add	r3, r4
 80085c2:	9306      	str	r3, [sp, #24]
 80085c4:	461c      	mov	r4, r3
 80085c6:	469a      	mov	sl, r3
 80085c8:	9502      	str	r5, [sp, #8]
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f1aa 0a08 	sub.w	sl, sl, #8
 80085d2:	dc6b      	bgt.n	80086ac <__kernel_rem_pio2+0x5ec>
 80085d4:	46aa      	mov	sl, r5
 80085d6:	f1ba 0f01 	cmp.w	sl, #1
 80085da:	f1a4 0408 	sub.w	r4, r4, #8
 80085de:	f300 8085 	bgt.w	80086ec <__kernel_rem_pio2+0x62c>
 80085e2:	9c06      	ldr	r4, [sp, #24]
 80085e4:	2000      	movs	r0, #0
 80085e6:	3408      	adds	r4, #8
 80085e8:	2100      	movs	r1, #0
 80085ea:	2d01      	cmp	r5, #1
 80085ec:	f300 809d 	bgt.w	800872a <__kernel_rem_pio2+0x66a>
 80085f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80085f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80085f8:	f1bb 0f00 	cmp.w	fp, #0
 80085fc:	f040 809b 	bne.w	8008736 <__kernel_rem_pio2+0x676>
 8008600:	9b01      	ldr	r3, [sp, #4]
 8008602:	e9c3 5600 	strd	r5, r6, [r3]
 8008606:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800860a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800860e:	e7ca      	b.n	80085a6 <__kernel_rem_pio2+0x4e6>
 8008610:	3408      	adds	r4, #8
 8008612:	ab4a      	add	r3, sp, #296	; 0x128
 8008614:	441c      	add	r4, r3
 8008616:	462e      	mov	r6, r5
 8008618:	2000      	movs	r0, #0
 800861a:	2100      	movs	r1, #0
 800861c:	2e00      	cmp	r6, #0
 800861e:	da36      	bge.n	800868e <__kernel_rem_pio2+0x5ce>
 8008620:	f1bb 0f00 	cmp.w	fp, #0
 8008624:	d039      	beq.n	800869a <__kernel_rem_pio2+0x5da>
 8008626:	4602      	mov	r2, r0
 8008628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800862c:	9c01      	ldr	r4, [sp, #4]
 800862e:	e9c4 2300 	strd	r2, r3, [r4]
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800863a:	f7f7 fe25 	bl	8000288 <__aeabi_dsub>
 800863e:	ae4c      	add	r6, sp, #304	; 0x130
 8008640:	2401      	movs	r4, #1
 8008642:	42a5      	cmp	r5, r4
 8008644:	da2c      	bge.n	80086a0 <__kernel_rem_pio2+0x5e0>
 8008646:	f1bb 0f00 	cmp.w	fp, #0
 800864a:	d002      	beq.n	8008652 <__kernel_rem_pio2+0x592>
 800864c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008650:	4619      	mov	r1, r3
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008658:	e7a5      	b.n	80085a6 <__kernel_rem_pio2+0x4e6>
 800865a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800865e:	eb0d 0403 	add.w	r4, sp, r3
 8008662:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008666:	2000      	movs	r0, #0
 8008668:	2100      	movs	r1, #0
 800866a:	2d00      	cmp	r5, #0
 800866c:	da09      	bge.n	8008682 <__kernel_rem_pio2+0x5c2>
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	d002      	beq.n	800867a <__kernel_rem_pio2+0x5ba>
 8008674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008678:	4619      	mov	r1, r3
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	e9c3 0100 	strd	r0, r1, [r3]
 8008680:	e791      	b.n	80085a6 <__kernel_rem_pio2+0x4e6>
 8008682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008686:	f7f7 fe01 	bl	800028c <__adddf3>
 800868a:	3d01      	subs	r5, #1
 800868c:	e7ed      	b.n	800866a <__kernel_rem_pio2+0x5aa>
 800868e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008692:	f7f7 fdfb 	bl	800028c <__adddf3>
 8008696:	3e01      	subs	r6, #1
 8008698:	e7c0      	b.n	800861c <__kernel_rem_pio2+0x55c>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	e7c5      	b.n	800862c <__kernel_rem_pio2+0x56c>
 80086a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80086a4:	f7f7 fdf2 	bl	800028c <__adddf3>
 80086a8:	3401      	adds	r4, #1
 80086aa:	e7ca      	b.n	8008642 <__kernel_rem_pio2+0x582>
 80086ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80086b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	9302      	str	r3, [sp, #8]
 80086ba:	4632      	mov	r2, r6
 80086bc:	463b      	mov	r3, r7
 80086be:	4640      	mov	r0, r8
 80086c0:	4649      	mov	r1, r9
 80086c2:	f7f7 fde3 	bl	800028c <__adddf3>
 80086c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f7 fdd9 	bl	8000288 <__aeabi_dsub>
 80086d6:	4632      	mov	r2, r6
 80086d8:	463b      	mov	r3, r7
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	ed9d 7b08 	vldr	d7, [sp, #32]
 80086e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086e6:	ed8a 7b00 	vstr	d7, [sl]
 80086ea:	e76e      	b.n	80085ca <__kernel_rem_pio2+0x50a>
 80086ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80086f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80086f4:	4640      	mov	r0, r8
 80086f6:	4632      	mov	r2, r6
 80086f8:	463b      	mov	r3, r7
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f7 fdc6 	bl	800028c <__adddf3>
 8008700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	f7f7 fdba 	bl	800028c <__adddf3>
 8008718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800871c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008720:	ed84 7b00 	vstr	d7, [r4]
 8008724:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008728:	e755      	b.n	80085d6 <__kernel_rem_pio2+0x516>
 800872a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800872e:	f7f7 fdad 	bl	800028c <__adddf3>
 8008732:	3d01      	subs	r5, #1
 8008734:	e759      	b.n	80085ea <__kernel_rem_pio2+0x52a>
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	9a01      	ldr	r2, [sp, #4]
 800873a:	601d      	str	r5, [r3, #0]
 800873c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008740:	605c      	str	r4, [r3, #4]
 8008742:	609f      	str	r7, [r3, #8]
 8008744:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008748:	60d3      	str	r3, [r2, #12]
 800874a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800874e:	6110      	str	r0, [r2, #16]
 8008750:	6153      	str	r3, [r2, #20]
 8008752:	e728      	b.n	80085a6 <__kernel_rem_pio2+0x4e6>
 8008754:	41700000 	.word	0x41700000
 8008758:	3e700000 	.word	0x3e700000
 800875c:	00000000 	.word	0x00000000

08008760 <__kernel_sin>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	ed2d 8b04 	vpush	{d8-d9}
 8008768:	eeb0 8a41 	vmov.f32	s16, s2
 800876c:	eef0 8a61 	vmov.f32	s17, s3
 8008770:	ec55 4b10 	vmov	r4, r5, d0
 8008774:	b083      	sub	sp, #12
 8008776:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800877a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	da06      	bge.n	8008790 <__kernel_sin+0x30>
 8008782:	ee10 0a10 	vmov	r0, s0
 8008786:	4629      	mov	r1, r5
 8008788:	f7f8 f9e6 	bl	8000b58 <__aeabi_d2iz>
 800878c:	2800      	cmp	r0, #0
 800878e:	d051      	beq.n	8008834 <__kernel_sin+0xd4>
 8008790:	4622      	mov	r2, r4
 8008792:	462b      	mov	r3, r5
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	4682      	mov	sl, r0
 800879e:	468b      	mov	fp, r1
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 ff26 	bl	80005f8 <__aeabi_dmul>
 80087ac:	a341      	add	r3, pc, #260	; (adr r3, 80088b4 <__kernel_sin+0x154>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4680      	mov	r8, r0
 80087b4:	4689      	mov	r9, r1
 80087b6:	4650      	mov	r0, sl
 80087b8:	4659      	mov	r1, fp
 80087ba:	f7f7 ff1d 	bl	80005f8 <__aeabi_dmul>
 80087be:	a33f      	add	r3, pc, #252	; (adr r3, 80088bc <__kernel_sin+0x15c>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fd60 	bl	8000288 <__aeabi_dsub>
 80087c8:	4652      	mov	r2, sl
 80087ca:	465b      	mov	r3, fp
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	a33c      	add	r3, pc, #240	; (adr r3, 80088c4 <__kernel_sin+0x164>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd59 	bl	800028c <__adddf3>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	a33a      	add	r3, pc, #232	; (adr r3, 80088cc <__kernel_sin+0x16c>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fd4e 	bl	8000288 <__aeabi_dsub>
 80087ec:	4652      	mov	r2, sl
 80087ee:	465b      	mov	r3, fp
 80087f0:	f7f7 ff02 	bl	80005f8 <__aeabi_dmul>
 80087f4:	a337      	add	r3, pc, #220	; (adr r3, 80088d4 <__kernel_sin+0x174>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd47 	bl	800028c <__adddf3>
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	4606      	mov	r6, r0
 8008802:	460f      	mov	r7, r1
 8008804:	b9eb      	cbnz	r3, 8008842 <__kernel_sin+0xe2>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4650      	mov	r0, sl
 800880c:	4659      	mov	r1, fp
 800880e:	f7f7 fef3 	bl	80005f8 <__aeabi_dmul>
 8008812:	a325      	add	r3, pc, #148	; (adr r3, 80088a8 <__kernel_sin+0x148>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 fd36 	bl	8000288 <__aeabi_dsub>
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4620      	mov	r0, r4
 800882a:	4629      	mov	r1, r5
 800882c:	f7f7 fd2e 	bl	800028c <__adddf3>
 8008830:	4604      	mov	r4, r0
 8008832:	460d      	mov	r5, r1
 8008834:	ec45 4b10 	vmov	d0, r4, r5
 8008838:	b003      	add	sp, #12
 800883a:	ecbd 8b04 	vpop	{d8-d9}
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <__kernel_sin+0x150>)
 8008844:	ec51 0b18 	vmov	r0, r1, d8
 8008848:	2200      	movs	r2, #0
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	4632      	mov	r2, r6
 8008850:	ec41 0b19 	vmov	d9, r0, r1
 8008854:	463b      	mov	r3, r7
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fecd 	bl	80005f8 <__aeabi_dmul>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	ec51 0b19 	vmov	r0, r1, d9
 8008866:	f7f7 fd0f 	bl	8000288 <__aeabi_dsub>
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	ec53 2b18 	vmov	r2, r3, d8
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	a30b      	add	r3, pc, #44	; (adr r3, 80088a8 <__kernel_sin+0x148>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4606      	mov	r6, r0
 8008882:	460f      	mov	r7, r1
 8008884:	4640      	mov	r0, r8
 8008886:	4649      	mov	r1, r9
 8008888:	f7f7 feb6 	bl	80005f8 <__aeabi_dmul>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f7 fcfa 	bl	800028c <__adddf3>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fcf2 	bl	8000288 <__aeabi_dsub>
 80088a4:	e7c4      	b.n	8008830 <__kernel_sin+0xd0>
 80088a6:	bf00      	nop
 80088a8:	55555549 	.word	0x55555549
 80088ac:	3fc55555 	.word	0x3fc55555
 80088b0:	3fe00000 	.word	0x3fe00000
 80088b4:	5acfd57c 	.word	0x5acfd57c
 80088b8:	3de5d93a 	.word	0x3de5d93a
 80088bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80088c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80088c4:	57b1fe7d 	.word	0x57b1fe7d
 80088c8:	3ec71de3 	.word	0x3ec71de3
 80088cc:	19c161d5 	.word	0x19c161d5
 80088d0:	3f2a01a0 	.word	0x3f2a01a0
 80088d4:	1110f8a6 	.word	0x1110f8a6
 80088d8:	3f811111 	.word	0x3f811111

080088dc <fabs>:
 80088dc:	ec51 0b10 	vmov	r0, r1, d0
 80088e0:	ee10 2a10 	vmov	r2, s0
 80088e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088e8:	ec43 2b10 	vmov	d0, r2, r3
 80088ec:	4770      	bx	lr
	...

080088f0 <floor>:
 80088f0:	ec51 0b10 	vmov	r0, r1, d0
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80088fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008900:	2e13      	cmp	r6, #19
 8008902:	ee10 5a10 	vmov	r5, s0
 8008906:	ee10 8a10 	vmov	r8, s0
 800890a:	460c      	mov	r4, r1
 800890c:	dc32      	bgt.n	8008974 <floor+0x84>
 800890e:	2e00      	cmp	r6, #0
 8008910:	da14      	bge.n	800893c <floor+0x4c>
 8008912:	a333      	add	r3, pc, #204	; (adr r3, 80089e0 <floor+0xf0>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f7f7 fcb8 	bl	800028c <__adddf3>
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f7f8 f8fa 	bl	8000b18 <__aeabi_dcmpgt>
 8008924:	b138      	cbz	r0, 8008936 <floor+0x46>
 8008926:	2c00      	cmp	r4, #0
 8008928:	da57      	bge.n	80089da <floor+0xea>
 800892a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800892e:	431d      	orrs	r5, r3
 8008930:	d001      	beq.n	8008936 <floor+0x46>
 8008932:	4c2d      	ldr	r4, [pc, #180]	; (80089e8 <floor+0xf8>)
 8008934:	2500      	movs	r5, #0
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	e025      	b.n	8008988 <floor+0x98>
 800893c:	4f2b      	ldr	r7, [pc, #172]	; (80089ec <floor+0xfc>)
 800893e:	4137      	asrs	r7, r6
 8008940:	ea01 0307 	and.w	r3, r1, r7
 8008944:	4303      	orrs	r3, r0
 8008946:	d01f      	beq.n	8008988 <floor+0x98>
 8008948:	a325      	add	r3, pc, #148	; (adr r3, 80089e0 <floor+0xf0>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fc9d 	bl	800028c <__adddf3>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	f7f8 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800895a:	2800      	cmp	r0, #0
 800895c:	d0eb      	beq.n	8008936 <floor+0x46>
 800895e:	2c00      	cmp	r4, #0
 8008960:	bfbe      	ittt	lt
 8008962:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008966:	fa43 f606 	asrlt.w	r6, r3, r6
 800896a:	19a4      	addlt	r4, r4, r6
 800896c:	ea24 0407 	bic.w	r4, r4, r7
 8008970:	2500      	movs	r5, #0
 8008972:	e7e0      	b.n	8008936 <floor+0x46>
 8008974:	2e33      	cmp	r6, #51	; 0x33
 8008976:	dd0b      	ble.n	8008990 <floor+0xa0>
 8008978:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800897c:	d104      	bne.n	8008988 <floor+0x98>
 800897e:	ee10 2a10 	vmov	r2, s0
 8008982:	460b      	mov	r3, r1
 8008984:	f7f7 fc82 	bl	800028c <__adddf3>
 8008988:	ec41 0b10 	vmov	d0, r0, r1
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	fa23 f707 	lsr.w	r7, r3, r7
 800899c:	4207      	tst	r7, r0
 800899e:	d0f3      	beq.n	8008988 <floor+0x98>
 80089a0:	a30f      	add	r3, pc, #60	; (adr r3, 80089e0 <floor+0xf0>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc71 	bl	800028c <__adddf3>
 80089aa:	2200      	movs	r2, #0
 80089ac:	2300      	movs	r3, #0
 80089ae:	f7f8 f8b3 	bl	8000b18 <__aeabi_dcmpgt>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d0bf      	beq.n	8008936 <floor+0x46>
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	da02      	bge.n	80089c0 <floor+0xd0>
 80089ba:	2e14      	cmp	r6, #20
 80089bc:	d103      	bne.n	80089c6 <floor+0xd6>
 80089be:	3401      	adds	r4, #1
 80089c0:	ea25 0507 	bic.w	r5, r5, r7
 80089c4:	e7b7      	b.n	8008936 <floor+0x46>
 80089c6:	2301      	movs	r3, #1
 80089c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80089cc:	fa03 f606 	lsl.w	r6, r3, r6
 80089d0:	4435      	add	r5, r6
 80089d2:	4545      	cmp	r5, r8
 80089d4:	bf38      	it	cc
 80089d6:	18e4      	addcc	r4, r4, r3
 80089d8:	e7f2      	b.n	80089c0 <floor+0xd0>
 80089da:	2500      	movs	r5, #0
 80089dc:	462c      	mov	r4, r5
 80089de:	e7aa      	b.n	8008936 <floor+0x46>
 80089e0:	8800759c 	.word	0x8800759c
 80089e4:	7e37e43c 	.word	0x7e37e43c
 80089e8:	bff00000 	.word	0xbff00000
 80089ec:	000fffff 	.word	0x000fffff

080089f0 <nan>:
 80089f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80089f8 <nan+0x8>
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	00000000 	.word	0x00000000
 80089fc:	7ff80000 	.word	0x7ff80000

08008a00 <scalbn>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	ec55 4b10 	vmov	r4, r5, d0
 8008a06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	b99a      	cbnz	r2, 8008a38 <scalbn+0x38>
 8008a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008a14:	4323      	orrs	r3, r4
 8008a16:	d036      	beq.n	8008a86 <scalbn+0x86>
 8008a18:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <scalbn+0x100>)
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	ee10 0a10 	vmov	r0, s0
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fde9 	bl	80005f8 <__aeabi_dmul>
 8008a26:	4b37      	ldr	r3, [pc, #220]	; (8008b04 <scalbn+0x104>)
 8008a28:	429e      	cmp	r6, r3
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	da10      	bge.n	8008a52 <scalbn+0x52>
 8008a30:	a32b      	add	r3, pc, #172	; (adr r3, 8008ae0 <scalbn+0xe0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	e03a      	b.n	8008aae <scalbn+0xae>
 8008a38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008a3c:	428a      	cmp	r2, r1
 8008a3e:	d10c      	bne.n	8008a5a <scalbn+0x5a>
 8008a40:	ee10 2a10 	vmov	r2, s0
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fc20 	bl	800028c <__adddf3>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	e019      	b.n	8008a86 <scalbn+0x86>
 8008a52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a56:	460b      	mov	r3, r1
 8008a58:	3a36      	subs	r2, #54	; 0x36
 8008a5a:	4432      	add	r2, r6
 8008a5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008a60:	428a      	cmp	r2, r1
 8008a62:	dd08      	ble.n	8008a76 <scalbn+0x76>
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	a120      	add	r1, pc, #128	; (adr r1, 8008ae8 <scalbn+0xe8>)
 8008a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a6c:	da1c      	bge.n	8008aa8 <scalbn+0xa8>
 8008a6e:	a120      	add	r1, pc, #128	; (adr r1, 8008af0 <scalbn+0xf0>)
 8008a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a74:	e018      	b.n	8008aa8 <scalbn+0xa8>
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	dd08      	ble.n	8008a8c <scalbn+0x8c>
 8008a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a86:	ec45 4b10 	vmov	d0, r4, r5
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008a90:	da19      	bge.n	8008ac6 <scalbn+0xc6>
 8008a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a96:	429e      	cmp	r6, r3
 8008a98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008a9c:	dd0a      	ble.n	8008ab4 <scalbn+0xb4>
 8008a9e:	a112      	add	r1, pc, #72	; (adr r1, 8008ae8 <scalbn+0xe8>)
 8008aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e2      	bne.n	8008a6e <scalbn+0x6e>
 8008aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8008ae8 <scalbn+0xe8>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	e7cb      	b.n	8008a4c <scalbn+0x4c>
 8008ab4:	a10a      	add	r1, pc, #40	; (adr r1, 8008ae0 <scalbn+0xe0>)
 8008ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0b8      	beq.n	8008a30 <scalbn+0x30>
 8008abe:	a10e      	add	r1, pc, #56	; (adr r1, 8008af8 <scalbn+0xf8>)
 8008ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac4:	e7b4      	b.n	8008a30 <scalbn+0x30>
 8008ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008aca:	3236      	adds	r2, #54	; 0x36
 8008acc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <scalbn+0x108>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	e7e8      	b.n	8008aae <scalbn+0xae>
 8008adc:	f3af 8000 	nop.w
 8008ae0:	c2f8f359 	.word	0xc2f8f359
 8008ae4:	01a56e1f 	.word	0x01a56e1f
 8008ae8:	8800759c 	.word	0x8800759c
 8008aec:	7e37e43c 	.word	0x7e37e43c
 8008af0:	8800759c 	.word	0x8800759c
 8008af4:	fe37e43c 	.word	0xfe37e43c
 8008af8:	c2f8f359 	.word	0xc2f8f359
 8008afc:	81a56e1f 	.word	0x81a56e1f
 8008b00:	43500000 	.word	0x43500000
 8008b04:	ffff3cb0 	.word	0xffff3cb0
 8008b08:	3c900000 	.word	0x3c900000

08008b0c <_init>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr

08008b18 <_fini>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr
